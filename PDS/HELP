./ ADD NAME=GENWYL
=FILES
)F FUNCTION -
   WYLBUR FILES --- ACTIVE-EXTERNAL-EXEC

          THE TERM "FILE" IS USED TO DESCRIBE ANY COLLECTION OF
          TEXT (WHICH MIGHT BE A LETTER,  A  LIST  OF  DATA,  A
          REPORT, OR A COMPUTER PROGRAM).

   ACTIVE
          A FILE IS CALLED AN "ACTIVE FILE" WHILE IT IS HELD  IN
          THE  ACTIVE  PART OF THE COMPUTER'S MEMORY AND YOU ARE
          WORKING ON IT.  WHILE IN COLLECT MODE, YOU MAY  ACCUM-
          ULATE  LINES OF TEXT INTO THIS FILE.  THIS IS THE ONLY
          FILE TO WHICH YOU MAY MAKE  TEXT  MODIFICATIONS.   THE
          MAXIMUM NUMBER OF LINES IN THE ACTIVE FILE IS SOMWHERE
          BETWEEN  5,000  AND 10,000 (DEPENDING ON THE NUMBER OF
          EMBEDDED BLANKS).

   EXTERNAL
          A FILE IS CALLED AN EXTERNAL FILE WHEN IT  IS  STORED
          ON  A  DISK.  WYLBUR HAS COMMANDS WHICH ENABLE YOU TO
          "SAVE" YOUR ACTIVE FILE ONTO A DISK AND "USE" A  COPY
          OF  IT (BRING A COPY OF IT TO YOUR ACTIVE FILE) LATER
          IN THE SESSION OR IN A LATER  SESSION.   ONCE  SAVED,
          THE FILE WILL REMAIN ON DISK UNTIL YOU DELETE IT WITH
          A  "SCRATCH"  COMMAND  IF  YOU  ENTERED  THE  "CATLG"
          OPERAND  ON  THE  "SAVE" COMMAND.  IF THE DATA SET IS
          NOT CATALOGUED IT WILL DISAPPEAR DURING THE FOLLOWING
          MORNINGS BRINGING UP OF THE COMPUTER.  YOU  MAY  ALSO
          RETRIEVE A COPY OF AN EXTERNAL FILE THAT SOMEONE ELSE
          HAS  CREATED,  PROVIDING  YOU  KNOW  HIS/HER  USERID.
          NORMALLY  IT  IS  NOT  REQUIRED TO KNOW THE DISK PACK
          NAME THAT CONTAINS THE EXTERNAL FILE BECAUSE  ONE  OF
          THE  DEFAULTS  AT  SIGNON  TIME IS TO SET "VOL=CATLG"
          WHICH TELLS WYLBUR TO LOOK THROUGH  THE  CATALOG  FOR
          THE  VOLUME ID.  THIS DEFAULT DOES YOU NO GOOD IF THE
          DATA SET IS NOT CATALOGUED AND YOU MUST  TELL  WYLBUR
          THE VOLUME ID IN THIS CASE.

   EXEC (EXECUTE)
          THERE IS ANOTHER TYPE OF ACTIVE FILE CALLED  AN  EXEC
          (EXECUTE) FILE, WHICH IS STORED IN THE SAME WAY AS AN
          ACTIVE  FILE,  BUT  IN ANOTHER PART OF THE COMPUTER'S
          MEMORY.   THIS  FILE  CAN  CONTAIN  DATA  OR   WYLBUR
          COMMANDS.   WHEN IT CONTAINS COMMANDS AND THE FILE IS
          EXECUTED, THE COMMANDS EXECUTE IN THE ORDER IN  WHICH
          THEY  APPEAR IN THE FILE.  WHEN THE EXEC FILE IS USED
          TO HOLD DATA, THE DATA IS NORMALLY JUST  COPIED  FROM
          THE  EXEC  FILE  INTO  THE  ACTIVE  FILE.  THIS IS AN
          EXTREMELY FAST WAY TO DO A  MERGE  OF  TWO  DATASETS.
          THE  MAXIMUM NUMBER OF LINES THAT CAN BE CONTAINED IN
          THE EXEC FILE IS AROUND 150 (DEPENDING ON THE  NUMBER
          OF EMBEDDED BLANKS).
=DSNAMES
)F FUNCTION -
          WYLBUR  DATA  SETS  HAVE,  IN   GENERAL,   THE   FORM:
                   UUUUU.NAME
          WHERE UUUUU IS YOUR USER ID AND NAME IS  ANY  TRAILING
          QUALIFIER.    IT  IS  SELDOM  NECESSARY TO SPECIFY THE
          ENTIRE DSNAME IN COMMANDS SINCE WYLBUR WILL  CONSTRUCT
          ALL  OR PART OF THE NAME FOR YOU.  HOWEVER, THE DSNAME
          OPERAND MAY NEVER BE OMITTED AND IT  MAY  NOT  CONTAIN
          IMBEDDED  BLANKS.   NORMALLY  YOU  MAY SPECIFY "SAVE *
          REPLACE" TO REPLACE THE <EXTERNAL FILE> MOST  RECENTLY
          ACCESSED THROUGH A "USE" COMMAND.

          WYLBUR  MAINTAINS  THREE  VALUES   TO   BE   USED   IN
          CONSTRUCTING  DATA  SET NAMES.  THESE ARE: USERID (NOT
          NECESSARILY THE ID TO WHICH THE USER IS LOGGED ON),  A
          PREFIX  (A DSNAME), AND A PDS MEMBER NAME.  HEREAFTER,
          THESE FIELDS WILL BE REFERRED TO AS THE SAVED  USERID,
          PREFIX, AND SAVED MEMBER FIELDS.

          THE VALUES IN THE THREE FIELDS MAY BE SET INDIVIDUALLY
          BY THE USER WITH THE FOLLOWING COMMANDS:
                   SET USER UUUUU
                   SET PREFIX <PREFIX>
                   SET MEMBER <MEMBER>
          AND THE CURRENT VALUE OF THESE FIELDS MAY BE DISPLAYED
          WITH SIMILAR "SHOW" COMMANDS.  THE SYNTAX OF "SET" AND
          "SHOW" ARE DOCUMENTED  ELSEWHERE.   THE  SAVED  USERID
          FIELD  IS  SET DURING THE LOGON PROCEDURE.  THE PREFIX
          AND MEMBER FIELDS ARE SET WITH THE USE COMMAND.

          THE "USE", "SAVE",  "SCRATCH",  AND  UTILITY  COMMANDS
          ALWAYS  USE  THE  CURRENT  VALUES  OF THE SAVED USERID
          FIELD TO CONSTRUCT A STANDARD WYLBUR DSNAME UNLESS YOU
          OVERRIDE THEM IN THE COMMAND.  YOU MAY TAKE  ADVANTAGE
          OF  THE  PREFIX  FIELD BY SPECIFYING "*" IN THE DSNAME
          OPERAND.  ADDITIONALLY, YOU MAY ADD ON TO THE  CURRENT
          PREFIX  VALUE  BY  SPECIFYING "*.STRING" AS THE DSNAME
          OPERAND.   THIS  WILL  RESULT   IN   ".STRING"   BEING
          CONCATENATED  WITH THE CURRENT PREFIX.  THE PREFIX AND
          MEMBER FIELDS HAVE BEEN SET UP SO  THAT  YOU  NORMALLY
          NEED  TYPE  ONLY "SAVE *" TO SAVE THE <ACTIVE FILE> AS
          THE SAME NAME USED WITH THE USE COMMAND.

          THE  SAVED  MEMBER  FIELD  IS  USED  BY  WYLBUR   WHEN
          ACCESSING  A  PDS UNLESS A MEMBER NAME IS SPECIFIED IN
          THE COMMAND OPERAND.  SPECIFYING (MEMBER) AT  THE  END
          OF  THE  DSNAME  OPERAND  OVERRIDES THE VALUE IN SAVED
          MEMBER.   SPECIFYING  A  MEMBER  NAME  OF   ()   ALONE
          OVERRIDES  SAVED  MEMBER  WITH A NULL VALUE.  THUS, TO
          USE THE CURRENT PREFIX, BUT IGNORE THE  CURRENT  SAVED
          MEMBER, YOU WOULD SPECIFY:

                   COMMAND * ()

          YOU MAY ALWAYS OVERRIDE THE SAVED USERID FIELD IN  THE
          COMMAND  WITHOUT HAVING TO USE THE CURRENT PREFIX.  DO
          THIS BY SPECIFYING THE KEYWORD OPERAND:

                   USER UUUUU

         SOMEWHERE IN THE COMMAND LINE AFTER THE DSNAME OPERAND.

          TO ACCESS A NON-WYLBUR DATA SET,  SPECIFY  THE  ENTIRE
          DSNAME BY ENCLOSING THE NAME IN QUOTES.
                   EXAMPLE:
                                  'DSNAME'

          THE SAVED USERID IS NOT USED FOR CONSTRUCTING  A  DATA
          SET  NAME  ENCLOSED  IN  QUOTES.  THE QUOTED DSNAME IS
          ALSO VALID IN PREFIX.

          THE DSNAME OPERAND ITSELF MAY CONTAIN CERTAIN  SPECIAL
          CHARACTERS  AS  ABBREVIATIONS.  THE SPECIAL CHARACTERS
          USED FOR THIS PURPOSE ARE:

             $DSNAME  USED INSTEAD OF 'DSNAME' UNLESS THE DSNAME
                      CONTAINS DELIMITER CHARACTERS (BLANK, COMMA,
                      =) ;
             #MEMBER  USED INSTEAD OF (MEMBER) ;

          THUS, THE  GENERAL  FORMS  OF  SPECIFYING  THE  DSNAME
          OPERAND IN COMMAND LINES ARE:

                   'UUUUU.XXXX'
                   $UUUUU.XXXX
                   #TEXT
                   $UUUUU.XXXX(MEMBER)

          THE PREFIX AND SAVED MEMBER MAY BE SET  BY  SPECIFYING
          THE   OPTIONAL  COMMAND  OPERAND  SET.   WHEN  SET  IS
          SPECIFIED IN A COMMAND THAT ACCESSES AN EXTERNAL  DATA
          SET,  THE DSNAME IS CONSTRUCTED AND THE ENTIRE COMMAND
          LINE  IS  SCANNED  FOR  SYNTACTICAL  AND   CONFLICTING
          SPECIFICATION  ERRORS.  THEN THE TWO FIELDS ARE SET TO
          THE VALUES CONTAINED IN THE CONSTRUCTED  DSNAME.   THE
          PREFIX FIELD TAKES THE VALUE OF THE PART OF THE DSNAME
          FOLLOWING  THE  USERID  BUT EXCLUDING ANY MEMBER NAME.
          THAT IS, FOR A CONSTRUCTED DSNAME OF:

                   UUUUU.XYZ(A1)

          THE PREFIX FIELD IS SET TO "XYZ" AND THE SAVED  MEMBER
          FIELD BECOMES "A1".  IF THE MEMBER NAME IS NULL (FOR A
          SEQUENTIAL  DATA  SET),  SAVED  MEMBER IS SET TO NULL.
          THE SAVED USERID IS NOT CHANGED  BY  THE  SET  OPTION.
          THIS  FIELD  MAY  ONLY  BE  CHANGED  BY THE "SET USER"
          COMMAND.
=LINE#
)F FUNCTION -

         LINE NUMBERS

          LINE NUMBERS MAY BE EXPRESSED IN  WYLBUR  COMMANDS  IN
          SEVERAL WAYS.  THE SIMPLEST WAY IS BY DEFAULT AS SHOWN
          IN  THE  EXAMPLE BELOW.  THE DEFAULT IS 1 FOR BOTH THE
          DELTA AND THE FIRST LINE NUMBER.

                   COMMAND?  LIST F (CR)

          LINE  NUMBERS  MAY  BE   A   CONSTANT   OR   ARITHMETIC
          EXPRESSION.  THERE ARE ALSO 6 SYMBOLIC LINE NUMBERS FOR
          THE ACTIVE AND EXEC FILES.

         CONSTANT

          THE CONSTANT  MAY  BE  ANY  LINE  NUMBER  OF  THE  FORM
          NNNNN.NNN.  EACH  OF THE FOLLOWING IS AN EXAMPLE OF THE
          SAME LINE NUMBER.

                   00032.000      32.
                      32.000      32

         ARITHMETIC EXPRESSIONS

          YOU  MAY  REFER  TO  A  LINE  NUMBER  WITH  A   SIMPLE
          ARITHMETIC  EXPRESSION  HAVING  A  +  OR  -.  29+3 AND
          100-68 ARE VALID LINE NUMBERS; THEY BOTH REFER TO LINE
          32.  THERE ARE SOME RESTRICTIONS ON EXPRESSING A  LINE
          IN THIS FORM.

         1.  THERE CAN BE NO BLANKS.  30 + 2 IS NOT A VALID
             LINE NUMBER.

         2.  THE RESULTANT NUMBER MUST BE A VALID LINE NUMBER
             BETWEEN 0 AND 99999.999.  30+2 IS A VALID   LINE
             NUMBER WHETHER A FILE HAS A LINE NUMBERED 32  OR
             NOT, BUT 30-32 IS NOT A VALID LINE NUMBER.

         3.  THERE CAN ONLY BE ONE  + OR -. AN EXPRESSION SUCH
             AS 30+4-2 IS NOT ALLOWED.

          IF  YOU  EXPRESS  A  LINE  NUMBER  AS  AN   ARITHMETIC
          EXPRESSION  IN A COMMAND, WYLBUR REPLIES WITH THE LINE
          NUMBER WHICH CORRESPONDS TO IT.

                   COMMAND?  COLLECT 30+2
                      32.    ?

         SYMBOLIC LINE NUMBERS

         THERE ARE SIX POINTERS TO LINES IN THE ACTIVE AND EXEC
         FILES CALLED SYMBOLIC LINE NUMBERS.

                   FIRST          - FIRST LINE IN A FILE
                   LAST           - LAST LINE IN A FILE
                   END            - LAST LINE + DELTA
                   CURRENT OR *   - LAST LINE EDITED
                   PREVIOUS       - LINE BEFORE CURRENT
                   NEXT           - LINE AFTER CURRENT

          CONSIDER A HYPOTHETICAL  FILE  NUMBERED  CONSECUTIVELY
          FROM  1  TO  10  WITH  A  DELTA OF 1.  THE FIRST THREE
          SYMBOLIC LINE NUMBERS ARE:

                   FIRST = 1
                   LAST  = 10
                   END   = 11

          END DOES NOT POINT TO AN EXISTING LINE; IT  POINTS  TO
          THE  LINE  NUMBER  OF THE NEXT LINE TO BE ADDED TO THE
          END OF A FILE.

          THE NEXT THREE SYMBOLIC LINE NUMBERS  (CURRENT,  NEXT,
          AND  PREVIOUS) MAY OR MAY NOT BE SET, DEPENDING ON THE
          ACTIONS YOU HAVE TAKEN.

          THE <CURRENT LINE POINTER> IS A SYMBOLIC  LINE  NUMBER
          WHOSE  VALUE  IS  THE  NUMBER  OF THE LAST LINE EDITED
          (ACTIVE FILE) OR EXECUTED (EXEC FILE).   THE  <CURRENT
          LINE  POINTERS>  FOR THE ACTIVE FILE AND EXEC FILE ARE
          SEPARATE AND DISTINCT.

          THE FOLLOWING COMMANDS  WILL  SET  THE  VALUE  OF  THE
          <CURRENT LINE POINTER>:
                   CHANGE         JUSTIFY
                   COLLECT        MODIFY
                   COPY           MOVE
                   EDIT           POINT
                   SET            SHOW SIZE


          FETCHING A FILE WITH A "USE" COMMAND DOES NOT SET  THE
          POINTER.   NOR  DOES  AN ATTEMPT TO EDIT A VOID RANGE.
          THE SYMBOL (*) OR THE WORD CURRENT BOTH REFER  TO  THE
          <CURRENT  LINE POINTER>.  EITHER SYMBOL MAY BE USED IN
          DESIGNATING A <RANGE> OR A LINE.


          SOMETIMES THE VALUE OF THE <CURRENT LINE POINTER> WILL
          NOT BE SET.  FOR EXAMPLE, IF THERE  IS  NO  ACTIVE  OR
          EXEC  FILE,   THERE  WILL  BE NO CURRENT LINE POINTER.
          TWO OTHER  <SYMBOLIC  LINE  NUMBERS>,  "PREVIOUS"  AND
          "NEXT",  ARE  DEPENDENT  ON "CURRENT" AND SOME OBVIOUS
          RESTRICTIONS APPLY.  FOR INSTANCE, IF THE VALUE OF THE
          <CURRENT LINE POINTER> IS THE LAST  LINE  OF  A  FILE,
          THERE IS NO "NEXT".

          "*" MAY BE USED IN PLACE OF "CURRENT" WHEN USED  IN  A
          RANGE,  BUT  WHEN  USED  IN SPECIFYING A <DSNAME>, "*"
          MEANS THE CURRENTLY SET  PREFIX,  AS  IN  THE  COMMAND
          "SAVE * REPLACE".

          THE VALUE OF "*" IS ASSUMED TO  REFER  TO  THE  ACTIVE
          FILE  EXCEPT  WHEN THE EXEC OPTION IS SPECIFIED IN THE
          COMMAND.  IN THAT CASE, THE EXEC FILE IS ASSUMED.

          THE COMMANDS  "SET  *",  "SHOW  *",  AND  "POINT"  ARE
          ASSOCIATED  WITH THE <CURRENT LINE POINTER> AND MAY BE
          USED TO DISPLAY OR CHANGE THE VALUE OF IT.

          ONCE AGAIN, IF YOU ARE CREATING A  FILE  AND  ENTERING
          LINES, "CURRENT" OR "*" POINTS TO THE LAST LINE NUMBER
          TYPED  BY  WYLBUR.   BUT  IF  YOU HAVE JUST FETCHED AN
          EXTERNAL FILE, THE CURRENT LINE IS NOT SET.   PREVIOUS
          AND  NEXT  ARE  ENTIRELY  DEPENDENT  ON  CURRENT.  FOR
          INSTANCE, IF YOU HAVE JUST  TYPED  LINE  10  INTO  THE
          HYPOTHETICAL  FILE,  CURRENT=11=END,  PREVIOUS=10, AND
          NEXT=12.

         REFERRING TO LINE NUMBERS

          VERY OFTEN IT IS HANDIER TO REFER TO A LINE NUMBER  BY
          ITS  SYMBOLIC  POINTER  RATHER THAN ITS ACTUAL NUMBER.
          THIS FEATURE CAN BE EXTENDED BY  USING  SYMBOLIC  LINE
          NUMBERS IN ARITHMETIC EXPRESSIONS TO REFER TO ONE LINE
          OR A RANGE OF LINES.

                   INSERT FIRST-.1
                   LIST */LAST
                   DELETE *, *+4, *+6
=STRINGS
)F FUNCTION -
          WITHIN  WYLBUR,   STRINGS   OF   CHARACTERS   MAY   BE
          REPRESENTED  BY  ENCLOSING THE STRINGS IN QUOTE MARKS.
          THE QUOTES MAY BE EITHER SINGLE (') OR DOUBLE("),  BUT
          NOT A MIXED COMBINATION OF THE TWO FORMS.

                   EXAMPLE:
                           'THIS' OR "THIS" BUT NOT 'THIS"
=KEYS
)F FUNCTION -
         SHIFT KEY

          THERE IS A DISTINCTION  BETWEEN  THE  EFFECT  OF  THE
          SHIFT  KEY AT THE TERMINAL AND ITS EFFECT ON A WYLBUR
          TEXT.  THE  SHIFT  KEY  OPERATES  JUST  AS   ON   ANY
          TYPEWRITER  AS FAR AS THE TERMINAL COPY IS CONCERNED,
          BUT ITS EFFECT ON THE  WYLBUR  TEXT  DEPENDS  ON  THE
          WYLBUR  MODE  AND ON THE COMMAND "SET UPLOW" AND "SET
          UPPER".  THE USE OF THIS KEY  HAS  NO  EFFECT  DURING
          COMMAND  MODE  AND ALL ALPHA CHARACTERS ARE CONVERTED
          TO UPPER CASE.  IN COLLECT MODE, IT IS TREATED IN TWO
          WAYS.

         1. "UPLOW" TERMINALS
          IF YOU HAVE USED THE COMMAND "SET UPLOW", WYLBUR WILL
          ACCEPT UPPER AND LOWER CASE LETTERS.  IF YOU HAVE NOT
          USED THIS COMMAND, ALL ALPHABETIC CHARACTERS ARE CON-
          VERTED TO UPPER CASE.  UPPER CASE IS THE  DEFAULT  SO
          IT  IS  NECESSARY  TO DO A "SET UPLOW" IF YOU WISH TO
          HAVE  LOWER  CASE  LETTERS  AS  PART  OF  YOUR  TEXT.
          (REMINDER:  ALL JCL MUST BE IN UPPER CASE ONLY.)

         2. "UPPER-CASE" TERMINALS
          ON "UPPER-CASE" ONLY TERMINALS, ALTHOUGH "SET  UPLOW"
          IS ACCEPTED AS A COMMAND, THE USE OF THE SHIFT KEY IS
          NOT AT ALL THE SAME, EXCEPT WHEN USED FOR UPPER- CASE
          SPECIAL  CHARACTERS,  SUCH  AS  '#',  '<',  '>', ETC.
          OTHERWISE THERE  IS  NO  CORRESPONDENCE  BETWEEN  THE
          SHIFTED  LETTER  YOU TYPE AND THE CHARACTER DISPLAYED
          ON THE SCREEN AND UNDERSTOOD BY WYLBUR.
=RANGES
)F FUNCTION -

         SPECIFYING RANGES

          VARIOUS COMMANDS USE RANGE  OPTIONS.   THESE  COMMANDS
          MUST  ALL  REFER  TO  AN EXPLICIT RANGE, BUT IT MAY BE
          IMPLIED BY THE DEFAULT  RANGE  ALL  IN  THE  FOLLOWING
          COMMANDS.  HOWEVER IN ALL OF THESE, YOU MAY SPECIFY AN
          EXPLICIT RANGE TO OVERRIDE THE DEFAULT.

                   CHANGE         LOAD           COPY
                   MODIFY         REPLACE        EDIT
                   NUMBER         RUN            LIST
                   POINT

          IN THE  "MOVE",  "DELETE",  "CENTER",  "JUSTIFY",  AND
          "ALIGN" COMMANDS YOU MUST SPECIFY AN EXPLICIT RANGE.

         EXPLICIT RANGE

          AN  EXPLICIT  RANGE  IS  A  LINE  OR  GROUP  OF  LINES
          IDENTIFIED BY ITS LINE NUMBERS.  THIS TYPE OF RANGE IS
          DENOTED IN WYLBUR BY GIVING THE NUMBERS OF  THE  FIRST
          AND LAST LINES SEPARATED BY A SLASH.

         COMMAND?  LIST 1/10 (CR)

          THE RANGE IN THE COMMAND ABOVE INCLUDES ALL LINES FROM
          1.000 TO 10.000.  A SINGLE LINE IS REFERRED TO BY  ITS
          NUMBER ALONE.

         COMMAND?  REPLACE 79.3 (CR)

          THROUGH THE USE OF DISJOINT EXPLICIT RANGES, THE  USER
          CAN  SPECIFY  UP  TO  ELEVEN DIFFERENT LINE NUMBERS OR
          RANGES IN ONE COMMAND.  THE LIST  CAN  CONTAIN  SINGLE
          LINES  OR  GROUPS,  AND  RANGES  CAN OVERLAP, BUT EACH
          GROUP COUNTS AS TWO OF THE NUMBERS ALLOWED.

         COMMAND?  LIST 1,7,4,3.6,6/10,5 (CR)

          THIS COMMAND WILL LIST LINE 1 FOLLOWED BY LINE 7, THEN
          LINE 4, LINE 3.6, LINES 6 THROUGH  10  INCLUSIVE,  AND
          THEN  LINE  5.   IN  THIS EXAMPLE, SEVEN OF THE ELEVEN
          RANGES ALLOWED ARE USED.


         EXPLICIT RANGE -- COUNT FIELD

          ANOTHER WAY OF DENOTING AN EXPLICIT RANGE OF LINES  IS
          BY  USING  THE  FIRST  LINE NUMBER FOLLOWED BY A COUNT
          FIELD IN PARENTHESES.  THE COUNT MUST  BE  A  POSITIVE
          INTEGER.

         COMMAND?  L 22(6) (CR)

          THIS COMMAND WOULD LIST SIX LINES STARTING AT LINE 22.
          IT IS NOT NECESSARILY THE SAME RANGE AS  22/27  UNLESS
          THE NEXT 6 LINES ARE NUMBERED 22, 23, 24, 25, 26 & 27.
          LIST  22(6)  MIGHT PRODUCE A LIST OF LINES 22, 39, 43,
          62, 89 & 101 IF THOSE WERE THE NEXT SIX LINES  IN  THE
          FILE.

          FIRST (F) AND LAST (L) CAN ALSO BE USED  TO  DEFINE  A
          RANGE:

         FIRST/LAST OR F/L OR ALL
         1.05/LAST OR 1.05/L
         FIRST/10.0 OR F/10.0

          AS IS SEEN IN THIS EXAMPLE, THE WORD ALL HAS THE  SAME
          MEANING AS FIRST/LAST.


         EXPLICIT RANGE -- SYMBOLIC LINE NUMBERS

          SYMBOLIC LINE NUMBERS, SUCH AS "CURRENT",  "PREVIOUS",
          AND  "NEXT",  CAN  BE  USED  TO  DEFINE A RANGE IF THE
          CURRENT LINE HAS BEEN SET.   FOR  AN  EXPLANATION  AND
          LIST  OF  ALL  VALID  SYMBOLIC LINE NUMBERS, SEE   THE
          ENTRY FOR "LINE#".



         ASSOCIATIVE RANGE

          AN ASSOCIATIVE RANGE SPECIFIES  A  LINE  OR  GROUP  OF
          LINES  EACH  OF  WHICH  CONTAINS  A  CERTAIN SERIES OF
          CHARACTERS.   THIS  TYPE  OF  RANGE  IS  SPECIFIED  BY
          ENCLOSING THE CHARACTER STRING WITHIN QUOTE MARKS  AND
          INDICATING WHICH LINES SHOULD BE SEARCHED BY GIVING AN
          EXPLICIT RANGE.  IF THE COMMAND HAS A DEFAULT RANGE OF
          ALL,  ONLY  THE  ASSOCIATIVE  RANGE  NEED BE SPECIFIED
          UNLESS YOU WISH TO OVERRIDE THAT DEFAULT.

         USE OF QUOTES

          A TERMINAL KEYBOARD HAS TWO TYPES OF  QUOTE  MARKS,  A
          SINGLE  QUOTE  (')  AND A DOUBLE QUOTE (").  EITHER OF
          THESE MAY BE USED TO ENCLOSE THE CHARACTER STRING, BUT
          CONSISTENCY MUST BE MAINTAINED.  THUS,  THE  FOLLOWING
          ARE VALID ASSOCIATIVE RANGES.

         "VARIABLE" IN ALL
         'X*(15 A * B**2)' IN 1/10

         THE FOLLOWING EXAMPLE, HOWEVER, IS NOT VALID.

         "VARIABLE'

         ALSO NOTE THAT BLANKS ARE SIGNIFICANT IN AN ASSOCIATIVE
         RANGE SPECIFICATION, SO THAT,

         " BLANKS ARE PART OF THE STRING " IN 5/15

                   AND

         "BLANKS ARE PART OF THE STRING" IN 5/15

         ARE NOT EQUIVALENT RANGE SPECIFICATIONS.

          IF A QUOTE MARK APPEARS IN THE CHARACTER  STRING,  YOU
          MUST  FOLLOW  SOME ADDITIONAL RULES.  IT IS EASIEST TO
          ENCLOSE THE CHARACTER STRING IN  QUOTES  OF  THE  TYPE
          OPPOSITE  OF  THOSE  APPEARING  WITHIN  THE  CHARACTER
          STRING.   IF  THE  SAME TYPE OF QUOTES MUST BE USED TO
          ENCLOSE THE  STRING,  TYPE  THOSE  QUOTE  MARKS  WHICH
          APPEAR  IN  THE  CHARACTER  STRING  AS TWO CONSECUTIVE
          INSTANCES OF THE QUOTE MARK.  FOR EXAMPLE:

          "DON'T" IN ALL AND 'DON''T' IN ALL

          ARE BOTH VALID WAYS TO DESIGNATE THE  RANGE  OF  LINES
          WHICH CONTAIN THE CHARACTER STRING:   DON'T.

          ANOTHER  QUALIFIER  THAT  MAY  BE  ADDED  IS  THE  NOT
          CHARACTER (¬).  THIS IS OPTIONAL AND, IF USED, DEFINES
          A RANGE THAT CONSISTS OF ALL LINES  IN  THE  <EXPLICIT
          RANGE> THAT DO NOT CONTAIN THE <STRING>.  EXAMPLE:
                   L ¬'HERE' M/N IN 1/10
          THE M/N PARAMETER CAN BE USED TO RESTRICT THE RANGE TO
          A SPECIFIC SUBSET OF LINES, NAMELY, THOSE LINES (AS IN
          THE ABOVE EXAMPLE) IN THE SET OF ALL  LINES  SPECIFIED
          THAT  DO  NOT  CONTAIN  'HERE'  IN  A  GIVEN COLUMN OR
          COLUMNS  (M/N CAN ALSO BE "M" ONLY, WHERE "M"  IS  THE
          STARTING POSITION).  ANOTHER LEVEL OF SPECIFICATION OF
          SEARCH CAN BE GIVEN, WHEREBY YOU RESTRICT NOT ONLY THE
          COLUMN POSITIONS BUT ALSO THE ORDINAL POSITIONS IN THE
          SET OF ALL LINES SPECIFIED.  FOR EXAMPLE:
                   L ¬'HERE' 5 (3/7) IN 1/10
          WOULD MEAN "LIST THE THIRD THRU THE SEVENTH OCCURANCES
          THAT DO NOT CONTAIN THE WORD 'HERE' STARTING IN COLUMN
          5 IN THE RANGE OF LINES FROM 1  THRU  10."  THE  (3/7)
          PARAMETER  MAY  ALSO  BE  EXPRESSED AS A SINGLE NUMBER
          SUCH AS (3).
=DELTA
)F FUNCTION -

          DELTA IS  THE  INCREMENT  WHICH  WYLBUR  ADDS  TO  THE
          PRESENT  LINE  NUMBER TO GET THE NEXT ONE.  IT IS ALSO
          USED AS A STARTING LINE NUMBER FOR A  FILE.   YOU  MAY
          SET  A  VALUE FOR DELTA AT ANY NUMBER BETWEEN .001 AND
          99999.999 INCLUSIVE.  IF YOU DO NOT SET  DELTA,  1.000
          IS USED AS THE DEFAULT.  THE LINE NUMBER INCREMENT CAN
          BE  SET  TO  A VALUE OTHER THAN 1.000 IN SEVERAL WAYS.
          YOU MAY SET IT  TEMPORARILY  AT  THE  TIME  YOU  ENTER
          COLLECT  MODE, OR YOU MAY RESET THE DEFAULT DELTA WITH
          THE "SET DELTA" COMMAND.

=EDITING
)F FUNCTION -

         CREATING A FILE

          IN ORDER TO CREATE A FILE YOU MUST ENTER  THE  COLLECT
          MODE.  YOU MAY ENTER COLLECT MODE BY STRIKING THE ATTN
          KEY  OR  BY USING THE "COLLECT" COMMAND.  THE TERMINAL
          IS IN COLLECT MODE WHEN IT IS PREPARED  TO  ACCUMULATE
          LINES  OF TEXT TYPED AT THE TERMINAL AND STORE THEM IN
          THE ACTIVE AREA OF THE COMPUTER'S MEMORY.  BEFORE  YOU
          ENTER  COLLECT  MODE,  YOU  MAY WANT TO ADJUST CERTAIN
          PARAMETERS FOR THE DURATION OF THE WYLBUR SESSION SUCH
          AS TAB SETTINGS OR LINE LENGTH.  YOU MAY  DO  THIS  BY
          USING THE "SET" COMMAND WITH APPROPRIATE OPTIONS.  THE
          AVAILABLE OPTIONS ARE LISTED UNDER THE "SET" COMMAND.

         GLOBAL PARAMETERS

          GLOBAL PARAMETERS ARE FEATURES IN WYLBUR WHICH MAY  BE
          SET  TO  AN  APPROPRIATE  VALUE AND WILL REMAIN SET AT
          THAT VALUE FOR THE DURATION OF THE  SESSION  OR  UNTIL
          RESET.    TWO  COMMANDS  ARE  ASSOCIATED  WITH  GLOBAL
          PARAMETERS: "SET" AND "SHOW".  GLOBAL  PARAMETERS  ARE
          CHANGED  BY  A "SET" COMMAND.  THE SHOW COMMAND MAY BE
          USED (IN MOST CASES) TO SEE  WHICH  GLOBAL  PARAMETERS
          ARE  IN  EFFECT.   SOME  PARAMETERS  DESCRIBED IN THIS
          SECTION ARE ASSOCIATED WITH THE "SHOW" COMMAND BUT MAY
          NOT BE SET BY THE USER.   FOR  ALL  AVAILABLE  OPTIONS
          ENTER "H SET" OR "H SHOW".

         CASE

          CASE IS DETERMINED BY THE SHIFT KEY JUST AS IT  IS  ON
          ANY ORDINARY TYPEWRITER.  HOWEVER, UNLESS YOU GIVE THE
          COMMAND  "SET UPLOW" (SET UPPER AND LOWER CASE) BEFORE
          STARTING IN COLLECT MODE, THE FILE WILL BE STORED  AND
          LISTED  ONLY  IN  UPPER  CASE  NO  MATTER  WHICH  CASE
          CHARACTERS  YOU  TYPE.  IF UPLOW IS IN EFFECT, YOU MAY
          REVERT TO HAVING ALL ALPHABETIC  CHARACTERS  IN  UPPER
          CASE  BY  GIVING THE "SET UPPER" COMMAND.  THE COMMAND
          "SHOW CASE" CAN BE USED TO FIND OUT WHETHER  UPPER  OR
          UPLOW IS CURRENTLY IN EFFECT.

         EDITING AN ACTIVE FILE

          WYLBUR IS A POWERFUL TEXT  EDITOR  WITH  A  NUMBER  OF
          COMMANDS WHICH MAY BE USED TO CHANGE PART OF AN ACTIVE
          FILE.   WITH  THESE  YOU  MAY  CHANGE OR DELETE SINGLE
          CHARACTERS, GROUPS OF CHARACTERS, ENTIRE LINES OR EVEN
          GROUPS OF LINES.  THE EDITING COMMANDS  EITHER  AFFECT
          AN  ENTIRE  LINE OR PART OF A LINE.  THE COMMANDS THAT
          AFFECT A WHOLE LINE ARE:

                   DELETE         COPY           ALIGN
                   INSERT         MOVE           JUSTIFY
                   REPLACE        CENTER

         COMMAND THAT AFFECT PART OF A LINE ARE:

                   CHANGE         EDIT           MODIFY

          ALL OF THESE COMMANDS MAY BE CONFINED TO ONE  LINE  OR
          MAY  TREAT  AN  ENTIRE  FILE.  THE "MODIFY" COMMAND IS
          USED TO INSERT, BLANK, DELETE, OR REPLACE PARTS  OF  A
          SINGLE  LINE.   THE  "EDIT" COMMAND IS USED TO REPLACE
          PARTS OF A SINGLE  LINE.   THE  "CHANGE"  COMMAND  CAN
          EFFECT   CHANGES   EITHER  WITHIN  A  SINGLE  LINE  OR
          THROUGHOUT A GROUP OF LINES.  BEFORE EDITING  A  FILE,
          YOU  NEED TO KNOW HOW LINE NUMBERS MAY BE SPECIFIED IN
          WYLBUR AND THE VARIOUS WAYS THERE ARE TO  REFER  TO  A
          RANGE  OF  LINES.  THESE ARE NECESSARY IN ORDER TO USE
          THE EDITING  COMMANDS  EFFICIENTLY.   TO  LEARN  ABOUT
          SPECIFYING  RANGES  OF  LINES SEE THE SECTION ON
          "RANGES".


          *** FOR HINTS ON SHORT  CUT  METHODS  FOR  USE  DURING
          ENTRY OF DATA.......SEE THE ENTRY "EDHINTS" *****
=EDHINTS
)F FUNCTION -

         MAKING A SKELETON FOR A UTILITY JOB OR FORM LETTER.

          THE "CHANGE" COMMAND CAN BE USED  TO  INSERT  A  NAME,
          LOCATION,  ETC.,  AT  PREDETERMINED  PLACES IN A FILE.
          FOR EXAMPLE, IF "==" IS PUT IN EACH PLACE IN THE  DATA
          WHERE THE CHANGING INFORMATION IS TO GO, THE FOLLOWING
          COMMAND  CAN  BE USED TO PRODUCE A JOB STREAM READY TO
          RUN WITH FAR LESS CHANCE FOR ERRORS.

                   COMMAND?  CH "==" TO "UUUUU.MY.DS" IN ALL NOL(CR)

          IF, INSTEAD OF A JOB STREAM, THIS WERE  A  LETTER  THE
          COMMAND TO PERSONALIZE THE FORM LETTER WOULD BE:

                   COMMAND?  CH "==" TO "MR. BOB JONES" IN ALL NOL(CR)

          IF YOU ARE ON A HARD COPY TERMINAL AND WANT A  LISTING
          OF  THE  FORM  LETTER,  USE  THE FOLLOWING METHOD.  IN
          ORDER TO PRODUCE A CLEAN COPY OF THE LETTER,  PLACE  A
          MARKER CHARACTER AT THE END OF EACH PAGE,  CALL FOR AN
          "UNNUMBERED"  LISTING,  AND  CHANGE  THE  PAPER BEFORE
          STRIKING  CARRIAGE  RETURN.   IN  THIS   EXAMPLE   THE
          CHARACTER '<' IS USED FOR A MARKER.

                   COMMAND?  L UNN MARKER=< CLEAN(CR)

          THE MARKER WILL NOT BE LISTED AND WYLBUR WILL STOP AND
          WAIT FOR A (CR) EVERY TIME HE ENCOUNTERS THE SPECIFIED
          CHARACTER APPEARING IN COLUMN 1.   THIS  GIVES  YOU  A
          CHANCE TO CHANGE TO A NEW SHEET OF PAPER.

         DUPLICATING LINES

          THE "COPY" COMMAND CAN BE  USED  TO  DUPLICATE  SINGLE
          LINES  OR  GROUPS  OF  LINES IF THE RANGE BEING COPIED
          INTO IS  CONTAINED  WITHIN  THE  RANGE  BEING  COPIED.
          STARTING WITH THE SAMPLE FILE:

         1.   THIS IS THE LINE TO BE COPIED.

         ISSUING THE COMMAND:

         COMMAND? COPY 1 (3) TO 2

         WILL PRODUCE THE FOLLOWING RESULT:

         1.   THIS IS THE LINE TO BE COPIED.
         2.   THIS IS THE LINE TO BE COPIED.
         3.   THIS IS THE LINE TO BE COPIED.
         4.   THIS IS THE LINE TO BE COPIED.


         USING PRINTER CONTROL CHARACTERS

          CERTAIN  SYMBOLS  ARE  RECOGNIZED  BY  THE  SYSTEM  AS
          PRINTER CONTROL CHARACTERS IF  THEY  OCCUR  IN  COLUMN
          ONE.   THEY  CONTROL  LINE-SPACING  AND  PAGE  EJECTS.
          NORMALLY,  IF  THE  CORRECT  PRINT  COMMAND  IS  USED,
          ANYTHING  IN COLUMN 1 WILL BE ASSUMED TO BE A CARRIAGE
          CONTROL CHARACTER, AND COLUMN 1 WILL NOT BE PRINTED IN
          THE LISTING.   SOME  OF  THE  COMMON  PRINTER  CONTROL
          CHARACTERS AND THEIR FUNCTIONS ARE:

              BLANK  SINGLE SPACE - SKIP TO NEXT LINE
                1    PAGE EJECT - SKIP TO TOP OF NEXT PAGE
                0    DOUBLE SPACE - SKIP TO NEXT LINE + 1
                -    TRIPLE SPACE - SKIP TO NEXT LINE + 2
                +    NO SKIP - USED FOR UNDERLING


         PAGE BOUNDARIES

          WYLBUR WILL GIVE YOU THE ASSEMBLED DEFAULT  NUMBER  OF
          LINES PER PAGE (NORMALLY 60) DEPENDING ON WHICH "PRINT"
          COMMAND YOU USE.  IF YOU WANT FEWER LINES
          ON  A  PAGE  OR  IF  YOU WANT A NEW PAGE TO START AT A
          CERTAIN  PLACE,  SUCH  AS  AT  THE  BEGINNING   OF   A
          PARAGRAPH,  YOU MUST HAVE A 1 IN COLUMN 1 OF THE FIRST
          LINE OF EACH PAGE.  EVERY OTHER LINE MUST ALSO HAVE  A
          CONTROL   CHARACTER,    PERHAPS  A  BLANK  FOR  SINGLE
          SPACING, IN COLUMN  1.   RATHER  THAN  SPACE  OVER  TO
          COLUMN  2  WHEN  TYPING  EACH LINE, YOU CAN INSERT THE
          NEEDED BLANKS THIS WAY:


                   COMMAND?  CH 1 TO ' ' IN ¬'1' 1 NOL(CR)

          THIS COMMAND INSERTS A BLANK IN COLUMN 1 OF EVERY LINE
          THAT DOES NOT HAVE A 1 (¬'1') IN COLUMN 1.  THE  BLANK
          IS  ACTUALLY  INSERTED  AND THE TEXT IS MOVED OVER ONE
          COLUMN RATHER THAN REPLACING COLUMN 1  WITH  A  BLANK.
          THE  BLANKS  WILL  PRODUCE  SINGLE SPACED LINES IN THE
          PRINTED COPY.

          YOU MIGHT WANT A COMBINATION OF SPACING SUCH AS SINGLE
          SPACED TEXT AND TRIPLE SPACES BETWEEN PARAGRAPHS.   TO
          GET  THIS,  INSERT A 1 IN COLUMN 1 WHEREVER YOU WANT A
          NEW PAGE; INSERT A - IN COLUMN 1 WHEREVER YOU START  A
          NEW PARAGRAPH.  THEN ISSUE THE FOLLOWING COMMANDS:

                   COMMAND?  CH 1 TO ' ' IN ALL NOL(CR)
                   COMMAND?  CH ' 1' TO '1' IN ALL NOL(CR)
                   COMMAND?  CH ' -' TO '-' IN ALL NOL(CR)

          THE FIRST COMMAND INSERTS A BLANK IN COLUMN 1 OF EVERY
          LINE.  THUS ALL LINES WHICH HAD A 1 IN  COLUMN  1  NOW
          HAVE  A  BLANK AND A 1 IN COLUMNS 1 AND 2.  THE SECOND
          COMMAND CHANGES EACH LINE WITH A  BLANK  AND  A  1  IN
          COLUMNS  1 AND 2 TO A 1 IN COLUMN1 (DELETING THE SPACE
          IN COLUMN 1).  THE THIRD COMMAND DOES A SIMILAR SWITCH
          FOR LINES WITH A BLANK AND A - IN COLUMNS 1 AND 2.


         UNDERLINING

         TO DO UNDERLINING WITH PRINTER CONTROL CHARACTERS TAKES
         TWO LINES FOR EACH LINE THAT HAS UNDERLINED TEXT IN IT.

                   THIS IS AN EXAMPLE OF UNDERLINING
                  +           _______

          THE "+" IN COLUMN 1 OF THE SECOND LINE  MEANS  NOT  TO
          SKIP  A  LINE  SO IT OVERPRINTS AND PRODUCES A LINE IN
          WHICH THE WORD EXAMPLE IS UNDERLINED.   YOU  CAN  ALSO
          USE  THIS  TECHNIQUE  TO  GET  "BOLD-FACED"  PRINT  BY
          RETYPING  THE  WORD  TO  BE  "BOLD-FACED"  INSTEAD  OF
          THE "UNDERLINING" MARKS.

         HOW TO INSERT PAGE NUMBERS

          YOU MAY INSERT LINES CONTAINING A 1 IN COLUMN 1 AND  A
          PAGE NUMBER NEAR THE RIGHT MARGIN THROUGHOUT THE TEXT.
          OR, YOU MAY INSERT LINES CONTAINING ONLY A 1 IN COLUMN
          1  WHEREVER  YOU WANT A NEW PAGE.  THEN YOU MAY INSERT
          PAGE NUMBERS THIS WAY:

            COMMAND?  CH 68 TO 'PAGE' IN '1' 1 NOL(CR)
            COMMAND?  CH 73 TO 1+1 IN '1' 1 NOL(CR)

          THE FIRST COMMAND WILL  INSERT  THE  CHARACTER  STRING
          'PAGE' INTO COLUMNS 68/71 OF EVERY LINE WHICH CONTAINS
          A  '1'  IN COLUMN 1.  THE SECOND COMMAND WILL INSERT A
          '1' IN COLUMN 73 OF THE FIRST LINE  WHICH  CONTAINS  A
          '1' IN COLUMN 1.  THE REPLACEMENT VALUE IS INCREMENTED
          BY  ONE SO THAT WYLBUR WILL INSERT A '2' IN THE SECOND
          LINE WHICH CONTAINS A '1'  IN  COLUMN  1  AND  SO  ON.
          NOTICE  THAT  PAGE  NUMBER 10 WOULD OCCUPPY COLUMNS 73
          AND 74.  PAGE NUMBER 100 WOULD BE  PLACED  IN  COLUMNS
          73,  74,  AND  75.  THEREFORE, IF YOU WERE RENUMBERING
          THE PAGES OF AN ALREADY EXISTING FILE, YOU  WOULD  USE
          THE FOLLOWING COMMAND:

             COMMAND?  CH 73/75 TO 1+1 IN '1' 1 NOL(CR)

          AN ALTERNATE WAY OF EXPRESSING  (1+1)  IS  (1 1)   AND
          ACCOMPLISHES THE SAME THING.

         CREATING COLUMNS OF INFORMATION

          THE "USING" PARAMETER ON THE "CHANGE" COMMAND IS  VERY
          USEFUL  FOR CREATING TABLES OR COLUMNS OF INFORMATION.
          LET US ASSUME THAT THE  FOLLOWING  LINES  EXIST  IN  A
          FILE:

            1.   ABC
            2.   DEF
            3.   $1160
            4.   $ 620

            COMMAND?  CH 30 IN 1/2 USING 3/4 NOL(CR)
            COMMAND?  DEL 3/4(CR)
            COMMAND?  LIST(CR)

            1.   ABC                           $1160
            2.   DEF                           $ 620

          YOU MAY SUBSEQUENTLY MAKE MODIFICATIONS TO  THE  FIRST
          29  COLUMNS  WITHOUT  MOVING OR DESTROYING THE COLUMNS
          FROM 30 ON BY USING THE FILL COLUMN PARAMETER  OF  THE
          "CHANGE" COMMAND:

            COMMAND?  CH 'ABC' //30 TO 'JONES' IN ALL NOL(CR)
            COMMAND?  CH 'DEF' //30 TO 'SAMPSON' IN ALL NOL(CR)
            COMMAND?  LIST(CR)
            1.   JONES                         $1160
            2.   SAMPSON                       $ 620

         MERGING LINES OF DATA

          IT MAY BECOME NECESSARY AT SOME TIME TO MERGE LINES OF
          DATA OR CREATE TWO LINES THAT CONTAIN THE  SAME  DATA.
          IN  THE  FOLLOWING  EXAMPLE, WE ARE CREATING TWO LINES
          (ONE RIGHT AFTER THE OTHER).  THE SAME METHOD  MAY  BE
          USED FOR MERGING.

            COMMAND?  LIST(CR)
            1.   AAAAA
            2.   BBBBB
            3.   CCCCC
            COMMAND?  COPY F/L TO END(CR)
            6. LAST LINE
            COMMAND?  CH 1 TO '$$' IN 4/L NOL(CR)
            COMMAND?  COPY 4/L TO .5 BY 1 MERGE(CR)
            COMMAND?  LIST(CR)
             .5  $$AAAAA
            1.   AAAAA
            1.5  $$BBBBB
            2.   BBBBB
            2.5  $$CCCCC
            3.   CCCCC

          NORMALLY, YOU WOULD WANT TO DO SOMETHING DIFFERENT  TO
          THE  SECOND  OCCURRENCE  OF  THE  DATA  AND THAT IS THE
          REASON FOR PUTTING THE UNIQUE IDENTIFIER "$$"  IN  THE
          COPIED  LINES.   WHILE  THIS  APPEARS  TO  BE A LOT OF
          TROUBLE WITH THE SMALL AMOUNT OF DATA SHOWN, THE  TIME
          SAVINGS  CAN  BE  CONSIDERABLE IF YOU ARE USING A FILE
          WITH LINES CONTAINING 60 COLUMNS OF DATA AND THE  FILE
          IS 400 LINES IN LENGTH.
=MOVESAMP
    THE MOVE COMMAND

          TO COPY A RANGE OF LINES AND DELETE THE  OLD  COPY  OF
          THE  LINES,  USE  THE  COMMAND  MOVE.   THIS FUNCTIONS
          EXACTLY  AS  THE  COPY  COMMAND  WITH  THE   FOLLOWING
          EXCEPTIONS:

          THE OLD LINES WHICH WERE COPIED ARE DELETED.

          IT IS NOT POSSIBLE TO  APPLY  THE  MOVE  COMMAND  TO  AN
          EXTERNAL  FILE.


          FOLLOWING ARE SOME EXAMPLES OF  THE  MOVE  COMMAND  AS
          APPLIED  TO THE SAMPLE FILE USED IN THE EXPLANATION OF
          THE COPY COMMAND.

       A. MOVE AN EXPLICIT RANGE OF LINES

          RANGE MUST BE THE FIRST PARAMETER.

          COMMAND? MOVE 6/7 TO 2.03 BY .001 (CR)
            2.031 - LAST LINE.
          COMMAND? LIST (CR)
            1.     THIS IS A DUMMY FILE WHICH WILL BE USED
            2.     TO SHOW THE EFFECT OF VARIOUS COPY COMMANDS.
            2.03   DDDDDDD
            2.031  EEE
            3.     AAAA
            4.     BBBBBB
            5.     CCCCC
          COMMAND?

       B. MOVE AN ASSOCIATIVE RANGE OF LINES

          COMMAND? MOVE 'FILE' IN 1/7 TO 33 (CR)
          COMMAND? LIST (CR)
            2.     TO SHOW THE EFFECT OF VARIOUS COPY COMMANDS.
            3.     AAAA
            4.     BBBBBB
            5.     CCCCC
            6.     DDDDDDD
            7.     EEE
           33.     THIS IS A DUMMY FILE WHICH WILL BE USED
          COMMAND?

          YOU MAY SPECIFY THE SPECIAL LINE  NUMBER  END  FOLLOWING
          THE  TO.   END  IS  ONE  DELTA INCREMENT HIGHER THAN THE
          CURRENT LAST OF THE ACTIVE FILE.

       C. MERGE

          THE MERGE OPTION WORKS JUST AS FOR COPY EXCEPT THAT  THE
          MOVED  LINES  WILL BE ERASED FROM THEIR OLD POSITION AND
          YOU MAY NOT MOVE FROM AN EXTERNAL FILE.


=COPYSAMP


    1. COPY

          WYLBUR WILL COPY ONE OR MORE LINES INTO A  SECTION  OF
          THE  ACTIVE  FILE.   THE  LINES  COPIED  MAY BE IN THE
          ACTIVE FILE OR IN AN EXTERNAL FILE.  THE LINES  COPIED
          ARE NOT ERASED FROM THEIR OLD POSITION.  THE NEW LINES
          ARE  RENUMBERED ACCORDING TO THE IMPLICIT DELTA UNLESS
          YOU SPECIFY AN OVERRIDING DELTA IN THE  COPY  COMMAND.
          ALSO  NOTE  THAT  LINES  ALREADY IN THE FILE CANNOT BE
          OVERWRITTEN BY USE OF THE COPY COMMAND.  THE FOLLOWING
          FILE WILL BE USED TO SHOW THE EFFECT OF  VARIOUS  COPY
          COMMANDS.

       1.     THIS IS A DUMMY FILE WHICH WILL BE USED
       2.     TO SHOW THE EFFECT OF VARIOUS COPY COMMANDS.
       3.     AAAA
       4.     BBBBBB
       5.     CCCCC
       6.     DDDDDDD
       7.     EEE

          IN THE EXAMPLES, ASSUME  THAT  EACH  COPY  COMMAND  IS
          GIVEN  WHEN  THE  FILE IS IN THE UNMODIFIED FORM GIVEN
          ABOVE.

       COMMAND? COPY (CR)
          14.  -  LAST LINE
       COMMAND? LIST (CR)
          1.     THIS IS A DUMMY FILE WHICH WILL BE USED
          2.     TO SHOW THE EFFECT OF VARIOUS COPY COMMANDS.
          3.     AAAA
          4.     BBBBBB
          5.     CCCCC
          6.     DDDDDDD
          7.     EEE
          8.     THIS IS A DUMMY FILE WHICH WILL BE USED
          9.     TO SHOW THE EFFECT OF VARIOUS COPY COMMANDS.
         10.     AAAA
         11.     BBBBBB
         12.     CCCCC
         13.     DDDDDDD
         14.     EEE

          THIS IS THE SIMPLIST FORM OF  THE  COPY  COMMAND.   IT
          WILL  COPY  ALL  OF THE ACTIVE FILE TO THE LINE NUMBER
          THAT IS REFERENCED BY THE SYMBOLIC LINE NUMBER END.


       A. COPY AN EXPLICIT RANGE

          IF YOU COPY A RANGE OF LINES RATHER THAN A  WHOLE  FILE,
          RANGE  MUST  BE  THE  FIRST PARAMETER.  IF YOU SPECIFY A
          LINE TO COPY TO, IT MUST BE A NON-EXISTING LINE.  IN THE
          FOLLOWING COMMAND, LINE 6.5 IS USED TO COPY TO.

          COMMAND? COPY 5 TO 6.5 (CR)
          COMMAND? LIST (CR)
            1.     THIS IS A DUMMY FILE WHICH WILL BE USED
            2.     TO SHOW THE EFFECT OF VARIOUS COPY COMMANDS.
            3.     AAAA
            4.     BBBBBB
            5.     CCCCC
            6.     DDDDDDD
            6.5    CCCCC
            7.     EEE

          IF THE RANGE COPIED RESULTS IN THE  ADDITION  OF  MORE
          THAN ONE LINE TO THE FILE, THE LAST LINE NUMBER OF THE
          NEW LINES WILL BE INDICATED.

          COMMAND? COPY 3/5 TO 47 (CR)
           49.    - LAST LINE.
          COMMAND? LIST (CR)
            1.     THIS IS A DUMMY FILE WHICH WILL BE USED
            2.     TO SHOW THE EFFECT OF VARIOUS COPY COMMANDS.
            3.     AAAA
            4.     BBBBBB
            5.     CCCCC
            6.     DDDDDDD
            7.     EEE
           47.     AAAA
           48.     BBBBBB
           49.     CCCCC


          COMMAND?  COPY 3/5 TO END (CR)

          WOULD HAVE ACCOMPLISHED THE  SAME  THING  BUT  THE  LINE
          NUMBERS  WOULD HAVE BEEN 8, 9, AND 10 INSTEAD OF 47, 48,
          49.  IF  THE  TO  LINENUMBER  IS  OMITTED,  THE  DEFAULT
          ASSUMED IS TO END.


       B. SPECIFYING DELTA

          COMMAND?  COPY 2/3 TO 4.01
            4.02  - LAST LINE.

          IN THE EXAMPLE ABOVE, THE TWO LINES  FROM  LINE  2.0  TO
          LINE  3.0  INCLUSIVE  WERE  COPIED TO FOLLOW 4.01 WITH A
          DEFAULT INCREMENT OF .01.  IN THE  FOLLOWING  EXAMPLE  A
          DELTA OF .001 IS SPECIFIED.

          COMMAND?  COPY 6/7 TO 2.03 BY .001 (CR)
            2.031 - LAST LINE.
          COMMAND?  LIST (CR)
            1.     THIS IS A DUMMY FILE WHICH WILL BE USED
            2.     TO SHOW THE EFFECT OF VARIOUS COPY COMMANDS.
            2.03   DDDDDDD
            2.031  EEE
            3.     AAAA
            4.     BBBBBB
            5.     CCCCC
            6.     DDDDDDD
            7.     EEE


          IF THE RANGE TO  BE  COPIED  OVERLAPS  THE  RANGE  BEING
          COPIED INTO, BIZARRE RESULTS MAY BE PRODUCED.

          COMMAND? COPY 6/10  TO 8 BY .01 (CR)
          10.02 - LAST LINE
          COMMAND? LIST (CR)
            1.     THIS IS A DUMMY FILE WHICH WILL BE USED
            2.     TO SHOW THE EFFECT OF VARIOUS COPY COMMANDS.
            3.     AAAA
            4.     BBBBBB
            5.     CCCCC
            6.     DDDDDDD
            7.     EEE
            8.     DDDDDDD
            8.01   EEE
            8.02   DDDDDDD
            8.03   EEE
            8.04   DDDDDDD
            8.05   EEE


          AND SO IT GOES, UNTIL  IT  COPIES  10  TO  10.02.   THIS
          HAPPENS  BECAUSE  WYLBUR  COPIES ONE LINE AT A TIME.  IT
          BEGINS AT 6 AND COPIES THAT INTO 8.0; IT NEXT COPIES 7.0
          INTO  8.01;  THEN  8.0  INTO  8.02,  AND  IT   CONTINUES
          GENERATING  AND  COPYING  UNTIL  THE LIMIT, 10, HAS BEEN
          COPIED.  THIS FEATURE  CAN  BE  USED  DELIBERATELY  WHEN
          MULTIPLE COPIES OF A LINE OR RANGE OF LINES ARE WANTED.


       C. MERGE

          THE MERGE OPTION MAY BE USED  TO  INTERLEAVE  LINES.   A
          DELTA  MUST  BE  SPECIFIED  WHICH  WILL ALLOW THE MERGED
          LINES TO FIT BETWEEN THE EXISTING LINES WHICH ARE  BEING
          COPIED  TO.   REPLACES  ARE NOT PERMITTED.  THE OLD LINE
          NUMBERS OF THE LINES COPIED FROM ARE NOT RETAINED BY THE
          COPY MERGE COMMAND.

          COMMAND?  COPY 1/3 TO 2.1 BY 2 MERGE (CR)
            6.1  - LAST LINE
          COMMAND?  LIST (CR)
            1.     THIS IS A DUMMY FILE WHICH WILL BE USED
            2.     TO SHOW THE EFFECT OF VARIOUS COPY COMMANDS.
            2.1    THIS IS A DUMMY FILE WHICH WILL BE USED
            3.     AAAA
            4.     BBBBBB
            4.1    TO SHOW THE EFFECT OF VARIOUS COPY COMMANDS.
            5.     CCCCC
            6.     DDDDDDD
            6.1    AAAA
            7.     EEE


       D. COPY AN ASSOCIATIVE RANGE

          THE FOLLOWING EXAMPLE SHOWS THE SUCCESSFUL  USE  OF  THE
          COPY COMMAND APPLIED TO AN ASSOCIATIVE RANGE.

          COMMAND?  COPY 'FILE' IN 1/6 TO 33  (CR)
          COMMAND?  LIST (CR)
            1.     THIS IS A DUMMY FILE WHICH WILL BE USED
            2.     TO SHOW THE EFFECT OF VARIOUS COPY COMMANDS.
            3.     AAAA
            4.     BBBBBB
            5.     CCCCC
            6.     DDDDDDD
            7.     EEE
           33.     THIS IS A DUMMY FILE WHICH WILL BE USED


          BIZARRE SITUATIONS CAN OCCUR IF YOU ASK WYLBUR  TO  COPY
          ALL   THE   LINES   CONTAINING  A  SPECIFIED  STRING  OF
          CHARACTERS BECAUSE MULTIPLE COPIES  OF  A  LINE  CAN  BE
          GENERATED.

          COMMAND? COPY 'A DUMMY' IN ALL TO 2.03 BY .01 (CR)
          ABORTED BY ATTEMPT TO REPLACE OR INTERLEAVE. 2.99 - LAST LINE
          COMMAND? LIST (CR)
            1.     THIS IS A DUMMY FILE WHICH WILL BE USED
            2.     TO SHOW THE EFFECT OF VARIOUS COPY COMMANDS.
            2.03   THIS IS A DUMMY FILE WHICH WILL BE USED
            2.04   THIS IS A DUMMY FILE WHICH WILL BE USED
            2.05   THIS IS A DUMMY FILE WHICH WILL BE USED
                 .
                 .
                 .
            2.99   THIS IS A DUMMY FILE WHICH WILL BE USED
            3.     AAAA
            4.     BBBBBB
            5.     CCCCC
            6.     DDDDDDD
            7.     EEE


          THESE EXAMPLES ILLUSTRATE THE IMPORTANCE OF  CONSIDERING
          CAREFULLY THE RESULTS OF A COPY COMMAND BEFORE USING IT.

          YOU MAY  SPECIFY  THAT  ONLY  SOME  COLUMNS  ARE  TO  BE
          SEARCHED  FOR  THE  STRING.  THE FOLLOWING EXAMPLE WOULD
          GIVE THE SAME RESULTS AS THE ABOVE EXAMPLE.

          COMMAND? COPY 'A' COLUMNS 9/9 IN ALL TO 2.03 BY .01 (CR)
          ABORTED BY ATTEMPT TO REPLACE OR INTERLEAVE. 2.99 - LAST LINE
          COMMAND?

          YOU MAY SPECIFY A LIST OPTION.  THIS WILL RESULT IN  THE
          LINE  PRECEEDING  THE NEW LINES AS WELL AS THE NEW LINES
          BEING LISTED.

          COMMAND?  COPY LIST (CR)
             7.     EEE
             8.     THIS IS A DUMMY FILE WHICH WILL BE USED
             9.     TO SHOW THE EFFECT OF VARIOUS COPY COMMANDS.
            10.     AAAA
            11.     BBBBBB
            12.     CCCCC
            13.     DDDDDDD
            14.     EEE


       E. COPY TO THE END OF A FILE

          FREQUENTLY YOU MAY WANT TO POSITION THE COPIED LINES  AT
          THE  END  OF  THE  FILE.   THE SPECIAL LINE NUMBER, END,
          WHICH IS EQUAL TO LAST PLUS THE CURRENT VALUE FOR DELTA,
          WILL ALLOW THIS.  END IS THE  DEFAULT  WHEN "TO" IS  NOT
          SPECIFIED.

          COMMAND?  COPY 2.0 TO END (CR)
          OR
          COMMAND?  COPY 2.0 (CR)

       F. COPY FROM AN EXTERNAL FILE

          YOU MAY ALSO COPY LINES FROM ANY EXTERNAL FILE BY GIVING
          A FROM PHRASE WHICH SPECIFIES THE EXTERNAL FILE.  IF YOU
          USE DSNAME PARAMETERS  SUCH  AS  ON  VOLUME,  THEY  MUST
          FOLLOW THE DSNAME.

          A) COPY ALL OF AN EXTERNAL FILE

             IF THE RANGE IS OMITTED, A DEFAULT RANGE  OF  ALL  IS
             ASSUMED.   IF  THE "TO" IS OMITTED, A DEFAULT OF
             "TO=END" IS ASSUMED.  THEREFORE, THE COMMAND:

             COMMAND?  COPY FROM MYTEXT ON TSOWK1 (CR)
               126.   - LAST LINE

             WOULD CAUSE ALL OF THE EXTERNAL FILE NAMED MYTEXT  TO
             BE COPIED TO THE END OF THE ACTIVE FILE.


          B) COPY PART OF AN EXTERNAL FILE

             COMMAND? COPY 1/57 TO 35 BY .1 FROM MYTEXT (CR)
              97.    - LAST LINE.

             THIS WOULD CAUSE ALL LINES WHICH ARE NUMBERED BETWEEN
             1.000 AND 57.000 IN THE EXTERNAL FILE NAMED MYTEXT TO
             BE COPIED INTO THE ACTIVE FILE STARTING  AT  LINE  35
             WITH  A  DELTA  (LINE  INCREMENT) OF .1.  AS WITH THE
             COLLECT OR INSERT COMMANDS, THERE IS  NO  OVERWRITING
             OR INTERLEAVING EXISTING LINES IN THE ACTIVE FILE.

             COMMAND?  COPY F(11) FROM MYFILE ON TSOWK1 (CR)
                18.  -  LAST LINE

             THIS COMMAND COPIES THE FIRST ELEVEN LINES  FROM  THE
             EXTERNAL FILE MYFILE TO THE END OF THE ACTIVE FILE.

             ANOTHER RULE CONCERNING THE COPY COMMAND IS THAT  ANY
             EXTERNAL  FILE  WHICH  IS  SPECIFIED  MUST BE IN EDIT
             FORMAT.  ANY FILE CREATED  AT  A  TERMINAL  WITH  THE
             WYLBUR  SYSTEM  IS IN EDIT FORMAT.  FOR A DESCRIPTION
             OF THE VARIOUS FORMATS, SEE FORMAT IN SECTION VIII.


       G. COPY TO THE BEGINNING OF A FILE

          TO COPY ONE FILE TO THE BEGINNING OF ANOTHER, COPY TO  A
          LINE  NUMBER  LESS THAN THE FIRST LINE.  FOR EXAMPLE, IF
          THE FIRST LINE OF THE ACTIVE FILE WHICH  IS  TO  RECEIVE
          THE COPY IS NUMBERED 1,

          COMMAND?  COPY TO .1 FROM FILE1 ON TSOWK2 (CR)

          WYLBUR ATTEMPTS TO CALCULATE A DELTA WHICH WILL MAKE ALL
          THE LINES FROM THE EXTERNAL FILE FIT.  THIS COMMAND IS A
          CONVENIENT WAY TO INSERT A FILE OF JCL STATEMENTS AT THE
          BEGINNING OF A TEXT FILE.

       H. COPY PART OF AN EXTERNAL FILE AND COMBINE

          THE COMBINE PARAMETER ALLOWS LINES FROM AN EXTERNAL FILE
          TO BE MERGED  INTO  THE  ACTIVE  FILE.   THE  DIFFERENCE
          BETWEEN COMBINE AND MERGE IS THAT MERGE REQUIRES A DELTA
          WHEREAS  COMBINE  WILL  USE  THE  LINE  NUMBERS  IN  THE
          EXTERNAL  FILE  TO  DETERMINE THE POSITION IN THE ACTIVE
          FILE OF THE NEW LINES.  INTERLEAVING  IS  PERMITTED  BUT
          REPLACING IS NOT.

          COMMAND? COPY 'ABCD' FROM MYTEXT ON TSOWK2 COMBINE (CR)
            6.5   - LAST LINE
          COMMAND? LIST (CR)
            1.     THIS IS A DUMMY FILE WHICH WILL BE USED
            1.5    ABCDGOLDFISH?
            2.     TO SHOW THE EFFECT OF VARIOUS COPY COMMANDS.
            3.     AAAA
            4.     BBBBBB
            5.     CCCCC
            6.     DDDDDDD
            6.5    ABCDBBBBB?
            7.     EEE
          COMMAND?



    I. COPY EXEC

       THE EXEC OPTION MAY BE SPECIFIED IN  THE  COPY  COMMAND  TO
       COPY  ALL OR PART OF THE EXEC FILE TO THE ACTIVE FILE.  ANY
       OF THE OTHER COPY OPTIONS MAY  ALSO  BE  SPECIFIED,  EXCEPT
       FROM  (AND ASSOCIATED OPTIONS SUCH AS ON VOLUME); COPY FROM
       EXEC WOULD USE AN EXTERNAL FILE WITH THE DSNAME EXEC.

       COMMAND? COPY FIRST/3 EXEC TO .1 BY 1 MERGE (CR)
          2.3  -  LAST LINE
       COMMAND?

=CHGLEARN
)F FUNCTION -

 THE CHANGE COMMAND


          THE CHANGE COMMAND IS THE SINGLE MOST POWERFUL COMMAND
          IN WYLBUR.  EVERY CHANGE COMMAND HAS  THREE  SECTIONS:
          POSITION,   REPLACEMENT,   AND  RANGE.   THE  POSITION
          IDENTIFIES THE LOCATION WITHIN THE LINE WHICH IS TO BE
          CHANGED.  THE RANGE SPECIFIES WHICH LINES  ARE  TO  BE
          CONSIDERED  FOR  CHANGING.   THE REPLACEMENT DESCRIBES
          WHAT CHANGE IS TO BE MADE.  THE COMMAND  SEARCHES  THE
          LINES  SPECIFIED  IN  THE  RANGE  FOR INSTANCES OF THE
          POSITION TO BE CHANGED AND, WHEN  IT  ENCOUNTERS  ONE,
          MAKES  THE  INDICATED  REPLACEMENT.   AS  EACH LINE IS
          CHANGED, THE RESULTING LINE IS LISTED.

 THE COMMAND CAN BE GIVEN IN EITHER OF TWO ORDERS:

    CHANGE POSITION TO REPLACEMENT IN RANGE

    CHANGE POSITION IN RANGE TO REPLACEMENT

 THERE IS ALSO AN ALTERNATE FORM WHICH WILL BE DISCUSSED LAST:

    CHANGE POSITION IN RANGE USING REPLACEMENT

          THE USER CAN SUPPRESS THE LISTING OF EACH CHANGED LINE
          BY  SPECIFYING  THE  NOLIST  OPTION  IN  THE  COMMAND.
          REMEMBER THAT ANY ATTEMPT TO INTERRUPT THE LISTING  OF
          THE CHANGED LINES, WHEN NOLIST IS NOT GIVEN, WILL ALSO
          HALT THE CHANGE PROCESS.

          A SAMPLE DATA SET WILL BE USED TO SHOW THE  EFFECT  OF
          THE  COMMANDS.  WHEN EACH COMMAND IS GIVEN, THE ACTIVE
          FILE WILL BE:

       1.     123456ABC
       2.     123456ABC
       3.     AAABBBCCC
       4.     AAABBBCCC
       5.     AAABBBCCC



    1. POSITION IN LINE

          THERE ARE THREE BASIC TYPES OF LOCATIONS THAT  CAN  BE
          SPECIFIED  IN  THE  POSITION  SECTION  OF THE COMMAND:
          STRING REPLACEMENT,  COLUMN  REPLACEMENT,  AND  COLUMN
          INSERTION.   THE ORDER USED TO ILLUSTRATE THIS SECTION
          OF THE COMMAND WILL BE:

       CHANGE POSITION TO REPLACEMENT IN RANGE

       A. STRING REPLACEMENT

          THE SIMPLEST VERSION OF THE FIRST FORM IS:

          CHANGE 'STRING1' TO 'STRING2' IN ALL

          IN THE EXAMPLES BELOW A SIMPLE VERSION  OF  THE  LATER
          PARTS OF THE COMMAND (THE REPLACEMENT) AND THE DEFAULT
          RANGE ALL WILL BE USED.

          COMMAND? CHANGE 'A' TO '*' IN ALL (CR)
             1.     123456*BC
             2.     123456*BC
             3.     ***BBBCCC
             4.     ***BBBCCC
             5.     ***BBBCCC
          COMMAND?

          EACH 'A' IN THE ACTIVE FILE HAS BEEN FOUND AND CHANGED
          TO AN '*'.

          THE COMMAND CAN ALSO SPECIFY THAT  THE  STRING  TO  BE
          CHANGED  MUST  OCCUR  COMPLETELY WITHIN CERTAIN COLUMN
          POSITIONS.  NOTICE THAT THE STRING BEING REPLACED  AND
          ITS REPLACEMENT CAN BE OF DIFFERENT LENGTHS.

          COMMAND? CH 'BC' 5/8 TO 'X' IN ALL (CR)
             3.     AAABBXCC
             4.     AAABBXCC
             5.     AAABBXCC
          COMMAND?

          THE 'BC' STRINGS IN LINES 1 AND  2  WERE  NOT  CHANGED
          BECAUSE  THEY  ENDED  IN COLUMN 9 AND WERE, THEREFORE,
          OUTSIDE THE RANGE SPECIFIED.



          IT  IS  ALSO  POSSIBLE  TO  MENTION  JUST  THE  COLUMN
          POSITION IN WHICH THE STRING MUST BEGIN.  THUS, CHANGE
          'BC' 6 TO 'X' IN ALL WOULD HAVE HAD THE SAME EFFECT AS
          THE ABOVE EXAMPLE.

          YOU MAY SPECIFY A THIRD  COLUMN.   THIS  IS  THE  FILL
          COLUMN,  AND WHEN IT IS GIVEN, NOTHING TO THE RIGHT OF
          THAT COLUMN WILL BE CHANGED IN THE RANGE.

          COMMAND? CH 'BBB' 3/6/7 TO '&' IN ALL (CR)
             3.      AAA&  CCC
             4.      AAA&  CCC
             5.      AAA&  CCC
          COMMAND?

          AGAIN YOU MAY MENTION ONLY THE  COLUMN  IN  WHICH  THE
          STRING MUST BEGIN ALONG WITH THE FILL COLUMN.  THUS CH
          'BBB'  3//7 TO '&' WOULD BE EQUIVALENT IN THIS CASE TO
          THE ABOVE EXAMPLE.

          YOU MAY ALSO SPECIFY THE FILL COLUMN  WHEN  SPECIFYING
          NO  OTHER  COLUMN  POSITIONS.   THIS  WILL  CAUSE  ALL
          COLUMNS  BEFORE THE FILL COLUMN TO BE SEARCHED FOR THE
          APPROPRIATE STRING.

          COMMAND? CHANGE 'C' //8 TO ' ' IN ALL (CR)
             3.      AAABBB CC
             4.      AAABBB CC
             5.      AAABBB CC
          COMMAND?

          IF THE REPLACEMENT CANNOT BE MADE WITHIN  THE  COLUMNS
          BEFORE THE FILL COLUMN, THE CHANGE WILL BE MADE LOSING
          SOME OF THE CHARACTERS OF THE NEW LINE AND WYLBUR WILL
          ISSUE   A   MESSAGE  INDICATING  THE  LINES  IN  WHICH
          NON-BLANK CHARACTERS WERE LOST.

          COMMAND? CH 'A' //12 TO 'XX' IN ALL (CR)
             1.      123456XXBC
             2.      123456XXBC
          LINE NO.      3.    LOST CHARACTERS
             3.      XXXXXXBBBCC
          LINE NO.      4.    LOST CHARACTERS
             4.      XXXXXXBBBCC
          LINE NO.      5.    LOST CHARACTERS
             5.      XXXXXXBBBCC
          COMMAND?

          YOU CAN ALSO CHOOSE TO CHANGE JUST A CERTAIN INSTANCE OF
          A STRING IN EACH LINE.  FOR EXAMPLE:

          COMMAND? CH 'C' (2) TO '??' IN ALL (CR)
             3.      AAABBBC??C
             4.      AAABBBC??C
             5.      AAABBBC??C
          COMMAND?


          THIS COMMAND WILL CHANGE ONLY THE SECOND  INSTANCE  OF
          THE STRING 'C' WITHIN EACH LINE.

          IF COLUMN POSITIONS AND AN INSTANCE ARE COMBINED,  THE
          COLUMNS MUST BE GIVEN FIRST.

          A COMMAND  USING  THE  MOST  COMPLEX  VERSION  OF  THE
          POSITION SECTION MIGHT READ IN OUTLINE:

          CHANGE 'STRING1' COL/COL/COL (INSTANCE) TO 'STRING2' IN F/L

          COMMAND?  CHANGE 'C' 8/50 (2) TO 'Y' IN F/L (CR)
             3.     AAABBBCCY
             4.     AAABBBCCY
             5.     AAABBBCCY
          COMMAND?

       B. COLUMN REPLACEMENT

          THE SECOND FORM  OF  THE  POSITION  SECTION  SPECIFIES
          COLUMN POSITIONS TO BE CHANGED WITHOUT REGARD TO THEIR
          CONTENTS.

          CHANGE COLUMN/COLUMN/COLUMN TO 'STRING2' IN F/L

          COMMAND?  CHANGE 3/6 TO '00' IN F/L (CR)
             1.     1200ABC
             2.     1200ABC
             3.     AA00CCC
             4.     AA00CCC
             5.     AA00CCC
          COMMAND?

          AS THE EXAMPLE SHOWS, THE REPLACEMENT STRING CAN BE OF
          A DIFFERENT LENGTH THAN THE MATERIAL IT REPLACES.

          COMMAND?  CHANGE 1/3 TO '' IN F/L (CR)
             1.     456ABC
             2.     456ABC
             3.     BBBCCC
             4.     BBBCCC
             5.     BBBCCC
          COMMAND?

          THE ABOVE EXAMPLE ILLUSTRATES  THE  USE  OF  THE  NULL
          STRING ("" OR '') TO ELIMINATE COLUMNS COMPLETELY.

          AGAIN, THE FILL COLUMN MAY BE SPECIFIED.

          COMMAND? CH 3/6/8 TO '00' IN F/L (CR)
             1.     1200A  BC
             2.     1200A  BC
             3.     AA00C  CC
             4.     AA00C  CC
             5.     AA00C  CC



       C. COLUMN INSERTION

          THE THIRD FORM OF THE POSITION SECTION DESIGNATES  THE
          COLUMN  POSITION  BEFORE  WHICH  AN INSERTION IS TO BE
          MADE.

          CHANGE COLUMN TO 'STRING2' IN RANGE

          COMMAND? CHANGE 3 IN ALL TO ' -' (CR)
             1.     12 -3456ABC
             2.     12 -3456ABC
             3.     AA -ABBBCCC
             4.     AA -ABBBCCC
             5.     AA -ABBBCCC
          COMMAND?

          SINCE  3  WAS  THE  SPECIFIED  COLUMN  POSITION,   THE
          INSERTION  WAS MADE IN FRONT OF THAT POSITION, AND THE
          REST OF THE LINE WAS MOVED TO THE RIGHT.

          YOU MAY ALSO SPECIFY A FILL COLUMN FOR COLUMN INSERTION.

          COMMAND? CH 3//6 TO ' -' IN F/L (CR)
          LINE NO.   1.    LOST CHARACTERS
             1.     12 -36ABC
          LINE NO.   2.    LOST CHARACTERS
             2.     12 -36ABC
          LINE NO.   3.    LOST CHARACTERS
             3.     AA -ABCCC
          LINE NO.   4.    LOST CHARACTERS
             4.     AA -ABCCC
          LINE NO.   5.    LOST CHARACTERS
             5.     AA -ABCCC
          COMMAND?

          NOTICE THAT IT IS  ALWAYS  THE  COLUMN(S)  IMMEDIATELY
          PRECEEDING  THE  FILL  COLUMN THAT WILL BE DELETED, IF
          NECESSARY.  IF ONLY BLANKS ARE  DELETED,  THE  MESSAGE
          LINE NO.  X LOST CHARACTERS WILL NOT BE GIVEN.

    2. SEARCH RANGE

          THE RANGE SECTION OF THE CHANGE COMMAND  TELLS  WYLBUR
          WHICH  LINES  OF  THE  ACTIVE  FILE  TO SEARCH FOR THE
          LOCATION TO CHANGE.   THIS  SECTION  CAN  CONTAIN  ANY
          VALID  ASSOCIATIVE  RANGE OR EXPLICIT RANGE.

       CHANGE POSITION TO REPLACEMENT IN RANGE

          THIS SECTION MAY SIMPLY SPECIFY THAT THE ENTIRE ACTIVE
          FILE SHOULD BE SEARCHED.


       COMMAND? CHANGE 'A' TO '  ' IN F/L (CR)
          1.     123456  BC
          2.     123456  BC
          3.           BBBCCC
          4.           BBBCCC
          5.           BBBCCC
       COMMAND?

          AS WAS MENTIONED ABOVE, THE ORDER OF  THE  REPLACEMENT
          AND THE RANGE CAN BE REVERSED; SO THE GENERAL FORM CAN
          ALSO READ:

       CHANGE POSITION IN RANGE TO REPLACEMENT

       THE SPECIFIC COMMAND ABOVE COULD ALSO HAVE BEEN STATED AS:

       COMMAND?  CHANGE 'A' IN ALL TO ' ' (CR)

       NOTE:  "'A'  IN  ALL"  IN  THE  ABOVE  EXAMPLE  IS  NOT  AN
       ASSOCIATIVE RANGE.


          THE RANGE CAN SPECIFY THAT ONLY CERTAIN LINES  ARE  TO
          BE SEARCHED.

       COMMAND?  CHANGE 'B' TO '' IN 1,3/5 (CR)
          1.  123456AC
          3.  AAACCC
          4.  AAACCC
          5.  AAACCC
       COMMAND?

          THE  RANGE  CAN  BE  FURTHER   RESTRICTED   TO   LINES
          CONTAINING  (OR  NOT  CONTAINING) A GIVEN STRING WHICH
          CAN  BE  REQUIRED  TO  FALL  WITHIN   CERTAIN   COLUMN
          POSITIONS.

       COMMAND?  CHANGE 2/4 TO '$$' IN ¬'A' 1/5 IN 2/LAST (CR)
          2.  1$$56ABC
       COMMAND?

          YOU CAN FURTHER RESTRICT CHANGES TO CERTAIN  INSTANCES
          OF  LINES  MEETING  THE  CRITERIA.  NOTICE THAT IN THE
          EXAMPLE, THE THIRD LINE CONTAINING "A" AND "BB" IS NOT
          CHANGED.

       COMMAND?  CHANGE 'A' TO 'Z' IN 'BB' (1,2) IN ALL (CR)
          3.  ZZZBBBCCC
          4.  ZZZBBBCCC
       COMMAND?

          THE FORM OF THE COMMAND USING THE MOST COMPLEX VERSION
          OF THE RANGE SECTION AND SHOWING THE USE OF ALL  THREE
          STRINGS MIGHT READ:

       CHANGE 'STRING1' TO 'STRING2' IN 'STRING3' COLUMN/COLUMN
       (INSTANCES) IN LINENUMBER,LINENUMBER/LINENUMBER



    3. THE REPLACEMENT

          THE  THIRD  SECTION  OF  THE  COMMAND  SPECIFIES   THE
          REPLACEMENT STRING WHICH IS TO BE PUT IN THE POSITIONS
          BEING  CHANGED.   THE  ORDER  USED  TO ILLUSTRATE THIS
          SECTION WILL BE:

       CHANGE POSITION IN RANGE TO REPLACEMENT

          THE REPLACEMENT MAY BE ONE OF THREE TYPES:   A  QUOTED
          STRING,  AN  INCREMENTED  INTEGER,  OR  A  TRANSFERRED
          REPLACEMENT RANGE.

       A. QUOTED STRING

          CHANGE 'STRING1' IN RANGE TO 'STRING2'

          THE SIMPLEST USE OF THIS  SECTION  INVOLVES  A  DIRECT
          REPLACEMENT  OF  THE DESIGNATED LOCATION WITH A SINGLE
          QUOTED STRING.


          COMMAND?  CHANGE 'ABC' IN ALL TO '%+%' (CR)
             1.     123456%+%
             2.     123456%+%
          COMMAND?

       B. INCREMENTED INTEGER

          THE SECOND FORM THE REPLACEMENT STRING CAN TAKE IS  AN
          INTEGER  WHICH  IS  INCREMENTED  EACH TIME IT IS USED.
          THIS CAN  BE  USED,  FOR  EXAMPLE,  TO  GENERATE  PAGE
          NUMBERS OR SEQUENCE NUMBERS.

          IF A SINGLE INTEGER IS GIVEN, IT IS INCREMENTED BY ONE
          EACH TIME IT IS USED.

          COMMAND?  CHANGE 'C' IN ALL TO 1 (CR)
             1.     123456AB1
             2.     123456AB2
             3.     AAABBB345
             4.     AAABBB678
             5.     AAABBB91011
          COMMAND?

          NOTICE THAT THE FIELD IS EXPANDED  IF  NECESSARY.   AN
          INCREMENT OTHER THAN ONE MAY BE SPECIFIED.

          COMMAND?  CHANGE 12 IN ALL TO 0+5 (CR)
             1.     123456ABC  0
             2.     123456ABC  5
             3.     AAABBBCCC  10
             4.     AAABBBCCC  15
             5.     AAABBBCCC  20
          COMMAND?


          THE INCREMENTING NUMBER MAY BE NEGATIVE.

          COMMAND?  CH 12 IN ALL TO 30-10 (CR)
             1.     123456ABC  30
             2.     123456ABC  20
             3.     AAABBBCCC  10
             4.     AAABBBCCC  0
             5.     AAABBBCCC  -10
          COMMAND?

          IF LEADING ZEROS ARE SPECIFIED IN THE STARTING NUMBER,
          THEY WILL BE PRESERVED.  IF THE INCREMENT IS POSITIVE,
          THE SIGN MAY BE OMITTED.

          COMMAND?  CHANGE 9/9 IN 3/5 TO 005 60 (CR)
             3.     AAABBBCC005
             4.     AAABBBCC065
             5.     AAABBBCC125
          COMMAND?

          LEADING BLANKS  CAN  BE  SPECIFIED  BY  ENCLOSING  THE
          STARTING  NUMBER  IN  QUOTES.  THE INCREMENTING NUMBER
          CAN BE NEGATIVE.

          COMMAND?  CHANGE 9/9 IN ALL TO ' 15'-5 (CR)
             1.     123456AB 15
             2.     123456AB 10
             3.     AAABBBCC  5
             4.     AAABBBCC  0
             5.     AAABBBCC -5
          COMMAND?

          NON-NUMERIC CHARACTERS MAY ALSO BE USED IF THE  NUMBER
          IS  ENCLOSED  IN  QUOTES.   IN  GENERAL, A NON-NUMERIC
          CHARACTER IS CHANGED TO A BLANK IF AT LEAST ONE  BLANK
          FOLLOWS  IT IN THE RESULT.  THE CHARACTERS +, -, $ AND
          # ARE EXCEPTIONS TO THIS RULE.  ONLY ONE OF THESE  MAY
          OCCUR IN THE NUMBER, AND IT WILL BE PLACED ADJACENT TO
          THE LEFT-MOST SIGNIFICANT DIGIT.

          COMMAND?  CHANGE 10 IN ALL TO '$ , 15' +270 (CR)
             1.     123456ABC    $15
             2.     123456ABC   $285
             3.     AAABBBCCC   $555
             4.     AAABBBCCC   $825
             5.     AAABBBCCC $1,095
          COMMAND?


          THE INCREMENTING NUMBER CAN BE NEGATIVE; THE  STARTING
          NUMBER  CAN  ALSO  BE  NEGATIVE,  IF IT IS ENCLOSED IN
          QUOTES.  THE FIELD IS EXPANDED IF  NECESSARY  TO  HOLD
          MINUS SIGNS.

          COMMAND?  CHANGE 'C' IN 3/5 TO '-5'+1 (CR)
             3.     AAABBB-5-4-3
             4.     AAABBB-2-1-0
             5.     AAABBB 1 2 3
          COMMAND?

          NORMALLY THE NUMBER IS INCREMENTED FOR EACH OCCURRENCE
          OF THE STRING TO BE CHANGED.  IT IS POSSIBLE  TO  HAVE
          IT  INCREMENTED  ONLY AT THE BEGINNING OF EACH LINE TO
          BE CHANGED.

          COMMAND?  CHANGE 'C' IN ALL TO 15 LINE (CR)
             1.     123456AB15
             2.     123456AB16
             3.     AAABBB171717
             4.     AAABBB181818
             5.     AAABBB191919

       C. TRANSFERRED REPLACEMENT  (USING)

          THE THIRD FORM, TRANSFERRED REPLACEMENT,  PERMITS  THE
          CONTENTS  OF THE REPLACEMENT STRINGS TO BE COPIED FROM
          ANOTHER LOCATION IN THE  ACTIVE  FILE.   THIS  CAN  BE
          USEFUL FOR MOVING PORTIONS OF THE ACTIVE FILE AROUND.

          CHANGE POSITION IN RANGE USING REPLACEMENT

          AS FOR EXAMPLE IN :

          COMMAND?  CHANGE 15 IN 1/2 USING 4/5 (CR)
             1.     123456ABC     AAABBBCCC
             2.     123456ABC     AAABBBCCC
          COMMAND?


          HERE, THE ENTIRE CONTENTS OF LINES 4 AND 5 HAVE SERVED
          AS REPLACEMENT STRINGS.  NOTE THAT LINES 4 AND 5  HAVE
          NOT   BEEN   DELETED   FROM   THE  ACTIVE  FILE.   THE
          REPLACEMENT RANGE IS LIMITED TO ONE SET OF  CONTIGUOUS
          LINES.


          IF THERE ARE NOT ENOUGH LINES IN THE REPLACEMENT RANGE
          TO CHANGE THE TARGET RANGE OF LINES, WYLBUR WILL  GIVE
          YOU  THE  OPTION  OF  REUSING THE REPLACEMENT RANGE BY
          REPEATING  THE  OPERATION  FROM  THE  BEGINNING.   THE
          REPEAT PARAMETER MAY BE USED ON THE CHANGE COMMAND  TO
          ACCOMPLISH THIS FUNCTION.

          COMMAND?  CHANGE 15 IN ALL USING 2/3 REPEAT (CR)
             1.     123456ABC     123456ABC
             2.     123456ABC     AAABBBCCC
             3.     AAABBBCCC     123456ABC
             4.     AAABBBCCC     AAABBBCCC
             5.     AAABBBCCC     123456ABC
          COMMAND?

          IT IS ALSO POSSIBLE TO  RESTRICT  THE  MATERIAL  BEING
          TRANSFERRED TO CERTAIN COLUMNS OF THE COPIED LINES.

          COMMAND?  CHANGE 15 IN 1/2 USING 4/5 COLUMNS 1/3 (CR)
             1.     123456ABC     AAA
             2.     123456ABC     AAA
          COMMAND?

          ONLY THE CONTENTS OF COLUMNS 1  THROUGH  3  HAVE  BEEN
          USED AS THE REPLACEMENTS.

          TO TRANSFER THE CONTENTS OF A  SINGLE  COLUMN  FROM  A
          GROUP OF LINES:

          COMMAND?  CHANGE 15 IN 1/2 USING 4/5 COLUMNS 3/3 (CR)
             1.     123456ABC     A
             2.     123456ABC     A
          COMMAND?

          SPECIFYING A SINGLE COLUMN POSITION ONLY ONCE  IN  THE
          REPLACEMENT  RANGE CAUSES THAT COLUMN POSITION AND ALL
          TO THE RIGHT OF IT TO BE USED.

          COMMAND?  CHANGE 15 IN 1/2 USING 4/5 COLUMN 3 (CR)
             1.     123456ABC     ABBBCCC
             2.     123456ABC     ABBBCCC
          COMMAND?

          NORMALLY A NEW LINE IS OBTAINED FOR EACH OCCURRENCE OF
          THE STRING TO BE REPLACED.  HOWEVER, YOU  MAY  SPECIFY
          THAT THE RANGES ARE TO BE MATCHED LINE-BY-LINE.

          COMMAND? CH 'C' IN ALL USING 2/3 COLUMNS 1/2 LINE (CR)
             1.      123456AB12
             2.      123456ABAA
             3.      AAABBB121212
             4.      AAABBBAAAAAA
             5.      AAABBB121212
          COMMAND?


          IF AN ERROR HAS OCCURED IN THE  CASE  SETTING  (UPPER,
          UPLOW)  WHILE  ENTERING TEXT, USE ONE OF THE FOLLOWING
          COMMANDS TO CORRECT THE ERROR:

          COMMAND?  CH ALL TO UPPER IN 1/2
                           OR
                    CH ALL TO LOWER IN 1/2
                           OR
                    CH 'AAA' TO LOWER IN ALL
                           OR
                    CH 'AAA' TO UPPER IN 1/10
                           OR
                    CH 22 TO LOWER IN 1/2
                           OR
                    CH 22 TO UPPER IN 1/2

THE ONLY INVALID FORM OF CHANGE TO UPPER/LOWER IS:

          CH 'A' TO LOWER IN ALL
                OR
          CH 'A' TO UPPER IN ALL

          NOTE:  WHEN USING THE CHANGE TO  LOWER  OR  CHANGE  TO
          UPPER, UPLOW IS AUTOMATICALLY SET.


=PREPROC1

         WYLBUR PRE-PROCESSOR: DEFINITION OF TERMS

          THE  FOLLOWING  DEFINITIONS  PERTAIN   ONLY   TO   THE
          PRE-PROCESSOR  (EXCEPT AS NOTED).  ALL ITEMS IN ANGLED
          BRACKETS (<>) REFER TO ITEMS DEFINED IN THIS SECTION.

         INTEGER

          AN <INTEGER> IS  A  WHOLE  NUMBER  WRITTEN  WITHOUT  A
          DECIMAL  POINT.  IT MAY BE POSITIVE, NEGATIVE OR ZERO,
          BUT IT IS ASSUMED TO BE POSITIVE IN THE ABSENCE  OF  A
          SIGN.   ITS  VALUE MAY NOT BE LESS THAN -999999999 NOR
          GREATER THAN 999999999.

         LINENO

          A <LINENO>  (LINE  NUMBER)  IS  A  REAL  NUMBER  WHICH
          CONTAINS  A  DECIMAL POINT.  ITS VALUE MAY NOT BE LESS
          THAN -99999.999.  NOR GREATER THAN 99999.999.

         STRING

          A <STRING> IS A SERIES OF CHARACTERS.  ITS LENGTH  MAY
          VARY FROM 1 TO 255.

         CONSTANT

          A <CONSTANT> IS DEFINED  AS  EITHER  AN  <INTEGER>,  A
          <LINENO>, OR A <STRING>.

         N-VARIABLE

          AN <N-VARIABLE> IS THE LETTER N FOLLOWED BY ONE  DIGIT
          (0-9).

         W-VARIABLE

          A <W-VARIABLE> IS THE LETTER W FOLLOWED BY  ONE  DIGIT
          (0-9).

         S-VARIABLE

          AN <S-VARIABLE> IS THE LETTER S FOLLOWED BY ONE  DIGIT
          (0-9).

         VARIABLE

          THE GENERIC TERM 'VARIABLE' IS USED TO REFER TO EITHER
          AN <N-VARIABLE>, A <W-VARIABLE>, OR AN <S-VARIABLE>.

          NOTE....NORMALLY    <N-VARIABLES>     ARE     ASSIGNED
          <INTEGERS>,  <W-VARIABLES> ARE ASSIGNED <LINENOS>, AND
          <S-VARIABLES> ARE ASSIGNED <STRINGS>.

         KEYWORD (GLOBAL) VARIABLES

          A NUMBER OF WYLBUR  KEYWORDS  (GLOBALS)  HAVE  SPECIAL
          MEANING    WHEN   USED   IN   CONJUNCTION   WITH   THE
          PRE-PROCESSOR.  THESE SIGNIFICANT  KEYWORDS  (GLOBALS)
          ARE: DELTA, FIRST, LAST, END, NEXT, PREVIOUS, CURRENT,
          *,  LENGTH,  PREFIX,  USER,  MEMBER,  AND  VOLUME.  IN
          ADDITION  TO  THESE  KEYWORDS  (GLOBALS),  WHICH  HAVE
          MEANING OUTSIDE THE  PRE-PROCESSOR,  THERE  ARE  OTHER
          KEYWORDS  (GLOBALS)  WHOSE  MEANING  IS LIMITED TO USE
          WITH THE PRE-PROCESSOR.  THESE KEYWORDS (GLOBALS) ARE:
          ESCAPE (ESC) AND SKIP.  THE  VALUES  OF  <ESCAPE>  AND
          <SKIP>  ARE  DETERMINED BY THE CURRENT SETTINGS OF THE
          <ESCAPE>  AND  <SKIP>  CHARACTERS,  RESPECTIVELY.    A
          DESCRIPTION  OF  SETTING AND SHOWING THE VALUES OF THE
          <ESCAPE> AND <SKIP> CHARACTERS  IS  COVERED  LATER  IN
          THIS ENTRY.

         FUNCTION

          AMONG THE FACILITIES OF THE PRE-PROCESSOR ARE  SEVERAL
          <FUNCTIONS>.   THESE ARE SCONVERT, NCONVERT, WCONVERT,
          SUBSTR, SIZE, INDEX, VERIFY, DISPLAY, SHEX, NHEX,  AND
          WHEX.   FOR DESCRIPTIONS OF THESE <FUNCTIONS>, SEE THE
          ENTRY "PREPROC2".

         PRIMARY

          FOR EASE IN REFERENCE, WE SHALL REFER TO A  NUMBER  OF
          THINGS AS A 'PRIMARY.'  THIS GROUPING WILL INCLUDE THE
          FOLLOWING  ITEMS:   <VARIABLE>,  <CONSTANT>,  <KEYWORD
          (GLOBAL)  VARIABLE>,  ANY OF THE <FUNCTIONS>, AND WILL
          ALSO BE  USED  TO  REFER  TO  A  <CEXPR>  ENCLOSED  IN
          PARENTHESES.   A  <PRIMARY> MAY BE SIGNED OR UNSIGNED.
          IF NO SIGN IS PRESENT "+" IS ASSUMED.

         TERM

          A  <TERM>  IS  DEFINED  AS  A  <PRIMARY>,   A   <TERM>
          MULTIPLIED  BY  A  <PRIMARY>, OR A <TERM> DIVIDED BY A
          <PRIMARY>.

         AEXPR

          AN <AEXPR> IS DEFINED AS A <TERM>, AN <AEXPR>  PLUS  A
          <TERM>, OR AN <AEXPR> MINUS A <TERM>.

         CEXPR

          A <CEXPR> IS DEFINED AS EITHER AN <AEXPR> OR A <CEXPR>
          CATENATED WITH AN <AEXPR>.

         DESCRIPTION OF THE WYLBUR PRE-PROCESSOR

          THE PRE-PROCESSOR SCANS ALL  WYLBUR  COMMANDS  LOOKING
          FOR   EITHER   (OR   BOTH)   OF  THE  TWO  SIGNIFICANT
          USER-CONTROLLED CHARACTERS, THE <EXCAPE> CHARACTER AND
          THE  <SKIP>  CHARACTER.   IF  NEITHER  OF  THESE   TWO
          CHARACTERS  IS  PRESENT  IN  THE  TEXT  GIVEN  TO  THE
          PRE-PROCESSOR, NO CHANGE IS MADE; OTHERWISE, THERE ARE
          FIVE CASES DESCRIBED IN THE FORMAT:

         <INPUT TEXT> --- <OUTPUT TEXT>

          WHERE '%' IS ASSUMED TO BE THE <ESCAPE> CHARACTER, '$'
          IS ASSUMED TO BE THE <SKIP> CHARACTER AND '|'  DENOTES
          THE  SCAN  POINTER.   SUBSTITUTIONS  WILL  BE  MADE AS
          FOLLOWS:

         %<VARIABLE><TEXT> --- <VALUE> <TEXT>
         |                            |

         %(<CEXPR>)<TEXT> --- <VALUE> <TEXT>
         |                           |

         %%<VARIABLE><TEXT> --- <VALUE><TEXT>
         |                     |

         %%(<CEXPR>)<TEXT> ---  <VALUE><TEXT>
         |                     |

         $<CHARACTER><TEXT> --- <CHARACTER> <TEXT>
         |                                 |

          ANY SUBSTITUTIONS OR CHANGES TO  A  COMMAND  ARE  MADE
          EACH  TIME  THE  COMMAND  IS EXECUTED.  IF THE COMMAND
          CAME FROM A FILE, THE FILE IS NOT CHANGED; ONLY A COPY
          OF  THE  COMMAND  IS  CHANGED  AND   IS   SUBSEQUENTLY
          EXECUTED.   ALL SUBSTITUTIONS ARE COMPLETED BEFORE THE
          COMMAND IS EXECUTED.  THE TERSE/VERBOSE MODES  CONTROL
          THE  LISTING OF THE CHANGED COMMAND.  IF TERSE IS SET,
          THE CHANGED COMMAND IS NOT  LISTED  BEFORE  EXECUTION.
          IF,  HOWEVER,  VERBOSE  IS SET, THE CHANGED COMMAND IS
          LISTED BEFORE IT IS EXECUTED.

         COMMAND LANGUAGE

          SEE THE INDIVIDUAL  HELP  ENTRIES  FOR  THE  FOLLOWING
          COMMANDS:

         IF COMMAND
         SET AND SHOW VALUE (SEE THE "SET" COMMAND)
         READ COMMAND
         SET AND SHOW ESCAPE (SEE THE "SET" COMMAND)
         SET AND SHOW SKIP (SEE THE "SET" COMMAND)
         SET AND SHOW RESCAN (SEE THE "SET" COMMAND)


         EXAMPLES OF PRE-PROCESSOR USAGE

          IN  THE  FOLLOWING  SECTION  YOU  WILL  FIND  EXAMPLES
          DESCRIBING  THE  USE  OF  THE  PRE-PROCESSOR.    THESE
          EXAMPLES  ARE  MEANT  TO DEMONSTRATE THE FACILITIES OF
          THE  PRE-PROCESSOR.   A  POINT  HAS   BEEN   MADE   TO
          DEMONSTRATE  THE USE OF THE ESCAPE AND SKIP CHARACTERS
          AS WELL AS THE RESCAN FEATURE.

          THE PRE-PROCESSOR CANNOT BE INVOKED  UNTIL  AN  ESCAPE
          CHARACTER  HAS  BEEN  SET.   SINCE,  IN  THE FOLLOWING
          EXAMPLES, BOTH THE ESCAPE AND SKIP CHARACTERS WILL  BE
          USED, LET US FIRST SET THESE.

                   COMMAND?  SET ESCAPE &
                   COMMAND?  SET SKIP /

          IN THE ABOVE COMMANDS, IT IS NOT NECESSARY TO  ENCLOSE
          THE  ESCAPE  AND SKIP CHARACTERS IN QUOTATIONS BECAUSE
          NEITHER  OF  THEM  IS  CONSIDERED  TO  BE  A   SPECIAL
          CHARACTER.   THE  ESCAPE  AND SKIP CHARACTERS HAVE NOW
          BEEN SET FOR OUR SESSION AND WILL REMAIN SET TO  THESE
          VALUES  UNTIL CHANGED VIA ANOTHER "SET ESCAPE" OR "SET
          SKIP" COMMAND.

         LET US PROCEED WITH AN EXAMPLE:


         COMMAND?  SET VALUE S0 'SHOW DSNAMES SPACE LIKE ACT ON ' (CR)
         COMMAND?  &S0 TSOWK1 (CR)
         SHOW DSNAMES SPACE LIKE ACT ON TSOWK1
         TSOWK1
         UUUUU.ACTIVE -- 13 TRKS
         UUUUU.ACTIVITY -- 2 TRKS
         COMMAND?  &S0 TSOWK2 (CR)
         SHOW DSNAMES SPACE LIKE ACT ON TSOWK2
         TSOWK2
         COMMAND?

          IN  THE  ABOVE  EXAMPLE  A  VALUE  IS  SET  INTO   THE
          PRE-PROCESSOR  STRING  VARIABLE  S0.   IT HAPPENS THAT
          THIS VALUE IS A  WYLBUR  COMMAND.   WHEN,  IN  COMMAND
          MODE, AN ESCAPE CHARACTER (& IN THIS CASE) IS FOLLOWED
          BY  S0, THE PRE-PROCESSOR IS INVOKED TO SUBSTITUTE THE
          VALUE OF THE VARIABLE S0 AND TO RESUME SCANNING AT THE
          END OF  THE  TEXT  WHICH  WAS  SUBSTITUTED.   IN  THIS
          EXAMPLE,  THERE ARE NO ADDITIONAL ESCAPE CHARACTERS IN
          THE COMMAND, HENCE NO FURTHER  SUBSTITUTIONS  NEED  BE
          MADE.   AS  WAS  MENTIONED  IN  THE DESCRIPTION OF THE
          PRE-PROCESSOR, SINCE  WE  ARE  IN  VERBOSE  MODE,  THE
          COMMAND IS RETYPED BY WYLBUR AFTER ALL THE APPROPRIATE
          SUBSTITUTIONS  HAVE BEEN MADE.  THE COMMAND, AS IT WAS
          RETYPED, IS THEN EXECUTED.


          IN THE NEXT EXAMPLE, ASSUME THAT THE VALUE  OF  S0  IS
          UNCHANGED, BUT THAT WE INTRODUCE TWO NEW VARIABLES, S1
          AND S2 AS FOLLOWS:

         COMMAND?  SET VALUE S1 'TSOWK1' (CR)
         COMMAND?  SET VALUE S2 'TSOWK2' (CR)

          THIS EXAMPLE WILL THEN DEMONSTRATE THE USE OF MULTIPLE
          VARIABLES IN A SINGLE COMMAND:

         COMMAND?  &S0 &S1 (CR)
         SHOW DSNAMES SPACE LIKE ACT ON TSOWK1
         TSOWK1
         UUUUU.ACTIVE -- 13 TRKS
         UUUUU.ACTIVITY -- 2 TRKS
         COMMAND?  &S0 &S2 (CR)
         SHOW DSNAMES SPACE LIKE ACT ON TSOWK2
         TSOWK2
         COMMAND?

          IN THE ABOVE EXAMPLE TWO SUBSTITUTIONS ARE  MADE:  ONE
          (IN  EACH  CASE) FOR THE VALUE OF S0,  AND ANOTHER FOR
          THE VALUE OF S1 (OR, IN THE SECOND CASE, S2).   AGAIN,
          THE  COMMANDS  ARE  TYPED  BY  WYLBUR  BEFORE THEY ARE
          EXECUTED.

          THIS CAN BE FURTHER GENERALIZED BY CHANGING THE  VALUE
          OF S0 AS IN THE FOLLOWING EXAMPLE:

         COMMAND?  SET VAL S0 'SHOW DSNAMES SPACE LIKE /&S9 ON '
         SET VALUE S0 'SHOW DSNAMES SPACE LIKE &S9 ON '
         COMMAND?  SHOW VALUE S0
         'SHOW DSNAMES SPACE LIKE &S9 ON '
         COMMAND?

          NOTE, IN THE ABOVE "SET VALUE" COMMAND, THE USE OF THE
          SKIP CHARACTER (/) TO FORCE THE PRE-PROCESSOR TO  SKIP
          THE  SUBSEQUENT CHARACTER, WHICH IS, IN THIS CASE, THE
          ESCAPE CHARACTER (&).  THE  EFFECT  OF  THIS  IS  THAT
          SINCE  THE  PRE-PROCESSOR  DOESN'T  "SEE"  THE  ESCAPE
          CHARACTER,  TEXT SUBSTITUTION IS NOT PERFORMED FOR THE
          VALUE OF S9.  NOW, LET US SET THE VALUE OF S9  TO  THE
          DSNAMES WE WANT TO LOOK FOR:

         COMMAND? SET VALUE S9 'ACT' (CR)

          SINCE WE WANT THE PRE-PROCESSOR TO  RESCAN  THE  VALUE
          WHICH  WILL  BE SUBSTITUTED FOR S0 (SO THAT THE PROPER
          VALUE OF S9 WILL BE PUT IN), WE MUST PRECEDE S0  BY  A
          PAIR OF ESCAPE CHARACTERS WHEN WE ENTER THE COMMAND:

         COMMAND?  &&S0 &S1 (CR)
         SHOW DSNAMES SPACE LIKE ACT ON TSOWK1
         TSOWK1
         UUUUU.ACTIVE -- 13 TRKS
         UUUUU.ACTIVITY -- 2 TRKS
         COMMAND?  SET VALUE S9 'TEST' (CR)
         COMMAND?  &&S0 &S1 (CR)
         SHOW DSNAMES SPACE LIKE TEST ON TSOWK1
         TSOWK1
         UUUUU.TESTRUN -- 10 TRKS
         COMMAND?  SET VALUE S9 'PGM' (CR)
         COMMAND?  &&S0 &S2 (CR)
         SHOW DSNAMES SPACE LIKE PGM ON TSOWK2
         TSOWK2
         UUUUU.PGM1 -- 1 TRKS
         UUUUU.PGM2 -- 1 TRKS
         UUUUU.PGM3 -- 1 TRKS
         COMMAND?

          YOU CAN SEE THAT IN THIS CASE, SIMPLY BY CHANGING  THE
          VALUE  OF  S9, THE DATA SET FOR WHICH WE SEARCH CAN BE
          CHANGED.   IN  EITHER  OF  THE  FIRST  TWO   EXAMPLES,
          HOWEVER,  WE  WOULD HAVE HAD TO RESET THE ENTIRE VALUE
          OF S0.  IN THIS  WAY  WE  HAVE  SAVED  OURSELVES  SOME
          TYPING!

          ON ENCOUNTERING THE  ABOVE  INPUT,  THE  PRE-PROCESSOR
          MUST  MAKE SEVERAL SUBSTITUTIONS.  THESE SUBSTITUTIONS
          ARE INDICATED IN THE FOLLOWING LINES.  IN EACH OF  THE
          LINES  BELOW,  THE  VERTICAL  BAR  (|)  INDICATES  THE
          POSITION  OF  THE  SCAN POINTER AFTER EACH SCAN OF THE
          COMMAND:

         COMMAND?  &&S0 &S2 (CR)
         1 -> SHOW DSNAMES SPACE LIKE &S9 ON &S2
              |

         2 -> SHOW DSNAMES SPACE LIKE PGM ON &S2
                                         |

         3 -> SHOW DSNAMES SPACE LIKE PGM ON TSOWK2
                                                   |

          IT IS THIS LAST VERION OF THE COMMAND WHICH  IS  TYPED
          OUT  BY WYLBUR BEFORE EXECUTION.  NOTE THAT IN LINE 1,
          THE VALUE OF S0 IS SUBSTITUTED AND THE SCAN POINTER IS
          POSITIONED AT THE BEGINNING OF  THE  SUBSTITUTED  TEXT
          FOR  RESCANNING  OF THAT TEXT (THIS IS DUE TO THE PAIR
          OF ESCAPE CHARACTERS PRECEDING S0).  UPON ENCOUNTERING
          AN ESCAPE CHARACTER IN THE SUBSTITUTED TEXT (I.E. WHEN
          IT FINDS &S9 AFTER IT HAS  SUBSTITUTED  THE  VALUE  OF
          S0), ANOTHER SUBSTITUTION IS MADE FOR THE VALUE OF S9.
          AT  THIS  TIME,  BECAUSE  S9  IS  PRECEDED BY A SINGLE
          ESCAPE CHARACTER, THE SCAN POINTER IS POSITIONED AFTER
          THE SUBSTITUTED VALUE OF S9 AND SCANNING CONTINUES.

          ONE FINAL EXAMPLE WILL ILLUSTRATE THE USE OF  MULTIPLE
          RESCANS.   SUPPOSE  YOU  WISH TO DETERMINE HOW MANY OF
          YOUR GROUP MEMBERS HAVE FILES NAMED ACTIVE ON  TSOWK1,
          TSOWK2,   AND  TSOWK3.   THE  FOLLOWING  EXAMPLE  WILL
          DEMONSTRATE ONE METHOD  OF  ANSWERING  THIS  QUESTION.
          SUPPOSE  THAT  THE ESCAPE AND SKIP CHARACTERS HAVE NOT
          BEEN CHANGED FROM THE PREVIOUS EXAMPLES.

         COMMAND? SHOW ESCAPE (CR)
         & - ESCAPE CHAR
         COMMAND? SHOW SKIP (CR)
         / - SKIP CHAR
         COMMAND?  SET VAL S0 'SHOW DSNAMES LIKE /&/&S9 ON ' (CR)
         SET VALUE S0 'SHOW DSNAMES LIKE &&S9 ON '
         COMMAND?  SET VAL S1 'TSOWK1' (CR)
         COMMAND?  SET VAL S2 'TSOWK2' (CR)
         COMMAND?  SET VAL S3 'TSOWK3' (CR)
         COMMAND?  SET VALUE S9 'U4IA0./&S8.ACTIVE' (CR)
         SET VALUE S9 'U4IA0.&S8.ACTIVE'
         COMMAND?  SET VAL S8 'ABC' (CR)
         COMMAND?  &&S0 &S1 (CR)
         SHOW DSNAMES LIKE R4IA0.ABC.ACTIVE ON TSOWK1
         TSOWK1
         R4IA0.ABC.ACTIVE
         COMMAND?  &&S0 &S2 (CR)
         SHOW DSNAMES LIKE R4IA0.ABC.ACTIVE ON TSOWK2
         TSOWK2
         COMMAND?  SET VALUE S8 'DEF' (CR)
         COMMAND &&S0 &S1 (CR)
         SHOW DSNAMES LIKE R4IA0.DEF.ACTIVE ON TSOWK1
         TSOWK1
         R4IA0.DEF.ACTIVE
         COMMAND?  &&S0 &S2 (CR)
         SHOW DSNAMES LIKE R4IA0.DEF.ACTIVE ON TSOWK2
         TSOWK2
         COMMAND?

          YOU COULD CONTINUE CHANGING THE VALUE OF S8 UNTIL  YOU
          HAD  LOOKED  FOR  ALL  THE  MEMBERS OF YOUR GROUP.  IN
          THESE COMMANDS, TEXT SUBSTITUTION IS PERFORMED IN  THE
          FOLLOWING   WAY   (IN  EACH  LINE,  THE  VERTICAL  BAR
          INDICATES THE POSITION OF THE SCAN POINTER):

         COMMAND?  &&S0 &S2 (CR)
         1 -> SHOW DSNAMES LIKE &&S9 ON &S2
              |

         2 -> SHOW DSNAMES LIKE R4IA0.&S8.ACTIVE ON &S2
                                |

         3 -> SHOW DSNAMES LIKE R4IA0.DEF.ACTIVE ON &S2
                                         |

         4 -> SHOW DSNAMES LIKE R4IA0.DEF.ACTIVE ON TSOWK2

          IN THE ABOVE EXAMPLE, RESCAN MUST BE SET TO  AT  LEAST
          THREE.   IF  RESCAN  HAS BEEN SET TO A VALUE LESS THAN
          THREE, THE FOLLOWING MESSAGE WILL  BE  TYPED  AND  THE
          COMMAND WILL BE ABORTED:

             TOO MANY RESCANS, PREPROCESSING ABORTED

          THIS IS TRUE IN GENERAL WHEN THE RESCAN COUNT  IS  TOO
          SMALL  TO  ALLOW  FULL  PRE-PROCESSING OF THE COMMAND.
          THIS CAN BE RECTIFIED  BY  USE  OF  THE  "SET  RESCAN"
          COMMAND  DESCRIBED  IN  THE  HELP  ENTRY FOR THE "SET"
          COMMAND.  RESCAN MUST  BE  ONE  MORE  THAN  THE  TOTAL
          NUMBER  OF  PAIRS  OF  ESCAPE  CHARACTERS  WHICH  WILL
          EVENTUALLY  BE  ENCOUNTERED  BY THE PRE-PROCESSOR.  IN
          THE ABOVE  EXAMPLE  THERE  ARE  TWO  PAIRS  OF  ESCAPE
          CHARACTERS  (PRECEDING S0 IN THE COMMAND AND PRECEDING
          S9 WITHIN S0) HENCE RESCAN MUST BE  SET  TO  AT  LEAST
          2+1=3.  NOTE.....IN THE ABOVE EXAMPLES THAT AN ABSENCE
          OF  THE  DESIRED  DATA  SET  ON  A VOLUME STILL CAUSES
          WYLBUR TO TYPE OUT THE VOLUME NAME BEFORE COMING  BACK
          TO THE COMMAND MODE.

=PREPROC2
)F FUNCTION -

          THIS SECTION IS NOT MEANT FOR BEGINNING  WYLBUR  USERS
          DUE TO THE COMPLEXITY OF THE MATERIAL BEING PRESENTED.
          ALL OF THE INFORMATION HERE IS AVAILABLE UNDER VARIOUS
          OTHER  HELP  ENTRIES, BUT IS GATHERED HERE TO ENABLE A
          MORE EASILY UNDERSTOOD EXPLANATION  OF  THE  FUNCTIONS
          AND  CAPABILITIES  OF THE PRE-PROCESSOR AND WHAT "EXEC
          FILES" ARE REALLY CAPABLE OF DOING FOR YOU.

          IN ALL  OF  THE  ENTRIES  LISTED  BELOW,  THE  VARIOUS
          KEYWORDS ARE PRESENTED ON THE LEFT OF THE "=" SIGN AND
          THE  VALUES  THE  KEYWORDS  MAY  TAKE ARE ON THE RIGHT
          SEPARATED BY THE VERTICAL BAR (|) CHARACTER.

            SPECIFICATION OF WYLBUR PRE-PROCESSOR FEATURES


          THE PRE-PROCESSOR FEATURES DESCRIBED BELOW  HAVE  BEEN
          ADDED  TO  WYLBUR  TO ENHANCE EXEC FILE PROCESSING AND
          GENERAL WYLBUR CAPABILITIES.


 I.  EXTENSIONS

     A.  SET AND SHOW VALUE COMMANDS

         1.  SET VALUE <VARIABLE>=<EXP>

             A.  EXPRESSION SYNTAX
                 <INTEGER>  = <1 TO 9 DIGITS>
                 <LINENO>  = <0 TO 5 DIGITS>.<1 TO 3 DIGITS> |
                             <1 TO 5 DIGITS>.
                 <STRING>  = '<0 TO 255 CHARACTERS>' |
                             "<0 TO 255 CHARACTERS>"
                 <CONSTANT>  = <STRING> | <LINENO> | <INTEGER>
                 <NVARIABLE>  = N<ONE DIGIT>
                 <WVARIABLE>  = W<ONE DIGIT>
                 <SVARIABLE>  = S<ONE DIGIT>
                 <VARIABLE>  = <NVARIABLE> | <WVARIABLE> | <SVARIABLE>
                 <KEYWORD VAR>  = DELTA | FIRST | LAST | END | NEXT |
                                  PREVIOUS | CURRENT | * | LENGTH |
                                  PREFIX | MEMBER |
                                  VOLUME | DATE | ESCAPE | SKIP |
                                  PAGES | LINES | RANDOM |
                                  CP | PROJECT
                 <PRIMARY>  = <VARIABLE> | <CONSTANT> | (<EXP>) |
                              <KEYWORD VAR> | -<PRIMARY> | +<PRIMARY>
                              <1 VAR FUNCTION>(<EXP>) |
                              <2 VAR FUNCTION>(<EXP>,<EXP>) |
                              <3 VAR FUNCTION>(<EXP>,<EXP>,<EXP>)
                 <1 VAR FUNCTION>  = SIZE | TDUMP | CORE | EXPAND |
                                     SCONVERT | NCONVERT | WCONVERT |
                                     SHEX | NHEX | WHEX | DISPLAY |
                                     REVERSE | TRIM | LTRIM | RTRIM |
                                     NEGATE
                 <2 VAR FUNCTION>  = INDEX | RINDEX | LINDEX | TDUMP |
                                     XLATE | SUBSTR | LSUBSTR |
                                     RSUBSTR | VERIFY | LVERIFY |
                                     RVERIFY | PAD | RPAD | LPAD |
                                     TRIM | LTRIM | RTRIM | DUPL |
                                     XOR | AND | OR
                 <3 VAR FUNCTION>  = XLATE | SUBSTR | RSUBSTR |
                                     LSUBSTR | PAD | RPAD | LPAD
                 <TERM>  = <PRIMARY> | <TERM> * <PRIMARY> |
                           <TERM>/<PRIMARY>
                 <AEXPR>  = <TERM> | <AEXPR>+<TERM> | <AEXPR>-<TERM>
                 <EXP>  = <AEXPR> | <EXP>||<AEXPR>


             B.  THE EXPRESSION SYNTAX IS GIVEN IN A FAIRLY  STANDARD
                 BNF  GRAMMAR  FORMAT.   EXPRESSIONS  HAVE FIVE BASIC
                 OPERATORS   AND   THREE    LEVELS    OF    PRIORITY.
                 MULTIPLICATION (*) AND DIVISION (/) HAVE THE HIGHEST
                 PRIORITY  AND ARE PERFORMED FIRST.  ADDITION (+) AND
                 SUBTRACTION (-) HAVE THE NEXT PRIORITY,  AND  STRING
                 CATENATION  (||) IS PERFORMED LAST.  PARENTHESES CAN
                 BE  USED  TO  CAUSE  ANY  OTHER  DESIRED  ORDER   OF
                 EVALUATION.

             C.  THERE ARE  ONLY  30  VARIABLES  AND  THEY  ALL  HAVE
                 PRE-DECLARED  NAMES  (N0-N9,  W0-W9  AND S0-S9).  AN
                 <NVARIABLE> CAN BE SET TO ANY  <INTEGER>  VALUE.   A
                 <WVARIABLE>  CAN  BE  SET TO ANY <LINENO> VALUE.  AN
                 <SVARIABLE> CAN BE SET TO ANY <STRING>  VALUE.   THE
                 SYNTAX FOR <LINENO>, <INTEGER> AND <STRING> IS GIVEN
                 JUST  TO SHOW THE RANGE OF VALUES ALLOWED.  <LINENO>
                 AND <INTEGER> EXPRESSIONS CAN HAVE RESULTS THAT  ARE
                 ANY  VALUE REPRESENTABLE BY A FULL WORD.  THE LENGTH
                 OF A <STRING> MUST  BE  LESS  THAN  256  CHARACTERS.
                 INITIALLY,  N0-N9  AND W0-W9 ARE SET TO 0; S0-S9 ARE
                 SET TO NULL.

             D.  ONE OR MORE BLANKS, COMMAS, AND/OR EQUAL  SIGNS  CAN
                 BE  USED  BETWEEN  ARGUMENTS,  AROUND OPERATORS, AND
                 BEFORE AND AFTER PARENTHESES.  THEY ARE NORMALLY NOT
                 REQUIRED IF THE SEPARATION IS  CLEAR  WITHOUT  THEM.
                 HOWEVER,  A  RESTRICTION  ON THE USE OF MULTIPLY (*)
                 NOW REQUIRES ONE OR MORE BLANKS,  COMMAS,  OR  EQUAL
                 SIGNS  ON BOTH SIDES OF THE * TO BE PROPERLY SCANNED
                 IF THE TWO ARGUMENTS ARE CONSTANTS OR VARIABLES.

             E.  IF CURRENT, NEXT, AND/OR PREVIOUS ARE  USED  IN  ANY
                 <EXP>  AND  THEY ARE NOT SET, THEY WILL BE GIVEN THE
                 VALUE -1.000 INSTEAD OF CAUSING AN EXEC BREAK.

             F.  MIXED  TYPES  ARE  ALWAYS  CONVERTED   AUTOMATICALLY
                 BEFORE THE OPERATION IS DONE.  FOR MIXED INTEGER AND
                 LINE  NUMBER OPERATIONS, THE INTEGER IS CONVERTED TO
                 A  LINE  NUMBER.   FOR  ARITHMETIC   OPERATIONS   ON
                 STRINGS,  THE STRING(S) ARE CONVERTED TO INTEGERS OR
                 LINE NUMBERS FIRST, AND THEN NORMAL INTEGER TO  LINE
                 NUMBER  CONVERSION IS DONE IF NEEDED.  THE FUNCTIONS
                 SCONVERT, WCONVERT, AND NCONVERT  ARE  AVAILABLE  TO
                 FORCE DIFFERENT CONVERSION.  EACH OF THESE FUNCTIONS
                 TAKES  ANY  TYPE  OF  <EXP> AS ITS ARGUMENT AND DOES
                 ANY  CONVERSION  NECESSARY  TO   OUTPUT   A   STRING
                 (SCONVERT),   LINE  NUMBER  (WCONVERT),  OR  INTEGER
                 (NCONVERT) VALUE.


             G.  WHENEVER A LINE NUMBER  IS  CONVERTED  TO  A  STRING
                 (INCLUDING  PRE-PROCESSOR SUBSTITUTIONS), THE STRING
                 IS MADE TO ALWAYS CONTAIN A 3-DIGIT FRACTIONAL  PART
                 EVEN IF THE FRACTIONAL PART IS '.000'.

             H.  SUBSTR PERFORMS A SUBSTRING OPERATION ON THE  STRING
                 SPECIFIED   AS   THE  FIRST  ARGUMENT.   THE  SECOND
                 ARGUMENT SPECIFIES  THE  STARTING  POSITION  OF  THE
                 SUBSTRING,  AND  THE  THIRD  ARGUMENT  SPECIFIES THE
                 LENGTH.  IF THE THIRD ARGUMENT IS OMITTED, THE  REST
                 OF  THE  STRING AFTER THE STARTING POSITION IS USED.
                 THE STARTING POSITION AND LENGTH NEED NOT BE  WITHIN
                 THE  STRING  OPERAND  BOUNDARIES, BUT THEY CANNOT BE
                 NEGATIVE NOR SUM TO MORE THAN 256.  THE RESULT  WILL
                 BE A NULL STRING IF THE LENGTH OPERAND IS ZERO OR IF
                 THE  LENGTH  IS OMITTED AND THE STARTING POSITION IS
                 BEYOND THE STRING OPERAND.  THE RESULT WILL BE BLANK
                 FILLED ON THE RIGHT TO GIVE A RESULT THAT  IS  EQUAL
                 IN  LENGTH  TO THE SPECIFIED LENGTH OPERAND WHENEVER
                 THE  STRING  OPERAND  IS  NOT  LONG ENOUGH.  LSUBSTR
                 FUNCTION  IS  IDENTICAL TO SUBSTR.  RSUBSTR FUNCTION
                 DOES THE SAME FUNCTION AS SUBSTR WITH THE DIFFERENCE
                 THAT  THE START POSITION IS SPECIFIED FROM THE RIGHT
                 HAND SIDE OF THE FIRST ARGUMENT.

             I.  VERIFY EXAMINES THE TWO OPERAND  STRINGS  TO  VERIFY
                 THAT   EACH   CHARACTER   IN  THE  FIRST  STRING  IS
                 REPRESENTED IN THE SECOND STRING.  IF  THIS  IS  THE
                 CASE,  A  VALUE  OF  0 IS THE RESULT; OTHERWISE, THE
                 VALUE RETURNED IS THE INDEX OF THE  FIRST  CHARACTER
                 IN  THE  FIRST STRING THAT IS NOT REPRESENTED IN THE
                 SECOND  STRING.   LVERIFY  IS  SYNONYMOUS TO VERIFY.
                 RVERIFY  PERFORMS  THE  SAME  FUNCTION AS VERIFY BUT
                 THE VERIFICATION STARTS FROM THE RIGHT HAND SIDE.

             J.  SIZE SIMPLY HAS A VALUE EQUAL TO THE LENGTH  OF  THE
                 ARGUMENT STRING.

             K.  INDEX FINDS THE  STARTING  POSITION  OF  THE  STRING
                 SPECIFIED  AS  THE SECOND ARGUMENT WITHIN THE STRING
                 SPECIFIED AS THE  FIRST  ARGUMENT.   IF  THE  SECOND
                 STRING  IS  NOT  IN THE FIRST STRING, THE VALUE 0 IS
                 RETURNED.  LINDEX  IS  SYNONYMOUS  TO INDEX.  RINDEX
                 RETURNS THE STARTING POSITION OF THE FIRST OCCURENCE
                 OF THE STRING SPECIFIED AS THE SECOND ARGUMENT  FROM
                 SCANNING FROM THE RIGHT HAND SIDE OF THE STRING.


             L.  DISPLAY CONVERTS THE  ARGUMENT  TO  ITS  HEXADECIMAL
                 REPRESENTATION.   IF  THE  ARGUMENT IS A STRING, THE
                 RESULT IS A STRING OF TWICE THE LENGTH,  SINCE  EACH
                 CHARACTER  OF THE ARGUMENT STRING IS NOW REPRESENTED
                 AS   TWO   CHARACTERS   WHICH   ARE    ITS    EBCDIC
                 REPRESENTATION  IN HEX (E.G.  DISPLAY('A1')='C1F1').
                 IF THE ARGUMENT IS A LINE  NUMBER  OR  INTEGER,  THE
                 RESULT  IS  AN  EIGHT CHARACTER STRING CONSISTING OF
                 THE HEX DIGITS FOR THE  INTERNAL  REPRESENTATION  OF
                 THE     LINE     NUMBER     OR     INTEGER     (E.G.
                 DISPLAY(1.)=DISPLAY(1000)='000003E8').

             M.  SHEX  IS  THE  INVERSE  OF  DISPLAY  WITH  A  STRING
                 ARGUMENT.  THE HEX DIGITS OF THE STRING ARGUMENT ARE
                 PACKED TO FORM THE CHARACTERS.  THE RESULTANT STRING
                 IS HALF THE LENGTH  OF  THE  ARGUMENT  STRING  (E.G.
                 SHEX('C1F1')='A1').   THIS  FUNCTION  CAN BE USED TO
                 DIRECTLY CREATE ANY OF THE  256  POSSIBLE  CHARACTER
                 CODES.   MOST  OF  THESE  CODES  WILL  TYPE  ON  THE
                 TERMINAL  AS  A  ':'  TO  SHOW  THAT  THEY  ARE  NOT
                 PRINTABLE.   AS AN EXTENSION, THE SHEX FUNCTION ALSO
                 ALLOWS INTEGER ARGUMENTS.  THE RESULT  IS  A  STRING
                 THAT   STRIPS  OFF  LEADING  X'00'  BYTES  FROM  THE
                 INTERNAL  REPRESENTATION  OF   THE   INTEGER   (E.G.
                 SHEX(241)=SHEX('F1')='1').

             N.  NHEX IS THE  INVERSE  OF  DISPLAY  WITH  AN  INTEGER
                 ARGUMENT.   THE  STRING OF UP TO 8 HEX CHARACTERS IS
                 PACKED TO  FORM  AN  INTERNAL  INTEGER  VALUE  (E.G.
                 NHEX('3E8')=1000).

             O.  WHEX IS THE INVERSE OF DISPLAY WITH  A  LINE  NUMBER
                 ARGUMENT.   THE  STRING OF UP TO 8 HEX CHARACTERS IS
                 PACKED TO FORM AN INTERNAL LINE NUMBER  VALUE  (E.G.
                 WHEX('3E8')=1.000).

             P.  THE  PAD  FUNCTION RETURNS ITS FIRST ARGUMENT PADDED
                 TO A LENGTH  SPECIFIED  BY THE SECOND ARGUMENT.  THE
                 FILL CHARACTER IS SPECIFIED WITH THE THIRD ARGUMENT.
                 IF THERE IS NO THIRD ARGUMENT THE FILL CHARACTER  IS
                 A SPACE.  RPAD IS SYNONYMOUS TO PAD.  LPAD PADS  ITS
                 ARGUMENT ON THE LEFT HAND SIDE.

             Q.  THE  TRIM  AND  RTRIM  FUNCTIONS  STRIP  THEIR FIRST
                 ARGUMENT OFF OF THE TRIM CHARACTER SPECIFIED AS  THE
                 SECOND ARGUMENT ON THE LEFT HAND SIDE. IF THE SECOND
                 ARGUMENT IS OMITTED THE TRIM CHARACTER  IS A  BLANK.
                 THE LTRIM FUNCTION DOES THE SAME ON THE LEFT SIDE.

             R.  REVERSE FUNCTION RETURNS THE REVERSE OF ITS ARGUMENT

             S.  DUPL FUNCTION RETURNS A STRING CONSTRUCTED BY DUPLI-
                 CATING ITS FIRST ARGUMENT AS MANY TIMES AS SPECIFIED
                 BY ITS SECOND ARGUMENT.

             T.  XOR, AND, OR FUNCTIONS TAKE TWO ARGUMENTS AND RETURN
                 A STRING FORMED BY THE LOGICAL OPERATION IMPLIED  BY
                 THE FUNCTION NAME.  SHORTER OF THE ARGUMENTS IS  EX-
                 PANDED ON THE RIGHT SIDE BY ADDING BLANKS.

             U.  NEGATE FUNCTION RETURNS A STRING FORMED BY EXCLUSIVE
                 OR-ING ITS ARGUMENT BY X'FFFFFF...'.

             V.  TDUMP  FUNCTION  RETURNS THE CONTENTS OF MAIN MEMORY
                 IN HEX.   THE  FIRST  ARGUMENT  SPECIFIES IN HEX THE
                 THE STARTING POSITION OF CORE DUMP.  THE SECOND  AR-
                 GUMENT SPECIFIES THE LENGTH OF CORE DUMP. IF  IT  IS
                 OMITTED 4 BYTES OF MAIN MEMORY IS RETURNED. THE CORE
                 FUNCTION TAKES ONLY ONE INTEGER ARGUMENT WHICH TELLS
                 THE  START  ADDRESS  OF MAIN MEMORY, AND RETURNS THE
                 CONTENTS OF 4 BYTES STARTING AT THAT LOCATION AS  AN
                 INTEGER.

             W.  XLATE FUNCTION TRANSLATES ITS FIRST  ARGUMENT  IN  A
                 FASHION SPECIFIED BY THE SECOND AND THIRD ARGUMENTS.
                 THE  CHARACTERS  SPECIFIED  IN  THE  SECOND ARGUMENT
                 ARE TRANSLATED TO THE RESPECTIVE CHARACTERS  IN  THE
                 THIRD ARGUMENT.  IF  THE  THIRD  ARGUMENT IS SHORTER
                 THAN THE SECOND, THE CHARACTERS  SPECIFIED  IN   THE
                 SECOND ONE WITH NO CORRESPONDING   TRANSLATIONS  ARE
                 DELETED.

             X.  THE EXPAND FUNCTION RETURNS ITS ARGUMENT EXPANDED BY
                 INSERTING BLANKS BETWEEN EACH CHARACTER.

             Y.  EXAMPLES:  SET VALUE W0 FIRST+5 *(DELTA+W5)
                            SET VALUE S0 GROUP||'.'||USER||'.LIB'
                            SET VAL S0 EXPAND('HELLO')
                            SET VAL S5 XLATE('ABCDE','ABCD','XY')
                            SET VAL S0 TDUMP('000010',4)

         2.  SHOW VALUE <EXP>(S)

             A.  PRINT VALUE(S) FOR EXP(S)

             B.  MULTIPLE  EXPRESSIONS  ARE  ALWAYS  SEPARATED  BY  A
                 BLANK.    STRING   EXPRESSIONS   ARE   ENCLOSED   IN
                 APOSTROPHES.

             C.  EXAMPLES:  SHOW VALUE W0+3,W4,S0||'ABC',N5-12
                            SHOW VALUE DISPLAY('ABCD')

     B.  READ COMMAND

         1.  READ VALUE <VARIABLE>(S)
             READ VALUE <VARIABLE>(S) PROMPT <STRING>

             A.  PROMPT    FOR    VALUE(S)     OF     <SVARIABLE>(S),
                 <NVARIABLE>(S)   OR   <WVARIABLE>(S).   UP  TO  FIVE
                 VARIABLES MAY BE READ BY ONE READ VALUE COMMAND, AND
                 THE VALUES ARE ENTERED AS <EXP>(S).

             B.  STRINGS MUST BE ENTERED WITH QUOTES.  THE QUOTES ARE
                 STRIPPED AND ANY PAIRS OF QUOTES WITHIN  THE  STRING
                 WILL  BECOME  A SINGLE QUOTE.  ANY NEEDED CONVERSION
                 OF  THE  <EXP>  TO  THE  TYPE  OF  THE  VARIABLE  IS
                 PERFORMED AUTOMATICALLY.

             C.  IF THE INPUT DOES NOT CONTAIN AS MANY EXPRESSIONS AS
                 VARIABLES  GIVEN  IN  THE  COMMAND,  THE   REMAINING
                 <SVARIABLE>(S)  ARE  SET  TO  NULL AND THE REMAINING
                 <NVARIABLES>(S) OR <WVARIABLE>(S) ARE SET TO 0.

             D.  IF  THE  PROMPT  OPTION IS USED THE STRING FOLLOWING
                 THE KEYWORD PROMPT IS PROMPTED, OTHERWISE 'ENTER? '.

             E.  EXAMPLES:  READ VALUE W0,W2,S0
                            READ VALUE N8

         2.  READ STRING <SVARIABLE>
             READ STRING <SVARIABLE> PROMPT <STRING>

             A.  PROMPT FOR VALUE OF SVARIABLE

             B.  THE ENTIRE LINE ENTERED IS ASSIGNED TO  THE  STRING.
                 QUOTES   BECOME  SIMPLY  ANOTHER  CHARACTER  IN  THE
                 STRING.

             C.  IF  THE  PROMPT  OPTION IS USED THE STRING FOLLOWING
                 THE KEYWORD PROMPT IS PROMPTED, OTHERWISE 'ENTER? '.

             D.  EXAMPLE:  READ STRING S1

         3.  READ STRING <SVARIABLE> USING <LINENO> COLUMNS <COLUMN(S)>

             A.  SET STRING VARIABLE TO SPECIFIED PART OF ACTIVE FILE
                 LINE.

             B.  THE USING AND COLUMNS OPTIONS ARE PROCESSED  IN  THE
                 SAME  WAY AS THESE OPTIONS ARE IN THE CHANGE COMMAND
                 EXCEPT THAT ONLY ONE LINE MAY BE SPECIFIED.

             C.  EXAMPLES:  READ STRING S1 USING LAST
                            READ STRING S3 USING 4 COLUMN 6
                            READ STRING S0 USING * COLUMNS 1/15

     C.  SET AND SHOW ESCAPE COMMANDS

         1.  THE PRE-PROCESSOR DESCRIBED IN SECTION II BELOW  USES  A
             CHARACTER CALLED THE ESCAPE CHARACTER IN ORDER TO SIGNAL
             THAT  TEXT SUBSTITUTION SHOULD BE MADE IN A COMMAND LINE
             BEFORE WYLBUR EXECUTES IT.  IF NO ESCAPE  CHARACTER  HAS
             BEEN  SET,  THE  PRE-PROCESSOR  DOES NOT PROCESS COMMAND
             LINES  BEFORE  EXECUTION.   THE  ESCAPE   CHARACTER   IS
             INITIALLY  NULL SO THE PRE-PROCESSOR IS NEVER USED UNTIL
             YOU SET AN ESCAPE CHARACTER.

         2.  SET ESCAPE='<CHARACTER>'

             A.  THE PRE-PROCESSOR WILL USE <CHARACTER> AS THE ESCAPE
                 CHARACTER.   SETTING  THE  ESCAPE  CHARACTER  TO  ''
                 (NULL) TURNS OFF THE  PRE-PROCESSOR.   NORMALLY  THE
                 QUOTES  CAN  BE  OMITTED.   HOWEVER, SOME CHARACTERS
                 SUCH AS (),;'"= BLANK AND  THE  LOWER  CASE  LETTERS
                 MUST  BE  TYPED  IN QUOTES IF THEY ARE TO BE USED AS
                 THE ESCAPE CHARACTER.

             B.  EXAMPLES: SET ESCAPE '%'
                           SET ESCAPE %
                           SET ESCAPE ''
                           SET ESCAPE

         3.  THE  CURRENT  VALUE  OF  THE  ESCAPE  CHARACTER  CAN  BE
             DISPLAYED AT ANY TIME BY USING THE COMMAND SHOW ESCAPE.

     D.  SET AND SHOW SKIP COMMANDS

         1.  THE PRE-PROCESSOR ALSO USES A  SECOND  CHARACTER  CALLED
             THE  SKIP  CHARACTER  IN  ORDER  TO  ALLOW  YOU TO ENTER
             COMMAND LINES THAT WILL HAVE AN ESCAPE OR SKIP CHARACTER
             IN IT AFTER THE  PRE-PROCESSOR  HAS  FINISHED  ANY  TEXT
             SUBSTITUTION.    THE   CHARACTER   FOLLOWING   THE  SKIP
             CHARACTER IN A  COMMAND  LINE  IS  ALWAYS  LEFT  IN  THE
             COMMAND LINE BY THE PRE-PROCESSOR.  THE INITIAL VALUE OF
             THE SKIP CHARACTER IS NULL.

         2.  SET SKIP='<CHARACTER>'

             A.  THE PRE-PROCESSOR WILL USE <CHARACTER> AS  THE  SKIP
                 CHARACTER.   IF  THE  ESCAPE  CHARACTER IS NULL, THE
                 SKIP CHARACTER IS IGNORED.  QUOTES  CAN  BE  OMITTED
                 FOR  THE  SKIP  CHARACTER  JUST  AS  FOR  THE ESCAPE
                 CHARACTER.

             B.  EXAMPLES:  SET SKIP $
                            SET SKIP

         3.  THE CURRENT VALUE OF THE SKIP CHARACTER CAN BE DISPLAYED
             AT ANY TIME BY USING THE COMMAND SHOW SKIP.

     E.  SET AND SHOW RESCAN COMMANDS

         1.  THE PRE-PROCESSOR CAN BE DIRECTED  TO  RESCAN  ANY  TEXT
             THAT IT SUBSTITUTES.  THIS COULD LEAD TO INFINITE RESCAN
             IF AN ERROR IS MADE.  THEREFORE, A RESCAN LIMIT HAS BEEN
             DEFINED  TO FORCE A STOP SO THAT INFINITE RESCANS CANNOT
             OCCUR.  THE RESCAN COUNT IS INITIALLY SET TO 5.

         2.  RESCANS OCCUR ONLY WHEN  A  PAIR  OF  ESCAPE  CHARACTERS
             PREVENTS   THE   SCAN   POINTER  FROM  MOVING  OVER  THE
             SUBSTITUTED VALUE.  THE RESCAN IS BEGUN AT THE START  OF
             THE  SUBSTITUTED TEXT, NOT AT THE START OF THE LINE (SEE
             II.A.1 BELOW).

         3.  SET RESCAN=<INTEGER>

             A.  THIS SETS THE NUMBER OF RESCAN SUBSTITUTIONS ALLOWED
                 BEFORE THE PRE-PROCESSOR TERMINATES THE SCAN.

             B.  EXAMPLE:  SET RESCAN 10

         4.  THE CURRENT RESCAN LIMIT CAN BE DISPLAYED AT ANY TIME BY
             USING THE COMMAND SHOW RESCAN.

 II. ADDITIONS

     A.  PRE-PROCESSOR

         1.  THE PRE-PROCESSOR SCANS ALL WYLBUR COMMANDS, LOOKING FOR
             EITHER (OR  BOTH)  OF  TWO  SIGNIFICANT  USER-CONTROLLED
             CHARACTERS, THE ESCAPE CHARACTER AND THE SKIP CHARACTER.
             IF  NEITHER  OF  THESE  TWO CHARACTERS IS PRESENT IN THE
             TEXT GIVEN TO THE  PRE-PROCESSOR,  NO  CHANGE  IS  MADE;
             OTHERWISE, THERE ARE FIVE CASES (DESCRIBED IN THE FORMAT
             <TEXT  INTO  THE  PRE-PROCESSOR>  ->  <TEXT  OUT  OF THE
             PRE-PROCESSOR>, WHERE '%' IS ASSUMED TO  BE  THE  ESCAPE
             CHARACTER,  '$'  IS ASSUMED TO BE THE SKIP CHARACTER AND
             '|' DENOTES THE SCAN POINTER):

             A.  |%<VARIABLE><TEXT> -> <VALUE>|<TEXT>

             B.  |%(<EXP>)<TEXT> -> <VALUE>|<TEXT>

             C.  |%%<VARIABLE><TEXT> -> |<VALUE><TEXT>

             D.  |%%(<EXP>)<TEXT> -> |<VALUE><TEXT>

             E.  |$<CHARACTER><TEXT> -> <CHARACTER>|<TEXT>

         2.  ANY SUBSTITUTIONS OR CHANGES TO A COMMAND ARE MADE  EACH
             TIME  THE COMMAND IS EXECUTED.  IF THE COMMAND CAME FROM
             A FILE, THE FILE IS NOT CHANGED;  ONLY  A  COPY  OF  THE
             COMMAND IS CHANGED AND THEN EXECUTED.

         3.  ALL SUBSTITUTIONS ARE COMPLETED BEFORE  THE  COMMAND  IS
             EXECUTED.    NO  SUBSTITUTIONS  ARE  MADE  OR  EVALUATED
             DYNAMICALLY AS THE COMMAND IS EXECUTED.

         4.  THE  TERSE/VERBOSE  MODES  OF  TYPED  INPUT   AND   EXEC
             PROCESSING  CONTROL WHETHER THE CHANGED COMMAND IS TYPED
             BEFORE EXECUTION.  IF THE MODE IS TERSE FOR  THE  SOURCE
             OF THE COMMAND, THE CHANGED COMMAND IS NOT TYPED.  IF IT
             IS VERBOSE, THE CHANGED COMMAND IS TYPED.

         5.  THERE IS NO OVERHEAD BEFORE  COMMAND  EXECUTION  IF  THE
             ESCAPE  CHARACTER  IS  NULL.   IF  THERE  IS  AN  ESCAPE
             CHARACTER,  A  TRANSLATE AND TEST IS DONE ON THE COMMAND
             LINE TO LOCATE AND PROCESS  ANY  ESCAPE  CHARACTERS  AND
             SKIP  CHARACTERS.  IF THE TEXT AFTER AN ESCAPE CHARACTER
             IS NOT A  PREPROCESSOR  VARIABLE  OR  AN  EXPRESSION  IN
             PARENTHESES,  THERE WILL BE NO SUBSTITUTION AND THE TEXT
             (INCLUDING THE ESCAPE CHARACTER) WILL NOT BE CHANGED.

     B.  IF COMMAND

         1.  SYNTAX:  IF ( <EXP> <RELOP> <EXP> ) <COMMAND>

         2.  THE RELATIONAL OPERATORS (<RELOP>) ALLOWED ARE  EQ,  NE,
             LT,  LE, GT, AND GE WHICH CORRESPOND TO TESTS FOR EQUAL,
             NOT EQUAL, LESS THAN, LESS THAN OR EQUAL, GREATER  THAN,
             AND GREATER THAN OR EQUAL.

         3.  THE IF COMMAND EVALUATES THE  RELATIONAL  EXPRESSION  IN
             PARENTHESES.   IF  THE  RESULT  IS  TRUE,  THE <COMMAND>
             FOLLOWING THE PARENTHESES IS EXECUTED.  IF THE RESULT IS
             FALSE, THE <COMMAND> IS SKIPPED WITHOUT INSPECTION.

         4.  IF CURRENT, NEXT, AND/OR PREVIOUS ARE  USED  IN  THE  IF
             EXPRESSIONS,  NO  EXEC  BREAK WILL OCCUR IF THEY ARE NOT
             SET OR DO NOT EXIST.  INSTEAD, THEY WILL  BE  GIVEN  THE
             VALUE  -1.000 TO ALLOW YOU TO TEST WHETHER THEY EXIST OR
             NOT.

         5.  IF  THE  <EXP>S ARE BOTH LINE NUMBERS OR BOTH  INTEGERS,
             THE VALUES ARE COMPARED ALGEBRAICALLY.  IF ONE IS A LINE
             NUMBER  AND  ONE IS AN INTEGER, THE INTEGER IS CONVERTED
             TO  A  LINE  NUMBER  AND   THE   VALUES   ARE   COMPARED
             ALGEBRAICALLY.    OTHERWISE,   A   LOGICAL   COMPARE  IS
             PERFORMED  AFTER  CONVERTING BOTH <EXP>S TO  STRINGS  OF
             THE  SAME  LENGTH  AND/OR BY ADDING BLANKS TO THE END OF
             THE SHORTER STRING.

         6.  EXAMPLES:  IF (W0 LT 0) COPY 'X' IN 1/20 TO 3000
                        IF (W1 EQ LAST-5) EXEC 35

 III.SAMPLE SESSION SHOWING USE OF ESCAPE CHARACTER AND ARITHMETIC

     ? SHOW ESCAPE
     NO ESCAPE CHAR
     ? SET VALUE S0 'TSOWK1'
     ? SHOW VALUE S0
     'TSOWK1'
     ? SHOW SPACE ON &S0
     &S0   : INVALID VOLUME.
     ? SET ESCAPE &
     ? SHOW SPACE ON &S0
     TSOWK1
     1193 TRKS, 143 EXTENTS
     ? SHOW ESCAPE
     & - ESCAPE CHAR
     ? SET VERBOSE
     COMMAND? SHOW SPACE ON &S0
     SHOW SPACE ON TSOWK1
     TSOWK1
     1193 TRKS, 143 EXTENTS
     COMMAND? SET ESCAPE
     COMMAND? SHOW SPACE ON &S0
     &S0   : INVALID VOLUME
     COMMAND? SHOW ESCAPE
     NO ESCAPE CHAR
     COMMAND? SHOW VALUE 10/3 10./3 NCONVERT(10./3)
     3 3.333 3
     COMMAND? SHOW VALUE 1 * 1, .01 * .01, 1/2, 1./2
     1 0.000 0 0.500

 IV. EXEC FILE EXAMPLES

     A.  EXEC FILE FOR CHANGING STRINGS OF CHARACTERS

         3  COMMENT CHANGE STRING S1 TO S2 IN LINE W0
         4  SET EXEC VERBOSE LOG; THIS LETS YOU SEE WHAT'S HAPPENING
         5  SET ESCAPE ''; TURN OFF ESCAPE CHARACTER
         6  READ VALUE S1,S2,W0
         7  IF (W0 EQ 0) EXEC 6 PAUSE
         8  SET ESCAPE %; TURN ESCAPE CHARACTER ON TO SUBSTITUTE
         9  CH '%S1' TO '%S2' IN %W0
        10  EXEC 5

     B.  EXEC FILE FOR FINDING A COLUMN

         1  SET EXEC NOLOG TERSE
         4  COMMENT FIND COLUMNS OF A STRING IN A SPECIFIED LINE
         5  COMMENT WHERE S0 IS THE STRING, W0 THE LINE
         6  SET ESCAPE; TURN OFF ESCAPE CHAR.
         7  READ VALUE S0,W0
         8  IF (S0 EQ '') EXEC CLEAR; STOP IF NOTHING ENTERED
         9  SET ESCAPE %; SET THE ESCAPE CHAR TO DO SUBSTITUTIONS
        10  POINT %W0 NOLIST; SEE IF LINE W0 EXISTS
        11  IF (* LT 0) EXEC 19; NO LINE IF * WAS NOT SET
        12  READ STRING S1 USING *
        13  SET VALUE W1 INDEX(S1,S0)
        14  IF (W1 EQ 0) EXEC *+3
        15  SHO VALUE W1 W1+SIZE(S0)-1
        16  EXEC 6
        17  COMMENT '%S0' NOT IN LINE %W0
        18  EXEC 6
        19  COMMENT LINE %W0 NOT IN FILE
        20  EXEC 6

     C.  EXEC FILE FOR PREPARING TO ASSEMBLE A FILE

         1  SET EXEC NOLOG TERSE
         2  ; THIS EXEC FILE WILL REPLACE LABELS IN AN EXEC FILE
         3  ; WITH THE APPROPRIATE LINE NUMBER. LABELS MUST BE
         4  ; OF THE FORM LABELNN WHERE NN IS A 2-CHARACTER FIELD
         5  ;
         8  IF(LAST NE 0)EXEC 12; BRANCH IF FILE TO ASSEMBLE
         9  COMMENT ** ENTER USE FOR ACTIVE FILE **
        10  READ
        11  EXEC 8; GO MAKE SURE FILE WAS ENTERED
        12  SET VALUE W0 0
        13  COMMENT ** BEGIN ASSEMBLY **
        14  COMMENT
        15  SET ESCAPE &
        16  SET LENGTH 132
        17  POINT 'LABEL' 1/5 (1) IN &W0/LAST NOL; FIND NEXT LABEL
        18  IF(* LT 0)EXEC 33; CHECK FOR END OF LABELS
        19  READ STRING S0 USING *;PUT THE LINE IN A STRING VARIABLE
        20  SET VALUE W0 *;SAVE CURRENT LINE NUMBER
        21  IF(SIZE(S0) LT 7)EXEC 31;CHECK FOR FUNNY LINE
        22  SET VALUE S1 SUBSTR(S0,1,7);PICK OFF LABEL FIELD
        23  CH 1/7 TO '' IN &W0 NOLIST; DELETE LABEL FIELD ON LINE
        24  CH ' '1 TO '' IN &W0 NOL; ALSO DELETE BLANK AFTER LABEL
        25  POINT '&S1' 1/7 (1) IN &W0/LAST NOL; SEE IF DUP LABEL
        26  IF(* GT 0)COMMENT &S1 IS DUPLICATELY DEFINED
        27  CH '&S1' TO '&W0' IN ALL NOL; REPLACE LABEL WITH LINENO
        28  IF(* LT 0)COMMENT &S1 IN LINE &W0 IS UNREFERENCED
        29  IF(* GE 0)COMMENT REPLACE &S1 WITH LINE NO. &W0
        30  EXEC 17;GO FIND NEXT LABEL
        31  SET VALUE W0 NEXT;SKIP PAST GARBAGE LINE
        32  IF(W0 GE 0)EXEC 17
        33  P 'LABEL' NOL; FIND UNDEFINED LABELS
        34  IF( * LT 0)EXEC 38
        35  COMMENT
        36  COMMENT LINES BELOW REFER TO UNDEFINED LABELS
        37  L 'LABEL';LIST MISSING LABELS
        38  COMMENT
        39  COMMENT ** END ASSEMBLY **
        40  SET ESCAPE
        41  EXEC CLEAR
=EXINTRO
)F
 INTRODUCTION TO EXEC FILES

          IN ADDITION TO THE ACTIVE FILE, WYLBUR HAS A  FACILITY
          CALLED THE EXEC (EXECUTE) FILE.  THE EXEC FILE DIFFERS
          FROM THE ACTIVE FILE IN SEVERAL WAYS.  ITS FUNCTION IS
          TO  PERFORM  A  SERIES  OF COMMANDS SEQUENTIALLY (IN A
          USER-SPECIFIED ORDER).  USERS OFTEN FIND IT  NECESSARY
          TO   PERFORM   THE  SAME  SERIES  OF  WYLBUR  COMMANDS
          REPEATEDLY.  IF SUCH A SERIES OF COMMANDS IS COLLECTED
          INTO AN  ACTIVE  FILE  AND  SAVED,  IT  IS  THEREAFTER
          NECESSARY TO TYPE IN AN EXEC COMMAND ANY TIME YOU WISH
          TO  EXECUTE  ALL  THOSE COMMANDS.  ANY WYLBUR FILE MAY
          BECOME ("BE MOVED INTO") THE EXEC FILE, AS LONG AS  IT
          DOES  NOT  EXCEED  3  WYLBUR PAGES (SEE THE SHOW PAGES
          COMMAND).  IF AN ILLEGAL COMMAND IS  GIVEN  WITHIN  AN
          EXEC   FILE,   THE  EXECUTION  OF  THE  FILE  WILL  BE
          INTERRUPTED.

 CREATING AN EXEC FILE

          TO CREATE AN EXEC FILE, ENTER COLLECT MODE  AND  ENTER
          ONE COMMAND PER LINE.  THE COMMANDS WILL EVENTUALLY BE
          EXECUTED  IN  THE ORDER IN WHICH THEY ARE ENCOUNTERED,
          SO THE ORDER  IN  WHICH  THEY  ARE  COLLECTED  MAY  BE
          SIGNIFICANT.  ANY VALID WYLBUR COMMAND MAY OCCUR IN AN
          EXEC FILE, AND EACH LINE WILL BE TREATED AS A COMMAND.

          FOR EXAMPLE, IF YOU USUALLY ENTER THE SAME  SERIES  OF
          COMMANDS EACH TIME YOU SIGN ON TO WYLBUR ("SET TERSE",
          "SET  VOLUME,"  "SET  TABS," "SET LENGTH" ), IT MAY BE
          MORE CONVENIENT TO CREATE A FILE CONSISTING  OF  THESE
          COMMANDS AND SAVE IT IN YOUR LIBRARY:

         COMMAND? COLLECT (CR)
              1.  ? SET TERSE (CR)
              2.  ? SET VOLUME TSOWK2 (CR)
              3.  ? SET TABS 10 20 30 50 NOVERIFY (CR)
              4.  ? SET LENGTH 132; IS THIS TOO LONG? (CR)
              5.  ? *** (ATTN)
        COMMAND? SAVE #SIGNON
        MEMBER SIGNON SAVED IN @@@@@.LIB
        COMMAND?



          THUS SAVED, IT MAY BE ACCESSED AS NEEDED, WHENEVER YOU
          WANT TO EXECUTE THOSE COMMANDS.

          NOTE THAT IN LINE 4 OF THE PREVIOUS EXAMPLE, THERE  IS
          A  SEMI-COLON  FOLLOWED  BY  THE  WORDS  "IS  THIS TOO
          LONG?".  A SEMI-COLON STOPS  THE  SCAN  OF  A  COMMAND
          LINE; ANYTHING FOLLOWING IT IS A COMMENT.

          WITH THIS BASIC EXAMPLE, YOU WILL  BE  ABLE  TO  BEGIN
          USING  EXEC FILES AS WELL AS ATTEMPT TO UNDERSTAND THE
          MORE SOPHISTICATED EXAMPLES OF EXEC  FILES  INTRODUCED
          LATER.

=EXADVANC
          THIS IS A SAMPLE OF A MORE ADVANCED EXEC FILE THAN THE
          SAMPLE SHOWN IN THE ENTRY "EXINTRO".  BEFORE TRYING OR
          DURING THE PROCESS OF UNDERSTANDING THIS EXAMPLE,  YOU
          SHOULD  BE  FAMILIAR  WITH THE CONTENTS OF THE ENTRIES
          "PREPROC1 AND PREPROC2".

          THIS SAMPLE IS A WORKABLE EXEC FILE  USED  TO  JUSTIFY
          PARAGRAPHS  OF  DATA.  TO USE THIS EXEC FILE YOU WOULD
          GO LIST YOUR DATA AND MAKE NOTE OF  THE  STARTING  AND
          ENDING  LINE  NUMBERS OF EACH PARAGRAPH.  WYLBUR WOULD
          THEN PROMPT WITH "ENTER FIRST # ", "ENTER  LAST  #  ",
          AND  "ENTER  INDENT " AND THEN LOOP BACK TO THE PROMPT
          "ENTER FIRST # ".  NOTE......THE ONLY WAY  (AS  CODED)
          TO GET OUT OF THE LOOP IS TO HIT BREAK OR ATTN.

          THE SAMPLE EXEC FILE  IS  LISTED,  THEN  EACH  OF  THE
          COMMANDS ARE EXPLAINED ONE BY ONE.

        1.  SET EXEC NOLOG
        2.  SET EXEC TERSE
        3.  READ STRING S9 PROMPT 'ENTER FIRST # '
        4.  IF (0 NE VERIFY (S9,'0123456789.')) EXEC 3
        5.  SET VAL W1=S9 ; COULD ALSO BE @ INSTEAD OF SET VAL
        6.  READ STRING S9 PROMPT 'ENTER LAST # '
        7.  IF (0 NE VERIFY (S9,'0123456789.')) EXEC 6
        8.  SET VAL W2=S9 ; COULD ALSO BE @ INSTEAD OF SET VAL
        9.  READ STRING S9 PROMPT 'ENTER INDENT '
        10. IF (0 NE VERIFY (S9,'0123456789')) EXEC 9
        11. SET VAL N1=S9 ; COULD ALSO BE @ INSTEAD OF SET VAL
        12. SET ESC %
        13. JUS %W1/%W2 INDENT %N1 EVEN LEN 64
        14. EXEC 3

          LINE 1 TELLS  WYLBUR  THAT  HE  IS  NOT  TO  LIST  THE
          COMMANDS  AS  THEY  ARE EXECUTED.  LINE 2 TELLS WYLBUR
          THAT LINES  THAT  GET  EXPANDED  BY  THE  PREPROCESSOR
          (ENTRY "PREPROC1") NEED NOT BE LISTED AT THE TERMINAL.
          LINE  3  TELLS WYLBUR TO PROMPT FOR A VALUE THAT IS TO
          BE ASSIGNED TO GLOBAL VARIABLE S9.  LINE 4 IS A SAMPLE
          OF THE "IF"  COMMAND  THAT  VERIFIES  THAT  THE  VALUE
          ASSIGNED  TO  S9  IS  VALID NUMERIC LINE NUMBER AND IF
          THIS IS NOT TRUE, EXECUTION IS TO TAKE PLACE  STARTING
          WITH  LINE  3 AGAIN.  IF TRUE, EXECUTION WILL CONTINUE
          WITH LINE 5.  SINCE THE VALUE SPECIFIED  IN  REPLY  TO
          THE  PROMPT  "ENTER  FIRST # " AND ASSIGNED TO S9 IS A
          VALID WYLBUR LINE NUMBER, WE CAN ASSIGN THAT VALUE  TO
          THE  GLOBAL  WYLBUR LINE NUMBER VARIABLE W1 AND RE-USE
          S9.  THIS IS THE PURPOSE OF LINE 5.  NOTE THE  COMMENT
          (FOLLOWING  THE ";") ON LINES 5, 8, 11.  "SET VAL" MAY
          BE SHORTENED TO "@".  LINES 6-8 ARE A REPEAT OF  LINES
          3-5  FOR  THE  ENDING LINE NUMBER WITH THE VALUE BEING
          ASSIGNED TO W2.  LINE 9 AGAIN  PROMPTS  FOR  A  NUMBER
          EXCEPT  THIS  TIME THE NUMBER IS AN N VALUE ASSUMED TO
          BE AN INTEGER.  LINE 10 VERIFIES THAT THE NUMBER IS  A
          VALID  INTEGER.  NOTE THE DIFFERENCE BETWEEN THIS "IF"
          COMMAND AND THE "IF" COMMANDS IN LINES 3 AND  6.   THE
          DIFFERENCE   IS   THE  PERIOD  IN  THE  QUOTED  STRING
          FOLLOWING  THE  WORD  "VERIFY   (S9,".    THIS   TAKES
          ADVANTAGE  OF  THE PREPROCESSOR RULE THAT "MIXED TYPES
          OF OPERANDS (LINE NUMBERS AND INTEGERS) ARE  CONVERTED
          BEFORE   THE  COMPARISON  TAKES  PLACE.   THE  INTEGER
          OPERAND IS CONVERTED TO A  LINE  NUMBER".   THIS  RULE
          APPLIES  IN THE FIRST TWO "IF" COMMANDS BUT NOT IN THE
          LAST "IF" BECAUSE BOTH OF  THE  OPERANDS  ARE  OF  THE
          INTEGER FORMAT ALREADY.  THE VALUE ENTERED, IF A VALID
          INTEGER, IS ASSIGNED TO THE GLOBAL INTEGER VARIABLE N1
          IN  LINE 11.  LINE 12 SETS THE ESCAPE CHARACTER TO "%"
          TO INFORM WYLBUR THAT PREPROCESSING IS  NEEDED.   LINE
          13  ISSUES  THE  COMMAND "JUSTIFY" .  WHEN WYLBUR SEES
          THE  ESCAPE  CHARACTERS  PRESENT  IN  THE   LINE,   HE
          AUTOMATICALLY   CONVERTS   THE  "%W1,  %W2,  AND  %N1"
          VARIABLES TO THE VALUES ASSIGNED BEFORE EXECUTING  THE
          COMMAND.   AFTER  CONVERSION  THE  COMMAND  (IF  W1=1,
          W2=10,  N1=5)  WOULD  READ "JUS 1/10 INDENT 5 EVEN LEN
          64".  LINE 14 IS A  SAMPLE  OF  AN  EXEC  FILE  BRANCH
          INSTRUCTION  AND WILL CAUSE EXECUTION TO CONTINUE WITH
          LINE 3.

          NOTE.......A MORE EFFICIENT WAY TO DO THIS  EXEC  FILE
          WOULD  HAVE  BEEN  TO HAVE LINE 12 CODED AFTER LINE 2.
          THIS WOULD PREVENT WYLBUR FROM HAVING TO EXECUTE  THAT
          COMMAND  EVERY  TIME  HE LOOPED THROUGH THE EXEC FILE.
          THIS WAS DONE TO SHOW AGAIN THE FACT THAT THE COMMANDS
          ARE EXECUTED EXACTLY AS YOU ENTER THEM.   IT  PAYS  TO
          PLAN BEFORE WRITING EXEC FILES AS THEY ARE, IN EFFECT,
          MINI-PROGRAMS.

./ ADD NAME=WYLBUR
)S SUBCOMMANDS -
          ?  (SHOW VAR.), @ (SET VAR.),  ALIGN,  CATLG,  CENTER,
          CHANGE,   CLEAR,   COLLECT,  COMMENT,  COMPARE,  COPY,
          DELETE, DISPLAY,  EDIT,  EXEC,  IF,  INSERT,  JUSTIFY,
          LIST,  LOAD, LOGOUT, MODIFY, MOVE, NUMBER, POINT, POP,
          PROFILE, PUT, READ, RECATLG, RENAME, REPLACE, RESTORE,
          RUN, SAVE, SCRATCH, SEND, SET, SHOW,  SIGNOFF,  STACK,
          STAX, SUSPEND, TIME, TO, UNCATLG, USE

          IN ADDITION, SOME TSO COMMANDS ARE AVAILABLE  FOR  USE
          UNDER WYLBUR.  THOSE THAT ARE PRESENTLY NOT VALID WILL
          NOT  WORK  PROPERLY, PLEASE INFORM SYSTEMS PROGRAMMING
          AT EXT.  383 OR 384 IF THERE ARE ANY PROBLEMS.

          AT VARIOUS POINTS IN THE HELP ENTRIES  THERE  WILL  BE
          REFERENCES  TO  GENERAL TYPE ENTRIES.....SUCH AS HINTS
          ON EDITING AN ACTIVE FILE....ENTER "HELP EDITING."
)F FUNCTION -
          WYLBUR IS A COMPUTER SYSTEM USED AS A TEXT EDITOR  AND
          REMOTE  JOB  ENTRY FACILITY.  IT IS VERY FAST AND VERY
          POWERFUL.  WYLBUR MAY BE USED ON ANY TYPE OF TERMINAL.

)X SYNTAX -
          WYLBUR HAS TWO MODES OF OPERATION, CALLED COLLECT MODE
          AND COMMAND MODE.

         COLLECT MODE - USED FOR ACCUMULATING LINES OF TEXT FOR
                    A NEW FILE OR ADDING LINES OF  TEXT  TO  AN
                    EXISTING FILE.

         COMMAND MODE - USED TO PERFORM ANY OTHER TASKS SUCH AS
                    EDITING AN EXISTING FILE, OR  SUBMITTING  A
                    JOB TO THE COMPUTER.

          YOU ARE IN COMMAND MODE WHENEVER YOU ARE RESPONDING TO
          A COMMAND PROMPT (COMMAND  ?),  AND  IN  COLLECT  MODE
          WHENEVER  YOU  ARE  RESPONDING TO A LINE NUMBER PROMPT
          (1.  ?).

         UPPER AND LOWER CASE
          YOU MAY USE ALL UPPER OR LOWER CASE  CHARACTERS  OR  A
          COMBINATION.   WYLBUR ALWAYS RESPONDS AND PROMPTS WITH
          UPPER CASE.  CASE IS OF EXTREME  IMPORTANCE  WHILE  IN
          COLLECT   MODE.    IF   AN  ERROR  IS  MADE  WHILE  IN
          COLLECT....THE CASE OF TEXT MAY  BE  CHANGED  VIA  THE
          UPPER/LOWER OPERANDS OF THE CHANGE COMMAND.

         SEPARATORS
         BLANK, COMMA, EQUAL SIGN ( ,=)
          WYLBUR WILL RECOGNIZE A BLANK, COMMA, AND  EQUAL  SIGN
          AS  EQUIVALENT SEPARATORS IN ANY COMMAND.  THESE THREE
          LIST COMMANDS ARE EQUIVALENT:

                   COMMAND?  LIST 2,3,4,5
                   COMMAND?  LIST 2 3 4 5
                   COMMAND?  LIST 2=3=4=5

         SEMI-COLON (;)
          A SEMI-COLON STOPS THE SCAN OF A  COMMAND  LINE.   ALL
          FOLLOWING  TEXT IS CONSIDERED A COMMENT.  IF A COMMAND
          LINE BEGINS WITH A SEMI-COLON, THE  WHOLE  LINE  IS  A
          COMMENT.

                   COMMAND?  LIST 2/5 ; EXAMPLE OF LIST COMMAND

         CHANGING MODES
          TO CHANGE  FROM  COMMAND  MODE  TO  COLLECT  MODE,  OR
          VICE-VERSA,  PRESS THE ATTN KEY AS THE FIRST CHARACTER
          IN A LINE.

          THERE IS ANOTHER WAY TO CHANGE FROM COMMAND TO COLLECT
          MODE.  TYPE THE COMMAND COLLECT:

                   COMMAND?  COLLECT (CR)
                     1.    ?

          TO CHANGE FROM COLLECT TO COMMAND MODE, PRESS THE ATTN
          KEY.

         ATTENTION (OR ATTN)
           THIS KEY HAS TWO MAIN FUNCTIONS:
             1. TO CHANGE FROM COLLECT TO COMMAND MODE.
             2. TO ERASE UNWANTED COMMAND LINE.
             3. TO ERASE AN UNWANTED LINE OF INPUT
                WHILE IN COLLECT MODE.  EXAMPLE:

                   COMMAND?  ***(ATTN)
                      1.  ? COLLECT MODE(CR)
                      2.  ?  GARBAGE LINE....***(ATTN)

           WHEN LISTED, THERE WILL BE NO LINE 2.

          WYLBUR HELP ENTRIES DEPART FROM THE IBM  STANDARDS  IN
          THE FOLLOWING RESPECTS:

         1. MANDANTORY OPERANDS ARE ENCLOSED IN "LESS THAN" AND
            "GREATER THAN" SIGNS:
                                    <RANGE>

          2.  OPTIONAL OPERANDS ARE ENCLOSED IN PARENTHESIS  AND
          HAVE ALTERNATE FORMS OF A GIVEN OPERAND LISTED SIDE BY
          SIDE, SEPERATED BY A SLASH (/):
                             (INDENT=/IND=)
=ALIGN=ALIG=ALI=AL=A
)F FUNCTION -

          THE WYLBUR ALIGN COMMAND REARRANGES  THE  CONTENTS  OF
          THE LINES IN THE RANGE SPECIFIED IN THE ACTIVE FILE SO
          THAT  EACH LINE CONTAINS AS MANY WORDS AS POSSIBLE BUT
          NOT MORE THAT "LENGTH" CHARACTERS.  SPLITS IN  A  LINE
          ARE MADE ONLY AT BLANKS.  AFTER THE LINES ARE ALIGNED,
          WYLBUR RENUMBERS THEM ONE BLANK IS INSERTED AFTER EACH
          WORD  UNLESS IT ENDS WITH A PERIOD, EXCLAMATION POINT,
          OR QUESTION MARK, WHICH FORCES TWO BLANKS.

)X SYNTAX -

         ALIGN <RANGE> (LENGTH=N) (MARKER=C) (NUMBER)
               (INDENT=I(+ OR - J)) (EVEN) (SPACE)

         REQUIRED - RANGE
         DEFAULTS - LENGTH = GLOBAL LENGTH PARAMETER, INDENT=0
         ALIAS    - ALIG, ALI, AL, A

)O OPERANDS -

))RANGE -
         MUST BE SPECIFIED AS AN "EXPLICIT RANGE".

))LENGTH=N -
          IF LENGTH IS NOT SPECIFIED IN THE COMMAND, THE CURRENT
          VALUE OF THE GLOBAL LENGTH  PARAMETER  IS  USED.   THE
          MAXIMUM LENGTH PERMITTED IS 133 CHARACTERS.

))MARKER=C -
          THE MARKER OPTION MUST BE SPECIFIED IN THE COMMAND  IF
          YOU  WANT  THIS  FEATURE.   WHEN WYLBUR ENCOUNTERS THE
          MARKER CHARACTER OR A BLANK IN COLUMN ONE OF ANY  LINE
          BEING  ALIGNED,  THAT  LINE  IS  NOT  ALIGNED  AND THE
          ALIGNMENT PROCESS IS RESTARTED AFTER THAT LINE.

))NUMBER -
          IF NUMBER IS SPECIFIED, WYLBUR  RENUMBERS  THE  ENTIRE
          FILE AFTER THE ALIGNMENT PROCESS.

))INDENT=I (+ OR - J) -
          INDENT=I WILL INDENT EACH ALIGNED LINE BY "I"  SPACES.
          INDENT="I"  (+ OR -) "J" WILL FURTHER INDENT PARAGRAPH
          BEGINNINGS "J" SPACES.  IF INDENT  IS  NOT  SPECIFIED,
          INDENT  0+0  IS  ASSUMED;  IF  "J"  IS  NOT SPECIFIED,
          INDENT="I"+0 IS ASSUMED.  UNLESS "EVEN" IS  SPECIFIED,
          ONLY  THOSE  LINES  BEGINNING  IN COLUMN I+J+1 WILL BE
          ALIGNED.

         HANGING INDENTATIONS

          THE SECOND NUMBER FOLLOWING THE KEYWORD INDENT MAY  BE
          NEGATIVE, IN WHICH CASE A HANGING INDENTATION RESULTS.

         COMMAND?  ALIGN 1/3 INDENT 10-4 EVEN LENGTH 30 (CR)

          THIS COMMAND ALIGNS LINES 1 THROUGH  3  INDENTING  THE
          FIRST  LINE  OF EACH PARAGRAPH (10-4=6) SPACES AND ALL
          OTHERS  10  SPACES,  REGARDLESS  OF   THEIR   PREVIOUS
          INDENTATION.

))EVEN -
          A NEW PARAGRAPH IS ASSUMED TO START ONLY AFTER A BLANK
          LINE, AND ALL LINES IN THE <RANGE> ARE ALIGNED ON  THE
          LEFT  MARGIN  TO  THE  COLUMNS SPECIFIED IN THE INDENT
          PARAMETER REGARDLESS OF THEIR PREVIOUS INDENTATION.

))SPACE -
          IF SPACE IS SPECIFIED, THE ALIGNMENT PROCESS  IS  DONE
          AFTER  WYLBUR RESPACES THE LINES SO THAT THERE IS ONLY
          ONE SPACE BETWEEN WORDS AND TWO SPACES AFTER A PERIOD,
          EXCLAMATION POINT, OR QUESTION MARK.  THIS IS THE  WAY
          OF  TELLING  WYLBUR  THAT HE HAS PREVIOUSLY ALIGNED OR
          JUSTIFIED THE DATA.  IF WORKING WITH THIS TYPE OF DATA
          AND THIS OPERAND IS NOT SPECIFIED, BIZARRE RESULTS MAY
          OCCUR.

=CATLG=CATL=CAT
)F FUNCTION -

          THE  WYLBUR  CATLG  COMMAND   IS   USED   TO   CATALOG
          "UNCATALOGED"  DATA  SETS  ON ANY VOLUME THAT IS VALID
          FOR YOUR USE.

)X SYNTAX -

         CATLG <DSNAME> <ON VOLUME/CATLG>

         REQUIRED - DSNAME AND ON VOLUME
         DEFAULTS - VOLUME=CATLG (AND THERE IS NO SUCH DEVICE)
         ALIAS    - CATL, CAT

)O OPERANDS -
))DSNAME -
         ANY VALID DATA SET NAME.  SEE THE ENTRY "DSNAMES".

))ON VOLUME/CATLG -
          THIS IS NOT (IN  THE  STRICT  SENSE  OF  THE  WORD)  A
          REQUIRED  OPERAND.  HOWEVER, IF A VALID VOLUME NAME IS
          NOT GIVEN, THE DEFAULT  VOLUME  OF  "CATLG"  IS  USED.
          THERE  IS  NO  SUCH  VALID  VOLUME  NAME AND THIS WILL
          RESULT IN A CATALOG ERROR.

=CENTER=CENTE=CENT=CEN=CE
)F FUNCTION -
          THE WYLBUR CENTER COMMAND MAY BE USED TO  CENTER  TEXT
          ON  A  LINE.   THE FIRST AND LAST NON-BLANK CHARACTERS
          WILL BE SYMMETRICALLY PLACED  AT  THE  CENTER  OF  THE
          LINE.    BLANKS  IMBEDDED  WITHIN  THE  LINE  ARE  NOT
          CHANGED.

)X SYNTAX -

         CENTER <RANGE> (INDENT=I, LENGTH=J)
                        (INDENT I, LENGTH J)
                           (IND=I, LEN=J)
                            (IND I, LEN J)

   REQUIRED - RANGE
   DEFAULTS - INDENT=0, LENGTH=GLOBAL LENGTH PARAMETER
   ALIAS    - CENTE, CENT, CEN, CE

)O OPERANDS -

))RANGE -
          THE LINE/LINES TO BE CENTERED.  CAN BE SINGLE LINE  #,
          START  #/ END #, OR THE LINE POINTED TO BY THE CURRENT
          LINE POINTER  (TYPED  AS  '*'  AND  SET  AT  ENTRY  TO
          WYLBUR).  REQUIRED OPERAND.

         EXAMPLE:  COMMAND?  CEN * (CR)
                   COMMAND?  CEN 3 (CR)
                   COMMAND?  CEN F/L (CR)
                   COMMAND?  CEN 3/10 (CR)

))INDENT=I OR IND I -
          USED TO CENTER INDENTED MATERIAL.  THE  MATERIAL  WILL
          BE CENTERED BETWEEN THE SPECIFIED INDENTATION (DEFAULT
          IND=0),AND THE LENGTH SPECIFIED.

         EXAMPLE:  COMMAND?  CEN 3 IND 4 LEN 20 (CR)
            OR     COMMAND?  CEN 3 IND=4 LEN 20 (CR)

           THIS WOULD CENTER LINE 3 DATA BETWEEN COLUMNS 4 AND 20.

          WHEN USING THE '=' SIGN FORM OF THIS KEYWORD, THE  '='
          SIGN TAKES THE PLACE OF THE BLANK.


))LENGTH OR LEN -
          USED TO OVERRIDE THE GLOBAL LENGTH PARAMETER  THAT  IS
          SET  WHEN  FIRST  SIGNING  ON  TO  WYLBUR.   THE VALUE
          SPECIFIED THEN BECOMES THE LIMITING VALUE.

         EXAMPLE:  COMMAND?  SHOW LEN (CR)
                   72 - LENGTH
                   COMMAND?  CEN 3 LEN 60 (CR)
            OR     COMMAND?  CEN 3 LEN=60 (CR)

          THIS WOULD CENTER ALL DATA ON LINE 3 BETWEEN COLUMNS 1
          AND 60 RATHER THAN THE DEFAULT OF 1 AND 72.

          WHEN USING THE '=' SIGN FORM OF THIS KEYWORD  THE  '='
          SIGN TAKES THE PLACE OT THE BLANK.

=CHANGE=CHANG=CHAN=CHA=CH
)F FUNCTION -

          NOTE......THIS WYLBUR HELP ENTRY SHOULD BE  USED  ONLY
          IF  YOU  ARE FAMILIAR WITH THE CHANGE COMMAND.  IF YOU
          ARE LEARNING, SEE THE  ENTRY  "CHGLEARN".   THIS  WILL
          SHOW  YOU SAMPLES OF ALL OF THE VARIOUS FORMS AND IS A
          BETTER  LEARNING  ENTRY  BECAUSE  IT  IS   EASIER   TO
          UNDERSTAND.

          THE WYLBUR CHANGE COMMAND IS THE SINGLE MOST  POWERFUL
          COMMAND  IN  WYLBUR.   EVERY  CHANGE COMMAND HAS THREE
          SECTIONS:   POSITION,  REPLACEMENT,  AND  RANGE.   THE
          POSITION IDENTIFIES THE LOCATION WITHIN THE LINE WHICH
          IS TO BE CHANGED.  THE RANGE SPECIFIES WHICH LINES ARE
          TO BE CONSIDERED FOR CHANGING.  YOU MAY OMIT THE RANGE
          SPECIFICATION AND THE DEFAULT RANGE  OF  ALL  WILL  BE
          ASSUMED.   THE REPLACEMENT DESCRIBES WHAT CHANGE IS TO
          BE MADE.  THE COMMAND SEARCHES THE LINES SPECIFIED  IN
          THE  RANGE FOR INSTANCES OF THE POSITION TO BE CHANGED
          AND, WHEN  IT  ENCOUNTERS  ONE,  MAKES  THE  INDICATED
          REPLACEMENT.   AS  EACH LINE IS CHANGED, THE RESULTING
          LINE IS LISTED UNLESS THIS FEATURE IS OVERRIDDEN.

          THERE ARE THREE BASIC FORMS OF THE CHANGE COMMAND  AND
          THEY ARE LISTED BELOW.

         CHANGE (POSITION) TO (REPLACEMENT) IN (RANGE)
         CHANGE (POSITION) IN (RANGE) TO (REPLACEMENT)
         CHANGE (POSITION) IN (RANGE) USING (REPLACEMENT)

)X SYNTAX -


         CHANGE <STRING1> (I/J/K) (N) TO <STRING2> (IN <RANGE>)
                (LIST OPTIONS) (LINE)

         CHANGE (I/J/K) TO <STRING2> (IN <RANGE>) (LINE)
                (LIST OPTIONS)

         CHANGE (<STRING1>) (I/J/K) (IN <RANGE1>) (N) USING
                <RANGE2> (COLUMNS=(M1/M2)) (REPEAT)
                (LIST OPTIONS)

         REQUIRED - VARIABLE (DEPENDS ON THE FORM USED)
         DEFAULTS - LIST, NUMBERED
         ALIAS    - CHANG, CHAN, CHA, CH

)O OPERANDS -

))STRING1 -
          THIS IS THE SEARCH ARGUMENT FOR THE CHANGE COMMAND AND
          SHOULD BE SPECIFIED WITHIN EITHER FORM OF QUOTES.


))I/J/K -
          THIS DEFINES THE COLUMNS IN WHICH TO  SEARCH  FOR  THE
          STRING TO CHANGE.  "I" IS THE STARTING COLUMN.  "J" IS
          THE ENDING COLUMN.  "K" IS THE FILL COLUMN WHICH TELLS
          WYLBUR  NOT TO DISTURB ANY DATA IN COLUMNS PAST COLUMN
          K.   DATA  WILL  NOT  BE  DISTURBED  EVEN  THOUGH  THE
          REPLACEMENT STRING IS LONGER THAN THE SEARCH ARGUMENT.

))N -
          "N" IS USED TO SPECIFY WHAT OCCURENCE  OF  THE  SEARCH
          ARGUMENT  WITHIN  A  LINE IS TO BE CHANGED.  (3) WOULD
          TELL WYLBUR TO CHANGE THE THIRD OCCURENCE.

))STRING2 -
          THIS IS THE REPLACEMENT STRING AND TELLS  WYLBUR  WHAT
          THE  OUTPUT IS TO CONTAIN AFTER THE SEARCH ARGUMENT IS
          SATISFIED.  THIS OPERAND MAY TAKE THE FORM OF  "N  M".
          THIS TELLS WYLBUR TO CHANGE THE SPECIFIED STRING TO AN
          INTEGER  (N)  THAT  IS  INCREMENTED BY (M).  IF (M) IS
          EQUAL TO 1 THIS PORTION OF THE OPERAND MAY BE OMITTED.
          THIS OPERAND MAY ALSO CONTAIN THE WORD "UPPER" OR  THE
          WORD  "LOWER"  AND TELLS WYLBUR THAT YOU WANT THE CASE
          OF THE LETTERS CHANGED TO THE SPECIFIED FORM.   WYLBUR
          WILL  NOT  CHANGE  THE FIRST CHARACTER OF A PARAGRAPH,
          THE FIRST CHARACTER  OF  THE  NEXT  WORD  FOLLOWING  A
          PERIOD,  EXCLAMATION  POINT, OR QUESTION MARK TO LOWER
          CASE.

))IN RANGE -
          RESTRICTS THE SEARCH  TO  SPECIFIC  LINES  WITHIN  THE
          ACTIVE  FILE.  MAY BE SPECIFIED AS "IN ¬'A' 2 IN ALL".
          THIS WOULD TELL WYLBUR TO MAKE THE  SPECIFIED  CHANGES
          IN  ALL  LINES  THAT  DID NOT CONTAIN "A" IN COLUMN 2.
          NOTE.....THE WORD "ALL" MAY BE SUBSTITUTED AS 1/15, OR
          SOME OTHER FORM OF LINE  RANGE,  BUT  MAY  NOT  BE  AN
          ASSOCIATIVE RANGE.

))LIST OPTIONS -
          ANY OF THE VALID LIST  OPTIONS  (DESCRIBED  UNDER  THE
          HELP  ENTRY FOR LIST) ARE VALID OPERANDS.  LIST NUM IS
          THE DEFAULT.

))LINE -
          USED  IN  CONJUNCTION  WITH  THE   "N   M"   FORM   OF
          SPECIFICATION   OF  "STRING2".   THIS  OPERAND  CAUSES
          WYLBUR TO CHANGE  THE  "STRING2"  VALUE  ONLY  BETWEEN
          LINES.  EXAMPLE:

         1.   AAA
         2.   AAA

         COMMAND?  CH 'A' TO 1 1 IN ALL (CR)
         1.   123
         2.   456

          YOU WILL NOTICE THAT THIS COMMAND DID NOT RESTRICT THE
          INCREMENTING AND WYLBUR INCREMENTED BY ONE EVERY  TIME
          HE FOUND A MATCH.  IF THE LINE OPERAND IS USED HE WILL
          INCREMENT  ONLY  ON  THE FIRST OCCURENCE OF THE STRING
          WITHIN THE LINE.  EXAMPLE:

         1.   AAA
         2.   AAA

         COMMAND?  CH 'A' TO 1 1 IN ALL LINE (CR)
         1.   111
         2.   222

))USING -
          INDICATES TO WYLBUR THAT  YOU  ARE  DOING  THE  COLUMN
          REPLACEMENT "USING" FORM OF THE CHANGE COMMAND.

))RANGE2 -
          INDICATES TO WYLBUR WHAT RANGE OF LINES HE IS  TO  USE
          TO  GET  THE REPLACEMENT COLUMNS FROM DURING A "USING"
          FORM  OF  THE  CHANGE  COMMAND.   NOTE.....THE   RANGE
          SPECIFIED (REPLACEMENT RANGE) MAY BE ANY SINGLE SET OF
          CONTIGUOUS LINES.  MULTIPLE SETS ARE NOT ALLOWED.

))COLUMNS=M1/M2 -
          RESTRICTS THE "REPLACEMENT COLUMNS" TO  THE  RANGE  OF
          COLUMNS   SPECIFIED.    MAY   BE  USED  AS  M1/M2,  OR
          "COLUMNS=M1" (WHICH TELLS WYLBUR TO  USE  ALL  COLUMNS
          FROM THE VALUE OF M1 ON TO THE END OF ALL COLUMNS), OR
          "COLUMNS=/M2"  (WHICH  TELLS  WYLBUR  TO USE COLUMNS 1
          THRU THE VALUE SPECIFIED IN M2).

))REPEAT -
          THE CONTENTS OF THE LINES  IN  THE  REPLACEMENT  RANGE
          (RANGE2)  ARE  USED  SUCCESSIVELY AS REPLACEMENTS.  IF
          MORE CHANGES ARE TO BE MADE THAN THERE  ARE  LINES  IN
          THE  REPLACEMENT  RANGE,  THE  REPEAT  OPTION  MAY  BE
          SPECIFIED.   THIS CAUSES WYLBUR TO RECYCLE THROUGH THE
          REPLACEMENT RANGE.

=CLEAR=CLEA=CLE=CL=CLR
)F FUNCTION -

          THE WYLBUR CLEAR COMMAND IS USED TO ERASE THE  CURRENT
          ACTIVE FILE OR THE CURRENT EXEC FILE.

)X SYNTAX -

         CLEAR (ACT/ACTIVE) (EXEC) (TEXT) (NAME) (TABS)

         REQUIRED - NONE
         DEFAULTS - NONE
         ALIAS    - CLEA, CLE, CL, CLR

)O OPERANDS -

))ACT/ACTIVE -
         CLEARS THE ACTIVE FILE.

))EXEC -
         CLEARS THE EXEC FILE.

))TEXT -
         CLEARS THE ACTIVE FILE.

))NAME -
          THE NAME OPTION RESETS THE GLOBAL  USER,  PREFIX,  AND
          MEMBER  FIELDS  TO  THE  DEFAULT SIGNON VALUES.  THESE
          FIELDS ARE USED IN FORMING <DSNAMES>.

))TABS -
          SPECIFYING THIS KEYWORD CLEARS ALL WYLBUR TABS.   THIS
          DOES  NOT CLEAR ANY HARDWARE (TERMINAL) TABS THAT HAVE
          BEEN SET.

=COLLECT=COLLEC=COLLE=COLL=COL=C

)F FUNCTION -

          THE WYLBUR COLLECT COMMAND IS ONE OF THE  METHODS  FOR
          ENTERING  DATA  INTO THE ACTIVE FILE AND IS ONE OF THE
          TWO MODES OF OPERATIONS THAT WYLBUR HAS.

)X SYNTAX -

         COLLECT (STARTING NUMBER) (BY 'NNN') (MERGE) (CLEAR)
                 (NUM/INT/UNN)

         REQUIRED - NONE
         DEFAULTS - STARTING LINE NO.= END, DELTA = 1, NOMERGE,
                    NOCLEAR, NUM
         ALIAS    - COLLEC, COLLE, COLL, COL, C

         NOTE:  THERE IS ALTERNATE FORM OF GETTING INTO
                COLLECT MODE.  WHILE IN COMMAND MODE,
                HIT THE (ATTN) KEY.  THIS SWITCHES FROM
                COMMAND MODE TO COLLECT MODE AND THE
                REVERSE.

)O OPERANDS -

))STARTING NUMBER -
          THE  LINE  NUMBER  THAT  YOU  WISH  WYLBUR  TO   START
          COLLECTING  LINES.   NOTE....THE  FORM  OF  THE NUMBER
          SPECIFIED IMPLIES TO WYLBUR THE 'DELTA'  VALUE  TO  BE
          USED FOR INCREMENTING SUCH AS.....67.001 (TELLS WYLBUR
          TO  INCREMENT  BY  .001)  .....67.01  (TELLS WYLBUR TO
          INCREMENT BY .01) .....67.1 (TELLS WYLBUR TO INCREMENT
          BY .1)...  .....THIS IMPLIED VALUE MAY  BE  OVERRIDDEN
          BY  USE  OF  THE OTHER OPERANDS.  THE VALUE OF 'DELTA'
          (NORMALLY 1.000) IS USED WHEN THE NUMBER SPECIFIED  IS
          A WHOLE INTEGER.  EXAMPLE...COMMAND?  COL 64 (CR).  IF
          YOU  SPECIFY  AS  A  NUMBER,  A  NUMBER THAT CURRENTLY
          EXISTS, WYLBUR WILL INFORM YOU THAT THE LINE  NO.   IS
          ILLEGAL.   IF  NO  LINE NUMBER IS GIVEN IN THE COLLECT
          COMMAND, WYLBUR WILL RESUME COLLECTING AT THE PLACE IT
          LEFT OFF WHEN YOU WERE LAST IN COLLECT MODE.

))BY 'NNN' -
          OVERRIDES DEFAULT DELTA VALUE.   IMPLIED  INCREMENTING
          NUMBER  USED  BY  WYLBUR  TO  FIGURE OUT THE NEXT LINE
          NUMBER WITH WHICH TO PROMPT YOU.

))MERGE -
          PERMITS INTERLEAVING THE COLLECTED LINES WITH EXISTING
          LINES.

))CLEAR -
          YOU MAY  SPECIFY  THAT  THE  ACTIVE  FILE  BE  CLEARED
          (COMPLETELY  ERASED)  AS  YOU  BEGIN  COLLECTING A NEW
          FILE.

))NUM/INT/UNN -
          NUM IS THE DEFAULT AND CAUSES WYLBUR  TO  PROMPT  WITH
          LINE  NUMBERS  WHEN READY TO RECEIVE TEXT.  INT CAUSES
          THE PROMPT TO BE IN INTEGER FORM  AND  UNN  CAUSES  NO
          PROMPTING TO OCCUR.

=COMMENT=COMM=COMME=COMMEN=DISPLAY
)F FUNCTION -
          THE WYLBUR COMMENT COMMAND IS DESIGNED TO BE  USED  IN
          EXEC  FILES TO DISPLAY TEXT AT THE TERMINAL.  IF NOLOG
          IS IN EFFECT, THE COMMENT TEXT IS LISTED  EVEN  THOUGH
          THE OTHER COMMANDS ARE NOT.  EXAMPLE:

                   COMMAND?  LIST EXEC (CR)
                     1.  COMMENT THIS TEXT WILL BE LISTED.
                   COMMAND?  EXEC NOLOG (CR)
                   THIS TEXT WILL BE LISTED.
                   EXEC END
                   COMMAND?

)X SYNTAX -

                   COMMENT <ANY TEXT>

         REQUIRED - NONE
         DEFAULTS - NONE
         ALIAS    - COMM, COMME, COMMEN, DISPLAY

)O
=COMPARE=COMPAR=COMPA=COMP=COM
)F FUNCTION -

          THE WYLBUR COMPARE COMMAND MAY BE USED TO COMPARE  THE
          CONTENTS  OF  TWO  SETS  OF CONSECUTIVE LINES, BOTH OF
          WHICH MUST BE IN THE ACTIVE  FILE.   A  LINE  BY  LINE
          COMPARE  IS MADE OF THE LINE CONTENTS UNTIL THE END OF
          THE ACTIVE FILE IS REACHED OR A COMPARISON FAILS.   IF
          A  COMPARISON  FAILS, YOU ARE NOTIFIED OF THE LINES IN
          WHICH THE FAILURE OCCURS.  IF VERBOSE IS SET, YOU WILL
          RECEIVE A MESSAGE TELLING WHICH LINES DO NOT  COMPARE.
          YOU ALSO BE SHOWN THE TWO LINES.  IF TERSE IS SET, THE
          LINES THAT DO NOT COMPARE WILL NOT BE LISTED.

)X SYNTAX -

         COMPARE <LINENO1> <LINENO2> (COLUMNS (N1/M1)) (LIST OPTIONS)

         REQUIRED - LINENO1 AND LINENO2
         DEFAULTS - NONE
         ALIAS    - COMPAR, COMPA, COMP, COM

)O OPERANDS -

))LIST OPTIONS -
          ANY OF THE LIST  OPTIONS  (DESCRIBED  UNDER  THE  HELP
          ENTRY FOR THE LIST COMMAND) ARE VALID OPERANDS.

))LINENO1 -
          THIS IS THE STARTING LINE NUMBER OF THE FIRST  OF  THE
          RANGES TO BE COMPARED.

))LINENO2 -
          THIS IS THE STARTING LINE NUMBER OF THE SECOND OF  THE
          RANGES TO BE COMPARED.

))COLUMNS N1/M1 -
          IF THE COLUMNS OPERAND IS SPECIFIED,  ONLY  COLUMNS  N
          THROUGH  M  ARE  COMPARED.   IF ONLY "N" IS SPECIFIED,
          N/133 IS ASSUMED.  IF ONLY "M" IS  SPECIFIED,  1/M  IS
          ASSUMED.

=COPY=COP
)F FUNCTION -

          THE WYLBUR COPY COMMAND ALLOWS YOU TO COPY  A  <RANGE>
          OF  LINES  TO  A  PLACE IN THE ACTIVE FILE.  LINES MAY
          COME FROM THE ACTIVE FILE OR  FROM  AN  EXTERNAL  FILE
          THAT  IS IN EDIT FORMAT (THIS INCLUDES THE EXEC FILE).
          EXISTING LINES IN THE ACTIVE FILE MAY NOT BE  REPLACED
          USING THE COPY COMMAND.

          NOTE.....FOR SAMPLES OF VARIOUS FORMS OF COPYING,  SEE
          THE ENTRY "COPYSAMP".

)X SYNTAX -

         COPY (<RANGE>) (EXEC) (N) (TO (LINENO1/END)) (FROM DSNAME)
              (ON (VOLUME/CATLG)) (COMBINE) (USER UUUUU) (SET/NOSET)
              (MERGE) (BY LINENO2) (LIST OPTIONS)

         REQUIRED - VARIOUS DEPENDING ON FORM USED
         DEFAULTS - RANGE=ALL, END, NOSET
         ALIAS    - COP

)O OPERANDS -

))RANGE -
          SPECIFIES THE RANGE OF LINES YOU WISH  TO  BE  COPIED.
          THE  DEFAULT  LOCATION  FOR  RANGE IS THE ACTIVE FILE,
          UNLESS OVERRIDDEN BY OTHER OPERANDS.

))EXEC -
          THIS OPERAND TELLS WYLBUR THAT THE RANGE SPECIFIED  IS
          TO  BE TAKEN FROM THE EXEC FILE.  THE "EXEC" AND "FROM
          DSNAME" OPERANDS ARE MUTUALLY EXCLUSIVE.

))N -
          THIS OPERAND TELLS WYLBUR HOW MANY COPIES OF A  SINGLE
          LINE  YOU WANT.  THE COMMAND "COPY 1 (3) TO END" WOULD
          RESULT IN THREE COPIES OF LINE 1 BEING PLACED  AS  THE
          LAST THREE LINES IN THE ACTIVE FILE.

))TO LINENO1/END -
          THIS OPERAND TELLS WYLBUR WHERE YOU WANT THE  DATA  TO
          BE COPIED TO.  DEFAULT LOCATION IS LAST + DELTA (END).

))BY LINENO2 -
          THIS OPTIONAL OPERAND, SPECIFIES WHAT INCREMENT TO ADD
          TO THE STARTING LINE IN THE "TO"  LOCATION.   IF  THIS
          OPERAND  IS NOT SPECIFIED, THE DEFAULT VALUE IS A 1 IN
          THE LAST SPECIFIED POSITION OF <LINENO1>.  IF THE LAST
          POSITION WAS FOR EXAMPLE 5.07, THEN .01 WOULD  BE  THE
          INCREMENTING VALUE.  IF THE VALUE OF DELTA (DEFAULT OR
          SPECIFIED)  WOULD CAUSE THE COPIED LINES TO INTERLEAVE
          EXISTING  LINES  IN  THE  FILE,  WYLBUR  AUTOMATICALLY
          CALCULATES A NEW VALUE OF DELTA SO  THAT  INTERLEAVING
          DOES  NOT  TAKE  PLACE.  THE MERGE OR COMBINE OPERANDS
          MAY  BE  SPECIFIED  TO  ALLOW  INTERLEAVING.   IF  NOT
          SPECIFIED, WYLBUR SELECTS A DELTA THAT ALLOWS  FITTING
          THE COPIED LINES BETWEEN EXISTING LINES.

))FROM DSNAME -
          THIS OPERAND TELLS WYLBUR THAT  THE  LOCATION  OF  THE
          LINES  TO BE COPIED IS AN EXTERNAL FILE.  THE EXTERNAL
          FILE MUST BE IN EDIT FORMAT.

))ON VOLUME/CATLG -
          THIS  OPERAND  TELLS  WYLBUR  WHAT  VOLUME  THE  "FROM
          DSNAME" IS ON.  IF THIS OPERAND IS NOT SPECIFIED  THEN
          WYLBUR  WILL SEARCH THE VOLUME SPECIFIED BY THE VOLUME
          GLOBAL.

))COMBINE -
          THIS OPERAND ALLOWS WYLBUR TO  INTERLEAVE  LINES  INTO
          THE  ACTIVE  FILE  AND  WHEN  THE "FROM DSNAME" "EXEC"
          OPERAND IS USED.  TO ALLOW INTERLEAVING  WHEN  COPYING
          FROM  ANOTHER PART OF THE ACTIVE FILE, USE THE "MERGE"
          OPERAND.  NOTE...LINE NUMBERS FROM THE  "FROM  DSNAME"
          ARE  USED  IN  A  COMBINE  OPERATION  AND  MUST NOT BE
          PRESENT IN THE ACTIVE FILE.  IF PRESENT, THE OPERATION
          TERMINATES WHEN SUCH A LINE NUMBER IS REACHED.

))USER -
          THIS OPERAND  SPECIFIES  THE  FIRST  QUALIFIER  OF  AN
          EXTERNAL  FILE.   SEE  THE  HELP  ENTRY  FOR "USE" FOR
          ALTERNATE METHODS OF SPECIFYING DSNAMES.

))SET/NOSET -
          THE SET OPTION WILL SET THE GLOBAL PREFIX  AND  MEMBER
          FIELDS  TO  THOSE  SPECIFIED  IN THE COPY COMMAND.  IT
          WILL NOT SET THE "USER" GLOBAL.  THE DEFAULT IS NOSET.

))MERGE -
          THIS OPERAND IS USED WHEN  COPYING  ONE  PART  OF  THE
          ACTIVE  FILE  TO  ANOTHER  PART  AND  INTERLEAVING  IS
          DESIRED.

))LIST OPTIONS -
          ANY OF THE LIST  OPTIONS  (DESCRIBED  UNDER  THE  HELP
          ENTRY FOR LIST) ARE VALID OPERANDS.

=DELETE=DELET=DELE=DEL=D
)F FUNCTION -

          THE WYLBUR DELETE COMMAND ALLOWS YOU TO DELETE (ERASE)
          A RANGE OF LINES.  THE DELETED LINES ARE  ERASED,  NOT
          REPLACED  BY  BLANKS.  THE LINE NUMBERS OF THE DELETED
          LINES ARE ERASED, TOO.

)X SYNTAX -

         DELETE <RANGE> (LIST)

         REQUIRED - RANGE
         DEFAULTS - NOLIST
         ALIAS    - DELET, DELE, DEL, D

)O OPERANDS -

))RANGE -
          YOU MAY DELETE A SINGLE LINE  BY  GIVING  THE  COMMAND
          "DELETE  3.05"  OR  BY SPECIFYING ONLY THE LINE NUMBER
          SUCH AS "3.05".  YOU MAY  DELETE  EXPLICIT  RANGES  OF
          LINES,  SUCH  AS  "DELETE  3.05/6.8".  IF THIS FORM OF
          DELETION IS USED, UP TO 5 DISJOINT RANGES ARE ALLOWED.
          YOU   MAY   ALSO   USE   THE   ASSOCIATIVE   FORM   OF
          SPECIFICATION, SUCH AS "DELETE 'MY DOG' IN  ALL".   IF
          THIS  FORM OF DELETION IS USED AND THE STRING IS SPLIT
          BETWEEN TWO LINES, WYLBUR CAN NOT RECOGNIZE IT.

))LIST -
          THE LIST OPTION ALLOWS YOU TO LOOK AT THE LINES  AFTER
          EACH  IS  DELETED.   IF  YOU  ARE DELETING A RANGE AND
          LISTING IT, YOU HAVE  TIME  TO  STOP  THE  COMMAND  BY
          PRESSING  THE  ATTN  KEY.   THE LINE BEING LISTED WILL
          ALREADY HAVE BEEN DELETED.  YOU ARE CAUTIONED  NOT  TO
          ABBREVIATE  "LIST"  WITH  "L".   "L" STANDS FOR "LAST"
          WHEN USED AS A PARAMTER AND THUS THE LAST LINE OF YOUR
          FILE WOULD BE DELETED AND NO LINES LISTED.

=EDIT=EDI=ED=E
)F FUNCTION -

          THE WYLBUR EDIT  COMMAND  ALLOWS  YOU  TO  CHANGE  THE
          CONTENTS  OF  A  <RANGE>  OF LINES IN THE ACTIVE FILE.
          THERE IS A FULL DISCUSSION OF EDITING UNDER  THE  HELP
          ENTRY  "EDITING"  AND  SOME  HINTS  ON  MORE EFFICIENT
          EDITING UNDER THE HELP ENTRY "EDHINTS".

          WHEN EXECUTED, THE EDIT COMMAND WILL PROMPT  WITH  THE
          DESIGNATED  LINE.   ANY CHARACTER OR SET OF CHARACTERS
          CAN BE REPLACED BY TYPING UNDER AN UNDESIRED CHARACTER
          THE DESIRED REPLACEMENT CHARACTER.  IF A VERTICAL  BAR
          (|)  IS TYPED UNDER A CHARACTER, THEN THE CHARACTER IS
          REPLACED BY A BLANK.  IF A VERTICAL BAR IS TYPED UNDER
          A BLANK, THEN THE VERTICAL BAR APPEARS IN THE TEXT.

)X SYNTAX -

         EDIT (RANGE) (LIST OPTIONS) (SINGLE)

         REQUIRED - NONE
         DEFAULTS - LIST, MULTIPLE PROMPTS, RANGE=ALL, NUM
         ALIAS    - EDI, ED, E


         NOTE:  IF YOU DECIDE THAT THE LINE DOES NOT NEED TO BE
                EDITED, HIT CARRIAGE RETURN IMMEDIATELY AFTER THE
                "EDITS? " PROMPT.  THERE ARE SEVERAL WAYS TO END
                THE EDIT PROCESS.  THESE WAYS ARE LISTED AND
                EXPLAINED UNDER THE OPERAND "TERMINATION".

)O OPERANDS -

))RANGE -
          YOU MAY SPECIFY AN EXPLICIT OR ASSOCIATIVE  RANGE,  OR
          UP TO TEN LINE NUMBERS IN A LIST (RATHER THAN TYPE TEN
          SEPARATE  COMMANDS).   IF  YOU DO NOT SPECIFY A RANGE,
          ALL IS ASSUMED.

))LIST OPTIONS -
          ALL OF THE LIST OPTIONS (DESCRIBED IN THE  HELP  ENTRY
          FOR  LIST)  ARE  VALID  IN THE EDIT COMMAND LINE.  THE
          "NOLIST"  (SHORT  FORM  =  N)  SUPPRESSES  THE  NORMAL
          LISTING  OF  THE  CORRECTED  LINE.   ANOTHER  WAY   OF
          SPECIFYING  THE "NOLIST" OPTION IS TO PLACE THE LETTER
          "N" IN COLUMN 0 OF THE "EDITS?  " PROMPT  LINE.   THIS
          WILL SUPPRESS LISTING FOR THAT LINE ONLY.  IF "NOLIST"
          WAS  SPECIFIED  IN THE ORIGINAL EDIT COMMAND, THIS MAY
          BE OVERRIDDEN BY PLACING THE LETTER "L"  IN  COLUMN  0
          AND  THIS WILL CAUSE LISTING OF THE CORRECTED LINE FOR
          THIS LINE ONLY.  NOTE:  COLUMN 0 DOES  NOT  CORRESPOND
          TO  A COLUMN IN THE LINE BEING EDITED; IT MUST CONTAIN
          ONLY THE VALUES --- BLANK, N, OR L.

))SINGLE -
          WYLBUR WILL PROMPT WITH "EDITS?  " FOR  A  LINE  UNTIL
          ONLY  A  CARRIAGE  RETURN  IS GIVEN IN RESPONSE TO THE
          PROMPT.  THE "SINGLE" OPTION CAN  BE  USED  TO  CHANGE
          THIS  TO ONE PROMPT PER LINE.  THERE IS ANOTHER WAY TO
          INDICATE "SINGLE" TO WYLBUR IF YOU DID NOT SPECIFY  IT
          IN THE EDIT COMMAND.  SIMPLY TYPE @(ATTN) INSTEAD OF A
          CARRIAGE  RETURN AT THE END OF A LINE.  THIS WILL GIVE
          ANOTHER PROMPT FOR THE CURRENT LINE  IF  "SINGLE"  WAS
          SPECIFIED OR TERMINATE PROMPTS FOR THE CURRENT LINE IF
          THE NORMAL MULTIPLE MODE WAS IN EFFECT.

))TERMINATION -
          TO END THE EDIT COMMAND NORMALLY, PRESS  THE  CARRIAGE
          RETURN  AS  THE  FIRST  CHARACTER  IN A LINE AFTER ALL
          EDITING HAS BEEN  DONE.   TO  END  PROMPTING  FOR  THE
          CURRENT  LINE  ONLY,  TYPING  A  "@(ATTN)"  INSTEAD OF
          CARRIAGE RETURN WILL CAUSE THE CHANGES TO BE MADE  AND
          THEN  PROMPTING  FOR  THE  NEXT  LINE  IN  THE <RANGE>
          SPECIFIED.  TYPING A "$(ATTN)" INSTEAD OF  A  CARRIAGE
          RETURN WILL CAUSE THE CHANGES SPECIFIED TO BE MADE AND
          ALL  FURTHER  LINES  IN THE <RANGE> TO REMAIN THE SAME
          AND A RETURN TO COMMAND MODE.  PRESSING THE (ATTN) KEY
          ABORTS ANY CHANGES SPECIFIED IN THE CURRENT  LINE  AND
          RETURNS YOU TO COMMAND MODE.

=EXEC=EXE=X
)F FUNCTION -

          NOTE......THIS ENTRY IS FOR  THOSE  WHO  ARE  FAMILIAR
          WITH  EXEC  FILES....FOR BEGINNERS..ENTER "HELP FILES"
          FOR BASIC  INFORMATION  OF  AN  EXEC  FILE  AND  "HELP
          EXINTRO" FOR AN INTRODUCTION TO USING EXEC FILES.

          WYLBUR CAN EXECUTE A FILE OF COMMANDS FROM  A  SPECIAL
          FILE  CALLED  AN  "EXEC FILE".  BEFORE COMMANDS CAN BE
          EXECUTED FROM THE EXEC FILE, THE FILE MUST BE  LOADED.
          THE EXEC COMMAND IS USED TO MOVE AN EXTERNAL OR ACTIVE
          FILE  INTO  THE  EXEC FILE AND EXECUTE THE COMMANDS OR
          EXECUTE COMMANDS THAT HAVE BEEN PREVIOUSLY  PLACED  IN
          THE  EXEC  FILE.   IF  AN EXTERNAL FILE IS TO BE MOVED
          INTO THE EXEC FILE, THE EXTERNAL FILE MUST BE IN  EDIT
          FORMAT.    ANOTHER   USE   OF  THE  EXEC  FILE  IS  TO
          TEMPORARILY HOLD A SMALL AMOUNT OF DATA THAT IS TO  BE
          MERGED  INTO  ANOTHER FILE.  THE APPROXIMATE AMOUNT OF
          EITHER COMMANDS OR DATA THAT CAN BE HELD IN  THE  EXEC
          FILE  IS  ABOUT  150 LINES (DEPENDING ON THE NUMBER OF
          EMBEDDED BLANKS).

          WHEN A COMMAND IS BEING EXECUTED FROM THE EXEC FILE IS
          INTERRUPTED BY THE USER HITTING (BREAK) OR (ATTN),  AN
          "EXEC  BREAK"  OCCURS  AND THE USER RETURNS TO COMMAND
          MODE.   THE  COMMAND  "EXEC  RETRY"  WILL   RE-ATTEMPT
          EXECUTION  OF THE ABORTED COMMAND.  THE COMMAND "EXEC"
          WILL START EXECUTION AT THE COMMAND WHICH FOLLOWS  THE
          ABORTED  COMMAND.   NOTE...   THE  "EXEC  CURRENT LINE
          POINTER" CONTROLS WHERE EXECUTION IS TO RESUME.

)X SYNTAX -

         EXEC ((ACTIVE/ACT)/FROM <DSNAME>) ((ON VOLUME)/CATLG)
              (USER UUUUU) (SET/NOSET) (CLEAR/CLR) (LINENO1/RETRY)
              (PAUSE/PAU) (LOG/NOLOG) (TERSE/VERBOSE)
              (START <LINENO2>)

         REQUIRED - NONE
         DEFAULTS - LINE FOLLOWING EXEC CURRENT LINE POINTER OR
                    FIRST LINE IF NO OPERANDS SPECIFIED, NOSET,
                    LOG, VERBOSE
         ALIAS    - EXE, X

)O OPERANDS -

))(ACTIVE/ACT)/FROM <DSNAME> -
          THIS OPERAND TELLS WYLBUR WHERE HE IS TO LOOK FOR  THE
          INFORMATION TO LOAD THE EXEC FILE WITH.

))ON VOLUME/CATLG -
          THIS OPERAND TELLS WYLBUR THE LOCATION OF  THE  "FROM"
          FILE.   IF NOT SPECIFIED AND THE "FROM DSNAME" OPERAND
          IS USED, WYLBUR WILL SEARCH THE GLOBAL VOLUME.

))USER UUUUU -
          THIS OPERAND IS USED IF THE  FIRST  QUALIFIER  OF  THE
          DATA  SET NAME DOES NOT MATCH YOUR USERID.  THE GLOBAL
          "USER" IS USED IF NOT SPECIFIED.  THIS GLOBAL  MAY  BE
          SET  USING  THE "SET USER" COMMAND OR THE DEFAULT THAT
          IS SET AT SIGNON TIME IS USED.

))SET/NOSET -
          THE DEFAULT IS NOSET.  IF SET IS SPECIFIED, THE GLOBAL
          PREFIX AND MEMBER NAMES WILL BE SET.

))CLEAR/CLR -
          THIS OPERAND TELLS WYLBUR TO CLEAR  THE  CURRENT  EXEC
          FILE  BEFORE  PERFORMING THE REST OF THE EXEC COMMAND.
          IF YOU DO  NOT  SPECIFY  THIS  OPERAND  AND  THERE  IS
          INFORMATION  IN  THE EXEC FILE, WYLBUR WILL PROMPT YOU
          WITH "OK TO CLEAR EXEC?   ".   ANY  REPLY  OTHER  THAN
          "YES"  OR  "OK" WILL ABORT THE EXEC COMMAND AND RETURN
          YOU TO COMMAND MODE.

))LINENO1/RETRY -
          THIS OPERAND, IF SPECIFIED, TELLS WYLBUR WHERE IN  THE
          EXEC  FILE  TO  BEGIN OR RESUME EXECUTION OF COMMANDS.
          THE GLOBAL EXEC CURRENT LINE  POINTER  CONTROLS  WHERE
          EXECUTION  RESUMES OR STARTS.  IF THE GLOBAL IS SET AT
          OTHER THAN THE FIRST COMMAND IN  THE  FILE,  EXECUTION
          WILL RESUME AT THE COMMAND FOLLOWING UNLESS "RETRY" IS
          SPECIFIED  WHICH  TELLS  WYLBUR  TO  RETRY THE CURRENT
          COMMAND.

))PAUSE/PAU -
          SPECIFYING THIS OPERAND TELLS WYLBUR TO LOAD THE  EXEC
          FILE  AND  RETURN  YOU  TO  THE  COMMAND  MODE WITHOUT
          EXECUTING ANY OF THE LOADED COMMANDS.

))LOG/NOLOG -
          "LOG" IS THE DEFAULT AND WILL DISPLAY THE COMMANDS  AT
          THE  TERMINAL  (PREFACED  WITH  "->")  BEFORE THEY ARE
          EXECUTED.  THE RESULTS OF THE  EXECUTED  COMMANDS,  IF
          DISPLAYED,  WILL  NOT  HAVE  THE  "->"  AS  A PREFACE.
          "NOLOG" TELLS WYLBUR NOT TO DISPLAY THE COMMANDS.

))TERSE/VERBOSE -
          IF TERSE IS SPECIFIED, WYLBUR  SHORTENS  SOME  OF  THE
          RESPONSES   AND  CAUSES  SUPPRESSION  OF  LINE  NUMBER
          PRINTING.  VERBOSE IS  THE  DEFAULT  THAT  IS  SET  AT
          SIGNON  TIME.  THE DEFAULT MAY BE OVERRIDDEN EITHER IN
          THE EXEC COMMAND OR BY  USING  THE  "SET  EXEC  TERSE"
          COMMAND.

))START <LINENO2> -
          AFTER  THE  LOAD  OF  THE  EXEC  FILE  IS   COMPLETED,
          EXECUTION  BEGINS FROM THE START OF THE FILE IF "START
          <LINENO2>" IS NOT SPECIFIED AND THE "PAUSE" OPTION  IS
          NOT USED.

=IF
)F FUNCTION -
          THE WYLBUR IF  COMMAND  IS  USED  IN  EXEC  FILES  FOR
          CONDITIONAL   EXECUTION.   ONLY  THE  SYNTAX  FOR  THE
          COMMAND IS GIVEN HERE.  SEE THE ENTRY  "PREPROC2"  FOR
          FULL DETAILS ON USE.

)X SYNTAX -

         IF ( <EXP> <RELOP> <EXP> ) <COMMAND>
)O
=INSERT=INSER=INSE=INS=IN=I
)F FUNCTION -

          OPPOSITE TO THE WYLBUR DELETE COMMAND  IS  THE  INSERT
          COMMAND.

)X SYNTAX -

         INSERT <LINE NUMBER> (NODITTO/DITTO) (LIST OPTIONS)

         REQUIRED - LINE NUMBER
         DEFAULTS - NODITTO
         ALIAS    - INSER, INSE, INS, IN, I

)O OPERANDS -

))LINE NUMBER -
          A LINE TO BE INSERTED MUST HAVE A LINE NUMBER ASSIGNED
          BY YOU.  IF YOU ATTEMPT TO INSERT A LINE WITH THE SAME
          NUMBER AS AN EXISTING LINE,  WYLBUR  PROMPTS  WITH  AN
          ERROR  MESSAGE  THAT LINE IS IN THE FILE AND NO INSERT
          MAY BE MADE.  YOU MAY SPECIFY 21 SEPARATE  LINES,  BUT
          YOU  MAY  NOT  SPECIFY  A CONTINUOUS RANGE OF LINES BY
          USING A (/) SLASH,  SUCH  AS  1/8.   ANOTHER  FORM  OF
          INSERTING  DATA  IS  TO EXPLICITLY GIVE A LINE NUMBER,
          FOLLOWED BY A BLANK, FOLLOWED BY THE DATA.  THIS  WILL
          INSERT  THE  GIVEN LINE IF THE LINE DID NOT EXIST, AND
          REPLACE THE LINE IF IT DID EXIST.  CARE SHOULD BE USED
          WHEN DOING THIS FORM OF INSERTION.

))NODITTO/DITTO -
          THE DITTO OPTION MAY BE USED TO INSERT ONE LINE AT  UP
          TO  21  POINTS  WITHIN A FILE.  WYLBUR WILL PROMPT FOR
          THE FIRST LINE ONLY.

))LIST OPTIONS -
          ANY OF THE LIST  OPTIONS  (DESCRIBED  UNDER  THE  HELP
          ENTRY FOR THE LIST COMMAND) ARE VALID OPERANDS.

=JUSTIFY=JUSTIF=JUSTI=JUST=JUS=JU=J
)F FUNCTION -

          THE WYLBUR JUSTIFY COMMAND IS IDENTICAL TO  THE  ALIGN
          COMMAND  EXCEPT  THAT IT ALSO RIGHT JUSTIFIES THE TEXT
          TO THE VALUE OF THE LINE LENGTH SPECIFIED.

)X SYNTAX -

         JUSTIFY <RANGE> (LENGTH=N) (MARKER=C) (NUMBER)
                 (INDENT=I(+ OR - J)) (EVEN) (SPACE)

         REQUIRED - RANGE
         DEFAULTS - LENGTH= GLOBAL LENGTH PARAMETER, INDENT= 0
         ALIAS    - JUSTIF, JUSTI, JUST, JUS, JU, J

          NOTE - NONE OF THE OPERANDS ARE DISCUSSED  HERE.   FOR
          HELP  ON  THE  VARIOUS  OPERANDS,  SEE  THE ALIGN HELP
          ENTRY.  THIS IS DUE TO THE  FACT  THAT  BOTH  COMMANDS
          OPERATE THE SAME WAY AND HAVE THE SAME OPERANDS.
)O
=LIST=LIS=L
)F FUNCTION -

          THE WYLBUR LIST COMMAND WILL ALLOW  YOU  TO  SEE  YOUR
          ACTIVE  FILE  OR  EXEC  FILE  PRINTED/LISTED  AT  YOUR
          TERMINAL.   YOU  CAN  LIST  ALL OR PART/PARTS OF THESE
          FILES.

)X SYNTAX -

         LIST <RANGE> (MARKER=C) (EXEC) (SQUASHED)
              (COLUMNS M1/M2) (RANGE2) (LIST OPTIONS)

          NOTE:  <RANGE> IS POSITIONAL IF SPECIFIED,  ALL  OTHER
          OPERANDS  ARE  KEYWORD  AND  MAY  BE  SPECIFIED IN ANY
          ORDER.

         REQUIRED - NONE
         DEFAULTS - RANGE=ALL, ACTIVE, UNSQUASHED, COLUMNS=ALL, TEXT
         ALIAS    - LIS, L

)O OPERANDS -

))RANGE -
          THE RANGE OPERAND LIMITS THE LISTING TO SOME SPECIFIED
          SET OF LINES.  IF RANGE OMITTED THE DEFAULT OF ALL  IS
          USED.

))MARKER=
          THE EFFECT OF THE MARKER  OPTION  IS  TO  SUSPEND  THE
          LISTING  WHENEVER A LINE IS REACHED WHICH CONTAINS THE
          MARKER CHARACTER IN COLUMN 1.  THE  SUSPENDED  LISTING
          IS RESTARTED BY A (CR) RESPONSE.  AN (ATTN) OR (BREAK)
          RESPONSE  GIVEN  WHILE  THE  LISTING IS SUSPENDED WILL
          CAUSE THE REST OF THE  LISTING  TO  BE  ABORTED.   THE
          MARKER  CHARACTER  IS  IGNORED AND LISTED AS ANY OTHER
          DATA IF IN ANY COLUMN OTHER THAN COLUMN 1.  THERE  ARE
          SOME  CHARACTERS  THAT YOU CAN NOT USE UNLESS THEY ARE
          ENCLOSED WITHIN  QUOTATION  MARKS.   THESE  CHARACTERS
          ARE:

                   ( ) " ' , =

          AND THE BLANK OR LOWER CASE LETTERS.  A SAMPLE OF  THE
          METHOD FOR USING THESE CHARACTERS IS:

                   COMMAND?  LI UNN MARKER=")" (CR)

))EXEC -
          LISTS EXEC FILE RATHER  THAN  THE  ACTIVE  FILE.   THE
          ACTIVE FILE IS THE DEFAULT.

))SQUASHED -
          THIS  OPERAND  IS  USED  TO  LIST  YOUR  DATA  WITHOUT
          MULTIPLE BLANKS.

))COLUMNS M1/M2 -
          RESTRICTS THE LISTING  TO  THE  SPECIFIED  COLUMNS  M1
          THROUGH M2.  PRESENT.

))RANGE2 -
          IF YOU HAVE SPECIFIED THE  FIRST  RANGE  FIELD  AS  AN
          ASSOCIATIVE   RANGE   ('YOUR'),  YOU  MAY  SPECIFY  AN
          EXPLICIT RANGE  ALSO  AND  THIS  IS  THE  PURPOSE  FOR
          RANGE2.

          EXAMPLE:
                   COMMAND?  LIST ' YOUR ' IN 1/10 (CR)

          YOU  MAY  ALSO  USE  RANGE2   TO   SPECIFY   "ORDINAL"
          OCCURRENCES  OF  A  SPECIFIED  STRING  OF  CHARACTERS.
          EXAMPLE:

          COMMAND?  LIST 'NUMBER' (1,3,6/15) (CR)

          THIS IS LEGAL AND WILL  LIST  THE  FIRST,  THIRD,  AND
          SIXTH   THROUGH  THE  FIFTEENTH  LINES  IN  WHICH  THE
          CHARACTER STRING "NUMBER" OCCURS.  THE OCCURRENCE LIST
          MUST BE IN ASCENDING ORDER WITH NO  OVERLAP  OF  RANGE
          AND SHOULD NOT BE CONFUSED WITH LINE NUMBERS 1, 3, AND
          6 THROUGH 15.  REMEMBER THAT WYLBUR CANNOT TELL WHEN A
          LINE  CONTAINS MORE THAN ONE INSTANCE OF THE SPECIFIED
          STRING.  WYLBUR PROHIBITS THE USE  OF  THE  OCCURRENCE
          SPECIFICATIONS  AND  THE MULTIPLE GROUP EXPLICIT RANGE
          IN THE SAME COMMAND.

          A MAXIMUM OF TEN NUMBERS OR RANGES MAY APPEAR  IN  THE
          OCCURRENCE LIST.

))LIST OPTIONS -
          AT VARIOUS POINTS  IN  THE  HELP  ENTRIES,  THERE  ARE
          REFERENCES  TO  "LIST OPTIONS".  THESE "OPTIONS" ARE A
          SUBSET OF ALL OF THE OPTIONS AVAILABLE UNDER LIST.

          THE "UNNUMBERED" OPTION PRODUCES A LISTING  CONTAINING
          ONLY  THE  TEXT OF THE LINES IN THE <RANGE> SPECIFIED.
          THE "NONUMBERED" AND "TEXT" OPTIONS FUNCTION SIMILARLY
          TO THE "UNNUMBERED" OPTION EXCEPT THAT THE TEXT IS NOT
          MOVED TO THE LEFT INTO THE PLACE USUALLY  OCCUPIED  BY
          THE  LINE  NUMBERS.   THE  "NOTEXT"  OPTION SUPPRESSES
          PRINTING OF THE TEXT AND PRODUCES A  LISTING  OF  ONLY
          THE  LINE  NUMBERS  OF  THE  LINES  IN  THE  SPECIFIED
          <RANGE>.   THE  "INTEGER"  OPTION REPLACES THE REGULAR
          LINE NUMBERS WITH EIGHT DIGIT INTEGERS.  THE  "NOLIST"
          OPTION  SUPPRESSES  LISTING WHEN "LIST" IS THE DEFAULT
          FOR THE COMMAND.

=LOAD=LOA
)F FUNCTION -

          THE WYLBUR LOAD COMMAND IS SIMILAR TO THE EXEC COMMAND
          WITH ONLY TWO MAJOR DIFFERENCES:  YOU MAY SPECIFY THAT
          A RANGE OF LINES FROM THE ACTIVE FILE OR  AN  EXTERNAL
          FILE  BE  "LOAD'ED"  AND EXECUTED, AND THE ACTIVE FILE
          WILL NOT BE ALTERED BY THE LOAD COMMAND.   NOTE....THE
          LOAD   COMMAND  MAY  NOT  BE  USED  TO  EXECUTE  LINES
          CURRENTLY IN THE EXEC FILE, I.E., IT MAY NOT  BE  USED
          TO REPLACE THE "EXEC <LINE NUMBER>" COMMAND.

)X SYNTAX -

         LOAD (<RANGE>) ((FROM <DSNAME>) (ON <VOLUME/CATLG>))
              (SET/NOSET) (START <LINENO>) (LOG/NOLOG) (TERSE/VERBOSE)
              (PAUSE) (CLEAR)

         REQUIRED - NONE
         DEFAULTS - ACTIVE, VOL=CATLG, NOSET, LOG, VERBOSE, NOPAUSE,
                    RANGE=ALL
         ALIAS    - LOA

)O OPERANDS -

))RANGE -
          WHEN YOU SPECIFY A RANGE IN  THE  LOAD  COMMAND,  ONLY
          THAT  RANGE  IS LOADED INTO THE EXEC FILE.  THE ACTIVE
          FILE IS NOT CLEARED.

))FROM DSNAME -
          SPECIFIES THAT WYLBUR IS TO LOAD THE EXEC FILE FROM AN
          EXTERNAL FILE THAT IS IN WYLBUR  "EDIT"  FORMAT.   THE
          DSNAME SPECIFIED MUST CONFORM TO NAMING CONVENTIONS AS
          OUTLINED IN THE HELP ENTRY "DSNAMES".

))ON VOLUME/CATLG -
          SPECIFIES THE  VOLUME  ON  WHICH  THE  DATA  SET  THAT
          CONTAINS  THE  DATA  TO  BE  LOADED  RESIDES.   IF NOT
          SPECIFIED, THE DEFAULT VOLUME IS SEARCHED.

))SET/NOSET -
          THE DEFAULT IS NOSET AND DOES NOT UPDATE THE  "CURRENT
          EXEC  LINE"  GLOBAL.   IF SET SPECIFIED, THE GLOBAL IS
          SET.

))START LINENO -
          IF A START LINENO IS  SPECIFIED  WITHOUT  RANGE  BEING
          SPECIFIED,  ONLY  THAT  LINENO IS LOADED INTO THE EXEC
          FILE.   IF  A  RANGE  AND  A  START  LINENO  ARE  BOTH
          SPECIFIED, THEN THE ENTIRE RANGE OF  LINES  IS  LOADED
          AND EXECUTION STARTS WITH THE "START LINENO".

))LOG/NOLOG -
          LOG LISTS THE  COMMANDS  AT  THE  TERMINAL  AS  WYLBUR
          EXECUTES THEM.  NOLOG WILL PREVENT THIS LISTING.

))TERSE/VERBOSE -
          THESE SETTINGS APPLY ONLY TO THE EXEC FILE PROCESSING,
          NOT TO THE OVERALL SESSION.  VERBOSE IS THE DEFAULT.

))PAUSE -
          SPEICIFICATION OF THIS KEYWORD TELLS  WYLBUR  TO  LOAD
          THE EXEC FILE, BUT DO NOT EXECUTE ANY OF THE COMMANDS.

))CLEAR -
          WYLBUR  CLEARS  THE  EXEC  FILE  BEFORE  LOADING.   IF
          OMITTED AND THE EXEC FILE  CONTAINS  COMMANDS,  WYLBUR
          WILL  PROMPT  WITH  "OK  TO  CLEAR  EXEC?".  THE VALID
          REPLIES ARE "YES" OR "OK", ANY OTHER REPLY  TERMINATES
          THE COMMAND AND RETURNS YOU TO COMMAND MODE.

=MODIFY=MODIF=MODI=MOD=M
)F FUNCTION -

          THE   WYLBUR   MODIFY   COMMAND   ALLOWS   INSERTIONS,
          REPLACEMENTS, AND DELETIONS TO THE  CONTENTS  OF  EACH
          LINE  IN  A  SPECIFIED  <RANGE>.  SUCCESSIVE LINES ARE
          PROMPTED  FOR  ALTERATIONS  UNTIL   THE   <RANGE>   IS
          EXHAUSTED.   ALTHOUGH  THERE  ARE  A  FEW  EXCEPTIONS,
          USUALLY  ONLY  ONE  MODIFICATION  MAY  BE ENTERED ON A
          LINE.  THIS  RESTRICTION  CAN  MAKE  "MODIFY"  A  SLOW
          COMMAND  TO  USE.   IF A LINE IS TO BE CHANGED IN MORE
          THAN ONE PLACE, IT MAY BE EASIER TO  USE  THE  REPLACE
          COMMAND  AND  RETYPE THE WHOLE LINE OR TO USE THE EDIT
          COMMAND.

)X SYNTAX -

         MODIFY (<RANGE>) (LIST OPTIONS) (SINGLE)

         REQUIRED -  NONE
         DEFAULTS - RANGE = F/L, LIST
         ALIAS    - MODIF, MODI, MOD, M

         NOTE:  THERE IS AN ADDITIONAL ENTRY UNDER OPERANDS
                WHICH EXPLAINS THE USE OF THE MODIFY CHARACTERS
                AND IS NAMED ALTERATIONS.

)O OPERANDS -

))RANGE -
          THE DEFAULT RANGE IS FIRST/LAST.   IF  SPECIFIED,  THE
          RANGE WILL LIMIT WYLBUR TO THE LINES SPECIFIED.

))LIST OPTIONS -
          ANY OF THE VALID LIST OPTIONS (DESCRIBED IN  THE  HELP
          ENTRY FOR LIST) ARE VALID OPERANDS.

))SINGLE -
          WYLBUR WILL ISSUE A SINGLE ALTERS PROMPT FOR EACH LINE
          IN RANGE.

))ALTERATIONS -
          FOR EACH LINE IN THE SPECIFIED <RANGE>  THE  FOLLOWING
          PROCESS  IS CARRIED OUT.  FIRST, THE IMAGE OF THE LINE
          IN  IT'S  PRESENT  FORM  IS  DISPLAYED.   THEN  WYLBUR
          PROMPTS FOR AN ALTERATION TO BE MADE TO THE LINE  WITH
          THE  MESSAGE "ALTERS?" AND THE CURSOR POSITIONED UNDER
          THE FIRST CHARACTER OF THE DATA.  ALTERATIONS ARE  ONE
          OF THE FOLLOWING:

          INSERT (I)---TYPE THE LETTER I IMMEDIATELY  BELOW  THE
          CHARACTER  IN  THE LINE BEFORE WHICH CHARACTERS ARE TO
          BE INSERTED.  THIS INDICATOR IS FOLLOWED BY THE STRING
          OF CHARACTERS  (INCLUDING  BLANKS)  WHICH  ARE  TO  BE
          INSERTED.

          REPLACE  (R)---THIS  INDICATOR  IS  TYPED  IMMEDIATELY
          BELOW THE FIRST CHARACTER TO BE REPLACED IN THE  LINE.
          THE   STRING   OF   REPLACEMENT  CHARACTERS  IS  TYPED
          IMMEDIATELY FOLLOWING THE R.  AS MANY  CHARACTERS  ARE
          REPLACED  AS  THERE  ARE CHARACTERS IN THE REPLACEMENT
          STRING.

          DELETE (D)---A STRING OF CHARACTERS TO BE DELETED FROM
          THE LINE IS  DESIGNATED  BY  TYPING  A  D  UNDER  EACH
          SUCCESSIVE   CHARACTER   TO  BE  REMOVED.   A  DELETED
          CHARACTER IS NOT REPLACED BY A  BLANK;  WYLBUR  SHIFTS
          THE  OTHER TEXT TO ELIMINATE THE SPACE.  YOU NEED TYPE
          A D ONLY UNDERNEATH THE FIRST AND LAST  CHARACTERS  IN
          THE  STRING  TO  BE DELETED --- ALL CHARACTERS BETWEEN
          THE TWO D'S ARE DELETED.  THE DELETION RANGE MAY  ALSO
          BE TERMINATED BY EITHER AN I OR R INSTEAD OF A D.

          BLANK (B)---INDIVIDUAL CHARACTERS MAY  BE  BLANKED  IN
          THE  LINE  BY  TYPING  A  B  UNDER EACH POSITION TO BE
          BLANKED.  ONLY THOSE  POSITIONS  ARE  BLANKED  AND  NO
          SHIFTING   OF   THE   LINE  TAKES  PLACE.   ANY  OTHER
          ALTERATION MAY FOLLOW THE LAST B ON A LINE (D, R, I).

          MULTIPLE MODIFICATIONS --- (DI) (DR) (BI) (BR) (BD)  A
          FEW COMBINATIONS OF ALTERATIONS ARE ALLOWED PER ALTERS
          PROMPT.   THEY  ARE:   DELETE  FOLLOWED  BY  INSERT OR
          REPLACE, AND BLANK  FOLLOWED  BY  INSERT,  REPLACE  OR
          DELETE.  TO REPLACE A STRING BY A LONGER STRING, IT IS
          CONVENIENT TO USE DELETE FOLLOWED BY INSERT.  EXAMPLE:

         COMMAND?  MOD 25 (CR)
          25.    WE ARE GOING TO MOD THIS LINE.
          ALTERS?       D          DIIN THE PROCESS OF MODIFYING
          25.    WE ARE IN THE PROCESS OF MODIFYING THIS LINE.

          THE D D CAUSED THE DELETION OF THE  STRING  'GOING  TO
          MOD'  AND  THE  I  UNDER  THE BLANK FOLLOWING THE WORD
          'MOD' CAUSED THE STRING FOLLOWING IT TO  BE  INSERTED.
          NOTE:   IT  WAS NOT NECESSARY TO ENTER THE ENDING D TO
          INDICATE  THE  RANGE  OF  THE  DELETION  SINCE  THE  I
          INDICATOR WILL AUTOMATICALLY  TERMINATE  THE  DELETION
          RANGE  AT  THE  CHARACTER  POSITION JUST BEFORE THE I.
          THE OTHER FORMS OF MULTIPLE MODIFICATIONS WORK IN  THE
          SAME MANNER.

          AFTER THE ALTERATION IS  SPECIFIED,  TYPE  A  CARRIAGE
          RETURN.  WYLBUR WILL MAKE THE INDICATED ALTERATIONS IN
          THE  LINE  AND  TYPE  THE  NEW  IMAGE  OF THE LINE FOR
          INSPECTION.   THEN  WYLBUR  WILL   PROMPT   FOR   MORE
          ALTERATIONS,  UNLESS  YOU  HAVE SPECIFIED THE "SINGLE"
          OPERAND.  YOUR SIGNAL TO WYLBUR THAT  ALL  ALTERATIONS
          HAVE  BEEN  MADE  IS  MADE  BY  TYPING ONLY A CARRIAGE
          RETURN IN ANSWER TO  THE  ALTERATION  PROMPT.   WYLBUR
          WILL  THEN  PUT  THE  NEW  IMAGE  OF THE LINE INTO THE
          ACTIVE FILE AND PROMPT FOR  ALTERATIONS  TO  THE  NEXT
          LINE IN THE <RANGE>.

          THE DISPLAYING OF THE ALTERED IMAGE OF THE LINE MAY BE
          SUSPENDED BY TYPING AN N INDICATOR INTO THE ALTERATION
          LINE BEFORE ANY OTHER ALTERATION INDICATORS.

          YOU MAY HAVE WYLBUR TYPE OUT THE  IMAGE  OF  THE  LINE
          BEING  MODIFIED,  AS  IT CURRENTLY STANDS.  TYPE A FEW
          BLANKS INTO THE ALTERATION LINE AND ISSUE  A  CARRIAGE
          RETURN.

          YOU MAY ELIMINATE ALL ALTERATIONS MADE TO  A  LINE  BY
          HITTING  ATTENTION  (DUP/PA1),  OR  BREAK AS THE FIRST
          CHARACTER IN THE  ALTERS  LINE.   WYLBUR  WILL  FORGET
          ABOUT  ALL  ALTERATIONS  ALREADY MADE.  TERMINATION OF
          THE MODIFY COMMAND IS THE SAME AS  THAT  OF  THE  EDIT
          COMMAND.   FOR  MORE  INFORMATION ON TERMINATION ENTER
          "HELP EDIT".

=MOVE=MOV
)F FUNCTION -

          THIS WYLBUR COMMAND MOVES LINES FROM ONE PART  OF  THE
          ACTIVE  FILE  TO  ANOTHER.  IT IS ESSENTIALLY A "COPY"
          COMMAND FOLLOWED BY A "DELETE" COMMAND, WHERE THE  OLD
          INSTANCES OF THE COPIED LINES ARE DELETED.

          NOTE......IF YOU NEED SAMPLES OF  THE  MOVE  COMMANDS,
          SEE  THE  ENTRIES FOR "MOVESAMP" AND "COPYSAMP".  BOTH
          THE MOVE AND COPY COMMANDS ARE SIMILAR IN FUNCTION.

)X SYNTAX -

         MOVE <RANGE> TO (<LINENO1>/END) (BY <LINENO2>)
              (MERGE) (LIST OPTIONS)

         REQUIRED - RANGE
         DEFAULTS - TO=END, BY=1, NOMERGE
         ALIAS    - MOV

)O OPERANDS -

))RANGE -
          SPECIFIES THE RANGE OF LINES TO BE MOVED.

))TO <LINENO1>/END -
          SPECIFIES THE STARTING LINE NUMBER OF  WHERE  TO  MOVE
          THE  RANGE  SPECIFIED.   "END"  IS  THE DEFAULT, WHERE
          "END" IS EQUAL TO  "DELTA"  HIGHER  THAN  THE  CURRENT
          "LAST".

))BY <LINENO2> -
          SPECIFIES THE LINE INCREMENT TO BE USED IF OTHER  THAN
          "1".  NOTE.......DELTA IS NOT USED TO INCREMENT.

))MERGE -
          USED  TO  SPECIFY  INTERLEAVING  OF  LINES.   IF   NOT
          SPECIFIED  AS  A PARAMETER, NO INTERLEAVING WILL OCCUR
          AND WYLBUR WILL ABORT THE OPERATION AND SEND A MESSAGE
          TO THE TERMINAL.  "MERGE" MUST APPEAR AFTER <LINENO2>.

))LIST OPTIONS -
          ANY OF THE VALID LIST OPTIONS ARE VALID OPERANDS.

=NUMBER=N=NU=NUM=NUMB=NUMBE
)F FUNCTION -
          THE WYLBUR NUMBER COMMAND IS USED TO RENUMBER SOME  OR
          ALL OF THE LINES OF TEXT IN AN ACTIVE FILE
)X SYNTAX -
         NUMBER      (START (/STOP)) (BY NN) (TIMES NN) (RANGE)
                   (START/STOP)    (TIMES)

   REQUIRED - NONE
   DEFAULTS - START=DELTA, BY=DELTA, RANGE=ALL
   ALIAS    - N, NU, NUM, NUMB, NUMBE

)O OPERANDS -

))START (/STOP) -
          YOU MAY SPECIFY A NUMBER AT WHICH THE NUMBERING IS  TO
          BEGIN BY GIVING IT IN THE COMMAND.  THIS WILL OVERRIDE
          THE DELTA DEFAULT.
             EXAMPLE:
                      COMMAND ?  NUMBER 2.111(CR)
                        72.111 - LAST LINE
                      COMMAND ?

          WYLBUR STARTS NUMBERING AT 2.111 AND NUMBERS THE WHOLE
          ACTIVE FILE AND THEN PRINTS OUT THE NUMBER OF THE LAST
          LINE.  THE DELTA VALUE (NORMALLY  1.000)  IS  USED  TO
          INCREMENT DURING NUMBERING OPERATION.

          IF "/STOP" IS SPECIFIED, THE DELTA VALUE IS OVERRIDDEN
          AND WYLBUR WILL CALCULATE A DELTA THAT WILL ENABLE ALL
          LINES IN THE RANGE TO BE RENUMBERED UNLESS  THE  DELTA
          DEFAULT OF 1.000 IS ACCEPTABLE.

))BY NN -
          SETS THE DELTA VALUE USED TO  INCREMENT  NUMBERING  TO
          "NN".

             EXAMPLE:
                   COMMAND ?  NUMBER 2.065 BY .01(CR)
                      8.795 - LAST LINE
                   COMMAND ?

          THIS CAUSES RENUMBERING TO START WITH LINE # 2.065 AND
          INCREMENT BY .01 (2.065, 2.075, 2.085.....8.795).

))TIMES NN -
          THIS OPERAND IS USED IN  CONJUNCTION  WITH  THE  DELTA
          OVERRIDE TO ACCOMPLISH SCALING.
             EXAMPLE:
                   COMMAND ?  N TIMES 10(CR)
                     6720 - LAST LINE
                   COMMAND ?

          THIS  CAUSES  ALL  LINE  NUMBERS  IN  A  FILE  TO   BE
          MULTIPLIED BY "NN" WHILE :

                   COMMAND ?  N TIMES .1(CR)
                      67.1 - LAST LINE
                   COMMAND ?

          CAUSES ALL LINE NUMBERS TO BE EFFECTIVELY  DIVIDED  BY
          10.

               >>>> REMEMBER, THIS FORM OF THE  NUMBER  COMMAND
               CAUSES  RENUMBERING  OF  THE ENTIRE FILE AND NOT
               JUST A SPECIFIC RANGE.  WYLBUR LINE NUMBERS MUST
               BE BETWEEN 0.001 AND 99999.999. <<<<

))RANGE2 -
          YOU MAY ALSO LIMIT THE RANGE OF LINES TO BE RENUMBERED
          BY GIVING A STARTING AND STOPPING POINT TO WYLBUR.
             EXAMPLE:
                   COMMAND ?  NUMBER 300/800(CR)

          THIS WOULD NUMBER LINES 300 THROUGH 800 BY THE CURRENT
          DELTA.  THE FIRST LINE IN THE RENUMBERED  LINES  WOULD
          BE   300.    IF   THERE  ARE  TOO  MANY  LINES  TO  BE
          ACCOMMODATED WITH THE CURRENT DELTA, WYLBUR CALCULATES
          THE LARGEST POSSIBLE DELTA TO MAKE ALL LINES FIT.

=POINT=POIN=POI=PO=P
)F FUNCTION -

          THE WYLBUR POINT COMMAND FUNCTIONS EXACTLY THE SAME AS
          THE LIST COMMAND EXCEPT THAT  IT  UPDATES  TO  CURRENT
          LINE  POINTER  (*)  AS  IT  LISTS  A  LINE.  THE POINT
          COMMAND HAS ALL OF THE OPERANDS OF  THE  LIST  COMMAND
          PLUS  A "NOLIST" OPTION WHICH SETS (*) WITHOUT LISTING
          ANY LINES.  THIS IS ESPECIALLY USEFUL IN EXEC FILES.

          "POINT <RANGE> EXEC"  SETS  A  SEPARATE  CURRENT  LINE
          POINTER  FOR THE EXEC FILE.  THIS IS DISTINCT FROM THE
          ACTIVE FILE CURRENT LINE POINTER, AND  THESE  POINTERS
          MAY HAVE DIFFERENT VALUES.

          "POINT 6/10 EXEC" WILL LIST LINES 6 THROUGH 10 OF  THE
          EXEC  FILE AND THE EXEC FILE CURRENT LINE POINTER WILL
          BE SET TO LINE 10 IF LINE 10 EXISTS.  IF THERE  IS  NO
          LINE  10,  THE POINTER WILL BE SET TO THE HIGHEST LINE
          NUMBER LESS THAN 10.

          "POINT 6/10 NOLIST" SETS THE CURRENT LINE POINTER  FOR
          THE  ACTIVE  FILE  IN  THE SAME WAY, BUT DOES NOT LIST
          LINES 6/10.

          DURING EXECUTION OF AN EXEC FILE, WYLBUR SETS THE EXEC
          FILE CURRENT LINE POINTER TO THE LINE CURRENTLY  BEING
          EXECUTED.   THE NEXT LINE TO BE EXECUTED IS ALWAYS THE
          LINE REFERENCED BY  THE  EXEC  SYMBOLIC  LINE  POINTER
          "NEXT",  UNLESS  OTHERWISE SPECIFIED.  BECAUSE OF THIS
          FACT, "POINT <RANGE> EXEC" MAY BE  USED  AS  A  BRANCH
          INSTRUCTION WITHIN AN EXEC FILE.

          IN THE FOLLOWING EXAMPLE, THE "POINT" COMMAND IS  USED
          TO SHOW HOW LABELS MAY BE USED IN AN EXEC FILE:

                   1.   LIST 1
                   2.   POINT 1 ';SKIP' EXEC NOL
                   3.   LIST 2
                   4.   ;SKIP
                   5.   LIST 3

          AFTER STATEMENT ONE EXECUTES, STATEMENT TWO  SETS  THE
          EXEC FILE CURRENT LINE POINTER TO THE LAST LINE IN THE
          EXEC  FILE  WHICH  HAS  THE  CHARACTER  STRING ';SKIP'
          STARTING IN COLUMN 1.  (IF YOU HAD NOT  SPECIFIED  "1"
          IN  THE  POINT  COMMAND,  WYLBUR WOULD SEARCH THE EXEC
          FILE FOR THE  LAST  LINE  CONTAINING  ';SKIP'  IN  ANY
          POSITION  WITHIN  IT.)  IN THIS CASE, LINE FOUR IS THE
          ONLY LINE WHICH HAS THE STRING ';SKIP' STARTING IN ITS
          FIRST COLUMN AND THE EXEC FILE CURRENT LINE POINTER IS
          SET TO FOUR.  AS  STATED  PREVIOUSLY,  THE  NEXT  LINE
          WHICH  IS TO EXECUTE IS THE LINE IMMEDIATELY FOLLOWING
          THE LINE REFERENCED BY  THE  EXEC  FILE  CURRENT  LINE
          POINTER,  LINE  FIVE.  THUS, THE ORDER OF EXECUTION OF
          THE STATEMENTS IN THE FILE IS ONE,  TWO,  AND  FINALLY
          FIVE.   OUTPUT  FROM  THIS  EXECUTION  CONSISTS  OF  A
          LISTING OF LINES ONE AND THREE OF THE ACTIVE FILE WHEN
          LINES 1 AND 5 OF THE EXEC FILE ARE EXECUTED.

)X
)O
=POP
)F FUNCTION -

          THE WYLBUR POP COMMAND IS USED TO REMOVE COMMANDS THAT
          HAVE BEEN PLACED ON THE TSO COMMAND STACK.

)X SYNTAX -

         POP (ALL)

         REQUIRED - NONE
         DEFAULT  - SINGLE COMMAND TO BE REMOVED
         ALIAS    - NONE

)O OPERANDS -
))ALL -
          THE POP COMMAND WILL REMOVE  THE  LAST  ADDED  COMMAND
          UNLESS  THE  "ALL" KEYWORD IS SPECIFIED, IN WHICH CASE
          ALL "STACKED" COMMANDS ARE REMOVED.

=PROFILE=PROFIL=PROFI=PROF=PRO
)F FUNCTION -
         THE WYLBUR PROFILE COMMAND GIVES INFORMATION ON SESSION
         CONTROL DEFAULTS THAT ARE SET IN TSO.

)X SYNTAX -

         PROFILE

         REQUIRED - NONE
         DEFAULTS - NONE
         ALIAS    - PROFIL, PROFI, PROF, PRO

)O OPERANDS -
               THERE ARE NO OPERANDS.
=PUT=PU
)F FUNCTION -

          THE WYLBUR PUT COMMAND WORKS THE SIMILAR TO THE "SHOW"
          COMMAND EXCEPT THAT THE DATA IS ADDED  TO  THE  ACTIVE
          FILE AS IT LISTS AT THE TERMINAL.

)X SYNTAX -

         PUT (DIRECTORY/DSNAMES) (ON <VOLUME>) (CLEAR) (AT <LINENO1>)
             (BY <LINENO2>) (LIST OPTIONS) (SHOW OPTIONS)

         REQUIRED - DIRECTORY OR DSNAMES
         DEFAULTS - AT "END"
         ALIAS    - PU

)O OPERANDS -

))DIRECTORY/DSNAMES -
          THE "PUT DIRECTORY" OR "PUT DSNAMES" COMMANDS HAVE ALL
          OF THE OPTIONS OF THEIR  RESPECTIVE  "SHOW"  COMMANDS.
          IF  "PUT  DIRECTORY"  IS USED ....  THE DEFAULT DSNAME
          FOR THE DIRECTORY LIST IS UUUUU.LIB,  WHERE  UUUUU  IS
          YOUR USERID.

))ON VOLUME -
          TELLS WYLBUR THE VOLUME ON WHICH YOU WISH  THE  SEARCH
          TO  BE  MADE.  IF SPECIFIED, THIS OVERRIDES THE VOLUME
          GLOBAL.

))CLEAR -
          TELLS  WYLBUR  TO  CLEAR  THE  ACTIVE  FILE  PRIOR  TO
          STARTING THE PUT OPERATION.

))AT LINENO1 -
          TELLS WYLBUR THE LINE NUMBER AT WHICH TO START PLACING
          THE "PUT" DATA.  IF NOT SPECIFIED, "END" IS ASSUMED.

))BY LINENO2 -
          TELLS WYLBUR WHAT  INCREMENT  TO  USE  WHEN  "PUTTING"
          LINES.   IF  NOT  SPEICIFIED, THE GLOBAL DELTA IS USED
          (NORMALLY 1.000).

))LIST OPTIONS -
          ALL OF THE OPTIONS AVAILABLE UNDER  THE  LIST  COMMAND
          ARE VALID OPERANDS.

))SHOW OPTIONS -
          ALL OF THE OPTIONS AVAILABLE UNDER  THE  SHOW  DSNAMES
          COMMAND ARE VALID OPERANDS.

=READ=REA
)F FUNCTION -

          THE WYLBUR READ COMMAND IS USED TO EXECUTE ONE COMMAND
          FROM EITHER THE ACTIVE  OR  EXEC  FILES,  OR  INPUT  A
          COMMAND, OR SET DATA VARIABLES FROM THE TERMINAL.  THE
          READ  COMMAND WITH NO OPERANDS PRODUCES A PROMPT FOR A
          COMMAND.  WHEN THE  NEW  COMMAND  IS  ENTERED,  IT  IS
          EXECUTED.   THIS  COMMAND  IS DESIGNED FOR USE IN EXEC
          FILES TO ALLOW YOU TO ENTER COMMANDS WITHOUT HAVING TO
          "PAUSE" EXECUTION.  IF YOU HAVE ENTERED A  COMMAND  IN
          COLLECT MODE RATHER THAN IN COMMAND MODE, THIS COMMAND
          PROVIDES AN EASY WAY TO CORRECT THE ERROR BY USING THE
          "DELETE" OPERAND.

)X SYNTAX -

         READ (<LINENO>) (EXEC/DELETE) (PROMPT <STRING>)

         2.  READ VALUE <VARIABLE>(S)
             READ VALUE <VARIABLE>(S) PROMPT <STRING>

         3.  READ STRING <SVARIABLE>
             READ STRING <SVARIABLE> PROMPT <STRING>

         NOTE:.....THE "2" AND "3" TYPES OF THE READ COMMAND
                   ARE NOT COVERED HERE.  SEE THE ENTRY "PREPROC2".


         REQUIRED - NONE
         DEFAULTS - NONE
         ALIAS    - REA

)O OPERANDS -

))LINENO -
          READ <LINENO>  ALLOWS  ONE  COMMAND  TO  BE  READ  AND
          EXECUTED  FROM  THE  ACTIVE  FILE, OR THE EXEC FILE IF
          "EXEC" IS SPECIFIED.

))EXEC/DELETE -
          IF THE "DELETE" OPTION IS SPECIFIED, THE COMMAND  WILL
          BE  ERASED FROM THE ACTIVE FILE BEFORE EXECUTION.  THE
          "DELETE" FEATURE ALLOWS YOU  TO  BUILD  SINGLE  WYLBUR
          COMMANDS  IN  THE  ACTIVE  FILE  AND  THEN EXECUTE THE
          COMMANDS WITHOUT  HAVING  TO  CHANGE  THE  EXEC  FILE.
          "DELETE"    AND   "EXEC"   ARE   MUTUALLY   EXCLUSIVE.
          SPECIFICATION OF "EXEC" TELL WYLBUR THAT  THE  COMMAND
          TO BE EXECUTED IS TO COME FROM THE EXEC FILE.

))PROMPT <STRING> -
          THE PROMPT <STRING>  OPTION,  WHEN  USED,  CAUSES  THE
          <STRING>   TO   BE  WRITTEN  AT  THE  TERMINAL  BEFORE
          "READ'ING" THE COMMAND.  IF THIS OPERAND  IS  OMITTED,
          WYLBUR WILL PROMPT WITH "ENTER?  " AND WAIT FOR YOU TO
          ENTER  A  STRING OF DATA.  IF YOU REPLY WITH A (CR) OR
          THE WORD "EXEC"  (WHEN  REPLYING  TO  THE  "ENTER?   "
          PROMPT  FROM  WITHIN  AN  EXEC FILE), EXECUTION OF THE
          FILE WILL CONTINUE AT THE NEXT LINE OF THE EXEC  FILE.
          IF THE RESPONSE TO THE "ENTER?  " PROMPT HAD BEEN "EXE
          6"  (OR  A NUMBER HIGHER THAN ANY EXISTING IN THE EXEC
          FILE),  WYLBUR  WILL  RESPOND  WITH  "EXEC  END"   AND
          TERMINATE  EXECUTION OF THE EXEC FILE.  IF LINE 6 IS A
          VALID LINE NUMBER IN  THE  EXEC  FILE,  OR  THERE  ARE
          EXISTING  LINES  WITH A HIGHER LINE NUMBER IN START AT
          LINE 6, OR THE NEXT HIGHER LINE.  AS YOU CAN SEE, THIS
          WILL ALLOW DYNAMIC BRANCHING WITHIN THE EXEC FILE.

=RECATLG=RECATL=RECAT=RECA=REC
)F FUNCTION -
          IF, AFTER SAVING A DATA SET WITHOUT CATALOGING IT,  AN
          ERROR  IS  MADE  DURING  THE  CATALOG PROCESS, YOU MAY
          CORRECT YOUR ERROR BY USING THIS COMMAND.

)X SYNTAX -

         RECATLG <DSNAME> <ON 'VOLUME'>

         REQUIRED - ALL OPERANDS
         DEFAULT  - VOLUME=CATLG
         ALIAS    - RECATL, RECAT, RECA, REC

)O OPERANDS -

))DSNAME -
          SOME FORM OF DSNAME MUST BE GIVEN.  FOR  FURTHER  INFO
          ON DATA SET FORMAT, SEE THE ENTRY "DSNAMES".

))ON 'VOLUME' -
          ANY ONE OF THE VALID SAVE VOLUMES  MAY  BE  SPECIFIED.
          TO SEE WHAT VOLUMES ARE AVAILABLE FOR SAVING ENTER THE
          COMMAND  "SHOW  VOLUMES".  IF THIS OPERAND IS OMITTED,
          THE DATA SET WILL BE CATALOGED ON  THE  VALUE  OF  THE
          VOLUME  DEFAULT  (NORMALLY "CATLG").  THIS WILL RESULT
          IN THE DATA SET BEING CATALOGED ON THE WRONG VOLUME OR
          ON A VOLUME WITH THE NAME 'CATLG' MOST  OF  THE  TIME.
          IT  IS  THEREFORE RECOMMENDED THAT YOU MAKE A HABIT OF
          ALWAYS SPECIFYING THIS OPERAND.

=RENAME=RENAM=RENA=REN
)F FUNCTION -

          THE WYLBUR RENAME COMMAND ALLOWS YOU TO RENAME ANY  OF
          YOUR  DATA  SETS OR PDS MEMBERS.  IN ADDITION, YOU MAY
          ADD ALIASES TO A PDS MEMBER, SO THAT YOU MAY REFER  TO
          A MEMBER BY MORE THAN ONE NAME.

)X SYNTAX -

         THERE ARE TWO FORMS OF THE COMMAND:

         RENAME <DSNAME> (ON <VOLUME>) (UNCAT) (SET) TO <NEW DSNAME>
                (ON <VOLUME>) (SET) (CATLG/RECATLG/UNCATLG)

                                      OR

         RENAME <PDSNAME> #<MEMBER> (ON <VOLUME>)
                (ALIAS) TO <NEW MEMBERNAME> (ON <VOLUME>)

         REQUIRED - DSNAME/PDSNAME, TO DSNAME/NEW MEMBERNAME
         DEFAULTS - NONE
         ALIAS    - RENAM, RENA, REN

         NOTE:  ALL OPERANDS WILL NOT BE COVERED DUE TO THE
                REPETITIVE NATURE OF DOING SO.  THE MEMBER
                MAY BE ENCLOSED IN PARENTHESES, BUT THE PARENS
                ARE NOT REQUIRED.

)O OPERANDS -

))DSNAME/PDSNAME -
          MUST BE A DATA SET NAME OF THE TYPE DETAILED UNDER THE
          HELP ENTRY "DSNAMES".

))ON VOLUME -
          REQUIRED ONLY IF THE GLOBAL VOLUME  PARAMETER  IS  NOT
          SET.  IF VOLUME=CATLG (LOGON DEFAULT) IS SET, THEN THE
          ORIGINAL DATASET IS UNCATLG'D.

))SET -
         USED TO SET THE SAVED PREFIX AND/OR MEMBER GLOBALS.

))CATLG/RECATLG/UNCATLG -
          THE CATLG/CAT, RECAT, AND UNCAT OPERANDS WORK THE SAME
          WAY AS THEIR RESPECTIVE COMMANDS.

))ALIAS -
          THE ALIAS OPERAND WILL TELL WYLBUR THAT THE NEW MEMBER
          NAME SPECIFIED IS TO BE ADDED AS AN ALTERNATIVE WAY OF
          REFERRING TO THE PDS MEMBER NAMED.

=REPLACE=REPLAC=REPLA=REPL=REP=R
)F FUNCTION -

          THE WYLBUR REPLACE COMMAND ALLOWS YOU TO  REPLACE  THE
          CONTENTS OF ANY SPECIFIED RANGE OF LINES IN THE ACTIVE
          FILE.

)X SYNTAX -

         REPLACE <RANGE> (LIST OPTIONS) (DITTO)

         REQUIRED - RANGE
         DEFAULTS - NONE
         ALIAS    - REPLAC, REPLA, REPL, REP, R

          NOTES:  AS  ALTERNATE  METHOD,  YOU  MAY  REPLACE  THE
          CONTENTS  OF  A SINGLE LINE BY GIVING THE LINE NUMBER,
          FOLLOWED BY A SINGLE BLANK, AND THEN THE NEW  CONTENTS
          OF THE LINE.  THE "LIST" OR "NOTEXT" OPTIONS WILL LIST
          THE LINE BEFORE IT IS REPLACED WHICH GIVES YOU TIME TO
          ABORT  THE  COMMAND  BY PRESSING THE (CR).  DO NOT USE
          "L" FOR "LIST"  AS  THIS  PARAMETER;  "L"  STANDS  FOR
          "LAST".

)O OPERANDS -

))RANGE -
          SPECIFIES THE RANGE OF LINES  FOR  WHICH  WYLBUR  WILL
          PROMPT  WITH  SUCCESSIVE LINE NUMBERS IN THE SPECIFIED
          <RANGE>, AND YOU MAY TYPE IN THE  NEW  CONTENTS  AFTER
          EACH  PROMPT.   A  (CR)  CAUSES  THAT  LINE  NOT TO BE
          REPLACED.  THIS IS CONTINUED UNTIL THE RANGE OF  LINES
          IS EXHAUSTED.

))LIST OPTIONS -
          ANY OF THE OPTIONS VALID UNDER THE  LIST  COMMAND  ARE
          VALID OPTIONS.

))DITTO -
          DITTO CAUSES REPLY GIVEN TO THE  FIRST  PROMPT  TO  BE
          USED TO REPLACE ALL LINES IN THE RANGE.

=RESTORE=RESTOR=RESTO=REST=RES
)F FUNCTION -

          THE WYLBUR RESTORE COMMAND IS USED TO MOVE THE CURRENT
          EXEC FILE TO  THE  ACTIVE  FILE.   YOU  MAY  NOT  MAKE
          MODIFICATIONS  DIRECTLY  TO  THE  EXEC  FILE.  TO MAKE
          MODIFICATIONS, YOU MUST FIRST MOVE THE  EXEC  FILE  TO
          THE ACTIVE FILE.

)X SYNTAX -

         RESTORE (CLEAR)

         REQUIRED - NONE
         DEFAULTS - NONE
         ALIAS    - RESTOR, RESTO, REST, RES

)O OPERAND -
          SPEICIFICATION OF THE CLEAR OPERAND CLEARS THE  ACTIVE
          FILE  PRIOR TO MOVING THE EXEC FILE IN.  IF YOU DO NOT
          SPECIFY THIS OPERAND AND THE ACTIVE FILE CONTAINS DATA
          WYLBUR WILL PROMPT WITH "OK TO CLEAR?  ".   THE  VALID
          REPLIES  TO  THE  PROMPT  ARE "YES" OR "OK", ANY OTHER
          REPLY WILL TERMINATE THE COMMAND  AND  RETURN  YOU  TO
          COMMAND MODE.

=RUN
)F FUNCTION -
          THE WYLBUR RUN COMMAND ALLOWS YOU TO  PUT  THE  ACTIVE
          FILE INTO THE JOB INPUT STREAM OF THE COMPUTER.

)X SYNTAX -

         RUN (RANGE) (LIST OPTIONS)

         REQUIRED - NONE
         DEFAULTS - RANGE=ALL, ACTIVE
         ALIAS    - NONE

)O OPERANDS -

))RANGE -
          IF SPECIFIED, TELLS WYLBUR TO SUBMIT  ONLY  THE  LINES
          SPECIFIED.   DEFAULT  IS  ALL  LINES.  ALL JCL THAT IS
          REQUIRED TO RUN THE JOB MUST BE CONTAINED IN THE FILE.
          THE FIRST LINE IN THE RANGE MUST BE A  JOB  CARD.   IF
          THE  RANGE  CONTAINS MULTIPLE JOB CARDS, MULTIPLE JOBS
          ARE SUBMITTED.

))LIST OPTIONS -
          ANY OF THE OPTIONS AVAILABLE UNDER  THE  LIST  COMMAND
          ARE  VALID FOR THE "RUN" COMMAND EXCEPT THE "SQUASHED"
          OPTION.  THE OPTION NUMBERED OR INTEGER WILL CAUSE THE
          LINE NUMBERS OF THE RANGE TO APPEAR IN THE JOB  OUTPUT
          AS SEQUENCE NUMBERS.  USING "UNN" WILL CAUSE WYLBUR TO
          SUBMIT ONLY THE DATA AND IS RECOMMENDED BECAUSE OF THE
          FASTER LISTING WHEN DOING THE "OUT" COMMAND.
=SAVE=S=SA=SAV
)F FUNCTION -
          THE WYLBUR SAVE COMMAND IS USED TO SAVE USER DATA FROM
          THE ACTIVE FILE IN AN EXTERNAL FILE (DATA SET).

)X SYNTAX -

         SAVE (*/<DSNAME>) (ON <VOLUME>/CATLG) (SCRATCH/REPLACE)
              (UNN/NUMBERED/INTEGER) (CATLG/RECATLG/UNCATLG)
              (CLEAR/CLR) (EDIT/LRECL='NNN'/CARD/PRINT)
              (LINES <RANGE>) (SET/NOSET) (N)
              (SEQFLD=(END/POS ',LEN')) (INTEGER/INT)

         REQUIRED - DSNAME
         DEFAULTS - ON CATLG, EDIT, NOSET, UNN
         ALIAS    - SAV, SA, S

         NOTE ----- THE OPTIONAL OPERANDS ARE KEYWORD TYPE AND
                    MAY APPEAR IN ANY SEQUENCE. DSNAME IS THE
                    ONLY REQUIRED OPERAND.

)O OPERANDS -

))DSNAME -
          REQUIRED OPERAND THAT SPECIFIES THE NAME  UNDER  WHICH
          YOU  WANT THE DATA STORED.  SHOULD CONFORM TO THE DATA
          SET  NAMING  CONVENTIONS  OUTLINED  UNDER  HELP  ENTRY
          "DSNAMES".


))ON <VOLUME>/CATLG -

          ON <VOLUME> SPECIFIES THE VOLUME  NAME  ON  WHICH  THE
          DATA  SET  IS TO BE SAVED.  IT IS OPTIONAL IF YOU HAVE
          PREVIOUSLY ENTERED A VOLUME NAME VIA THE "SET  VOLUME"
          COMMAND.   AS  WITH  "USE", "ON <VOLUME>" SPECIFIED IN
          THE "SAVE" COMMAND OVERRIDES ANY PREVIOUSLY SET VOLUME
          NAME (INCLUDING THE DEFAULT  OF  VOLUME=CATLG  SET  AT
          LOGON  TIME).   "ON  CATLG"  MAY BE USED IN THE "SAVE"
          COMMAND ONLY IF THE DATA SET IS A CATALOGED PDS OR  IF
          THE  DATA  SET  TO  BE SAVED IS TO REPLACE A CATALOGED
          SEQUENTIAL DATA SET ON THE SAME VOLUME.  "ON CATLG" IS
          ASSUMED IT THE <DSNAME> IS A STANDARD  WYLBUR  LIBRARY
          AND  THE  VOLUME  INFORMATION IS NOT SUPPLIED FROM ANY
          SOURCE.


))SCRATCH/REPLACE -
          WYLBUR WILL NOT PERMIT YOU TO "SAVE" A DATA SET  OR  A
          MEMBER  OF  A  PDS  WITH  A DUPLICATE NAME ON THE SAME
          VOLUME OR IN THE SAME PDS.  SHOULD YOU ATTEMPT  TO  DO
          THIS,  WYLBUR  ASKS  IF  YOU  WANT THE OLD DATA SET OR
          MEMBER TO BE REPLACED WITH THE NEW DATA.  IF  YOU  ARE
          AWARE  OF  THIS  CONDITION  WHEN  YOU ENTER THE "SAVE"
          COMMAND, YOU MAY PRE-EMPT THIS DIALOGUE BY  SPECIFYING
          "SCRATCH" OR "REPLACE".  WHEN A SEQUENTIAL DATA SET IS
          REPLACED, THE OLD DATA SET IS SCRATCHED BEFORE THE NEW
          DATA  IS  SAVED,  IF  YOU SPECIFY "SCRATCH".  HOWEVER,
          WHEN A PDS MEMBER IS REPLACED, THE NEW MEMBER IS ADDED
          TO THE PDS AND THE DIRECTORY IS UPDATED AFTER THE  NEW
          MEMBER HAS BEEN WRITTEN.

          NOTE.....THE  WORDS  "SCRATCH  AND  REPLACE"  MAY   BE
          SHORTENED TO "SCR" AND "REP".

))NUMBERED/NUM/INTEGER -
          WHEN A FIXED BLOCK DATA SET IS SAVED, WYLBUR  NORMALLY
          DOES  NOT PLACE LINE NUMBERS IN THE RECORDS.  WHEN THE
          FILE IS USED AGAIN, LINE NUMBERS ARE  GENERATED.   THE
          "NUMBERED/NUM"  OPTION SPECIFIES THAT WYLBUR TYPE LINE
          NUMBERS  SHOULD  BE  SAVED  IN  THE   SEQUENCE   FIELD
          (DEFAULTS  TO  COLUMNS 73/80 UNLESS THE SEQFLD OPERAND
          IS USED).  THE "INTEGER/INT" OPTION TELLS WYLBUR  THAT
          THE LINE NUMBERS SHOULD BE INTEGER TYPE NUMBERS.

))CATLG/RECATLG/UNCATLG -
          YOU MAY SPECIFY THAT THE SYSTEM CATALOG THE  DATA  SET
          AFTER  IT  HAS  BEEN  SAVED SO THAT YOU DO NOT HAVE TO
          REMEMBER THE VOLUME NAME ON WHICH IT HAS  BEEN  SAVED.
          THIS  IS  DONE  WITH  THE  "CATLG"  OPERAND.   IF  THE
          SPECIFIED DATA SET NAME ALREADY EXISTS IN THE CATALOG,
          YOU  ARE  INFORMED BY WYLBUR.  IF YOU WANT TO SAVE THE
          DATA SET ON A VOLUME OTHER THAN THE ONE ON WHICH IT IS
          CATALOGED, YOU MUST USE  THE  "RECATLG"  OPERAND.   IF
          THIS IS THE CASE, THE SYSTEM WILL CATALOG THE DATA SET
          ON  THE  NEW  VOLUME  WHETHER  OR  NOT  IT  IS ALREADY
          CATALOGED.  "RECATLG" WILL NOT SCRATCH  THE  OLD  DATA
          SET,  IT  IS  ONLY UNCATALOGED.  "CATLG" AND "RECATLG"
          ARE IGNORED WHEN  "ON  CATLG"  IS  SPECIFIED  FOR  THE
          VOLUME.   YOU MAY UNCATALOG THE DATA SET AFTER SAVE BY
          SPECIFYING "UNCATLG".  THIS IS NOT RECOMMENDED BECAUSE
          UNCATALOGED DATA SETS ARE SCRATCHED AFTER THREE DAYS.

))CLEAR -
          IF THIS OPERAND  IS  SPECIFIED,  THE  ACTIVE  FILE  IS
          CLEARED AFTER THE SAVE OPERATION IS COMPLETE.

))EDIT/LRECL='NNN'/CARD/PRINT -
          THIS OPERAND IS KNOWN  AS  THE  "FORMAT  OPERAND"  AND
          SPECIFIES  THE  FORM IN WHICH THE DATA IS TO BE SAVED.
          "EDIT" IS THE DEFAULT VALUE FOR THE SAVE COMMAND.  THE
          OTHER  OPTIONS  ARE  PERMITTED  WHEN  YOU  SPECIFY   A
          SEQUENTIAL  DATA SET BUT IF A PDS MEMBER IS SPECIFIED,
          A WARNING MESSAGE WILL ASK IF YOU WANT THE  FORMAT  OF
          THE  ENTIRE  PDS  CHANGED  IF NOT SPECIFIED CORRECTLY.
          ANY RESPONSE OTHER THAN "YES" OR "OK" WILL  ABORT  THE
          SAVE.    THIS   IS   BECAUSE   ALL   MEMBERS   IN  THE
          PRE-ALLOCATED PDS ARE IN THE SAME FORMAT.  CARD IS  AN
          ABBREVIATED  WAY  OF  SAYING  LRECL=80,  PRINT  IS  AN
          ABBREVIATED  WAY  OF  SAYING LRECL=133.  "CARD" FORMAT
          (LRECL=80) IS ASSUMED IF NUMBERED, INTEGER, SEQFLD, OR
          NOPOINT IS SPECIFIED WITHOUT ANY EXPLICIT FORMAT.

))LINES <RANGE> -
          YOU MAY "SAVE" ONLY A PORTION OF THE  ACTIVE  FILE  BY
          SPECIFYING AN EXPLICIT RANGE WITH THE LINES OPERAND.

))SET/NOSET -
          "NOSET" IS THE DEFAULT AND TELLS WYLBUR NOT  TO  RESET
          THE  PREFIX  AND  MEMBER FIELDS.  IF YOU USE THE "SET"
          OPTION WYLBUR WILL RETAIN THE PREFIX AND MEMBER FIELDS
          USED IN THE COMMAND.

))N -
          IF ANY FORMAT OTHER  THAN  "EDIT"  IS  SPECIFIED,  THE
          RECORDS   ARE  SAVED  IN  A  FIXED  BLOCKED  DATA  SET
          (RECFM=FB).  IF THE RECORDS IN  THE  ACTIVE  FILE  ARE
          SHORTER   THAN   THE   SPECIFIED   LRECL,   THEY   ARE
          RIGHT-PADDED  WITH  BLANKS.  IF THE RECORDS ARE LONGER
          THAT THE SPECIFIED LRECL, THEY ARE  TRUNCATED  ON  THE
          RIGHT.   IN  EITHER  CASE,  THE BLOCKING FACTOR MAY BE
          SPECIFIED AS (N) IN THE SAVE COMMAND; IN  OTHER  WORDS
          THE  DATA SET BLKSIZE WILL BE "LRECL" TIMES (N), WHERE
          "LRECL"  IS  THE  'NNN'   VALUE   SPECIFIED   IN   THE
          "LRECL=NNN" OPERAND.

))SEQFLD=(END/POS',LEN') -
          THE SEQFLD  OPERAND  IS  USED  TO  CHANGE  THE  NORMAL
          POSITION  OR  LENGTH  OF THE LINE NUMBERS IN THE SAVED
          RECORDS.   THE  NORMAL  POSITION  IS  THE  LAST  EIGHT
          POSITIONS OF EACH RECORD (SEQFLD=(END,8)).  ANY COLUMN
          POSITION (POS) AND ANY LENGTH (LEN) LESS THAN  10  CAN
          BE  SPECIFIED.  LINE NUMBERS ARE TRUNCATED ON THE LEFT
          TO THE SIZE SPECIFIED WITHOUT  CHECKING  FOR  LOSS  OF
          DIGITS.   THE PARENTHESES CAN BE OMITTED IF THE LENGTH
          IS NOT CHANGED.

))INTEGER/INT -
          THE "NOPOINT"  OPERAND  ASSUMES  THAT  THE  "NUMBERED"
          OPERAND  HAS  BEEN SPECIFIED AND TELLS WYLBUR THAT THE
          LINE NUMBERS SHOULD BE PUT IN THE  RECORDS  WITHOUT  A
          DECIMAL POINT OR ZERO SUPPRESSION.

=SCRATCH=SC=SCR=SCRA=SCRAT=SCRATC
)F FUNCTION -

          THE WYLBUR SCRATCH COMMAND ALLOWS YOU TO  SCRATCH  ANY
          <EXTERNAL FILE> THAT BELONGS TO YOU.

)X SYNTAX -

         SCRATCH <DSNAME> (ON <VOLUME>/CATLG) (SET/NOSET)
                 (UNCATLG) (PDS)

         REQUIRED - DSNAME
         DEFAULTS - ON CATLG, NOSET
         ALIAS    - SCRATC, SCRAT, SCRA, SCR, SC

)O OPERANDS -

))DSNAME -
         THE DATA SET NAME TO BE SCRATCHED.
))ON VOLUME/CATLG -
          IF SPECIFIED, TELLS WYLBUR WHERE TO LOOK FOR THE  DATA
          SET.
))SET/NOSET -
          IF "SET" IS SPECIFIED, PREFIX AND MEMBER ARE RESET  TO
          THE <DSNAME>.  NOSET IS DEFAULT.
))UNCATLG -
          THIS OPERAND TELLS WYLBUR TO UNCATALOG  THE  DATA  SET
          AND  MUST  BE  SPECIFIED  IF "ON VOLUME" GLOBAL IS NOT
          EQUAL TO CATLG.
))PDS -
          ONLY A SEQUENTIAL DATA SET OR MEMBERS  OF  A  PDS  CAN
          NORMALLY  BE  SCRATCHED.   IF  YOU  WANT TO SCRATCH AN
          ENTIRE PDS, YOU MUST SPECIFY THE PDS OPERAND.  IF THIS
          IS NOT SPECIFIED AND THE <DSNAME> IS A PDS,  A  PROMPT
          WILL  BE  GIVEN  TO ASK YOU IF YOU WANT THE ENTIRE PDS
          SCRATCHED.  ANY RESPONSE OTHER THAN "YES" OR "OK" WILL
          ABORT THE COMMAND AND RETURN YOU TO THE COMMAND MODE.

=SET
)F FUNCTION -

          THE WYLBUR SET COMMAND IS  USED  TO  SET  THE  VARIOUS
          GLOBALS  HAVING  TO DO WITH OVERALL, GENERAL OPERATION
          AND THOSE THAT SPECIFICALLY  DEAL  WITH  EXECUTION  OF
          EXEC FILES.  BOTH SETS OF GLOBALS THAT MAY BE SET WITH
          THIS COMMAND ARE COVERED IN THIS ENTRY.  THOSE DEALING
          WITH  THE  EXEC  FILES  ARE  SET  WITH  THE "SET EXEC"
          COMMAND.  THE ONLY WAY WYLBUR DISTINGUISHES IS BY  THE
          "EXEC" KEYWORD.  ANY GLOBAL THAT IS SET WITH THE "SET"
          COMMAND  MAY  BE  DISPLAYED BY USING THE CORRESPONDING
          "SHOW" COMMAND.  BOTH THE "SET" AND  "SHOW"  HAVE  THE
          SAME SYNTAX.

)X SYNTAX -

         SET         (USER=UUUUU) (VOLUME=XXXXXX) (LENGTH=III)
                     (TERSE/VERBOSE) (DELTA=NNN) (BREAK/NOBREAK)
                     (CRT/NOCRT) (ESC 'K') (MEMBER=CCCCCCCC)
                     (NAME=BBBBBBBB) (PREFIX <STRING>) (SKIP C)
                     (TABS) (UPLOW/UPPER) (CURRENT <LINENO>)
                     (RESCAN=N)

         SET EXEC    (CURRENT <LINENO>) (TERSE/VERBOSE) (LOG/NOLOG)

         REQUIRED - NONE
         DEFAULTS - NONE
         ALIAS    - NONE

)O OPERANDS -

))USER=UUUUU -
          USED TO CHANGE THE FIRST QUALIFIER  (USERID)  THAT  IS
          USED  AS  A DEFAULT WHEN "USING" A DATA SET.  TO RESET
          THIS GLOBAL VALUE TO THE ORIGINAL "SIGNON" VALUE,  MAY
          BE  DONE  WITH "SET USER=<SIGNON VALUE>" OR "SET USER"
          WITH NO USERID SPECIFIED.

))VOLUME=XXXXXX -
          THE DEFAULT VALUE ASSIGNED THIS GLOBAL AT SIGNON  TIME
          IS  "VOLUME=CATLG".  THIS GLOBAL TELLS WYLBUR WHERE TO
          LOOK FOR  DATASETS  DURING  A  "USE"  COMMAND  (UNLESS
          SPECIFICALLY  OVERRIDDEN)  OR  WHERE TO PLACE DATASETS
          DURING    A    "SAVE"    OPERATION.      NOTE.........
          "VOLUME=CATLG" IS AN INVALID VOLUME AND CARE SHOULD BE
          TAKEN  TO  EXPLICITLY  SPECIFY  A  VALID VOLUME DURING
          SAVING OPERATIONS.

))LENGTH=III -
          THE LENGTH IS THE NUMBER OF CHARACTERS WHICH MAY BE IN
          ANY LINE  OF  TEXT.   IF  YOU  TYPE  A  LINE  OF  TEXT
          CONTAINING MORE THAN THIS NUMBER OF CHARACTERS, WYLBUR
          WILL  ACCEPT THE LINE BUT ISSUE A WARNING MESSAGE THAT
          YOU HAVE EXCEEDED THE "LENGTH" LIMIT.   "III"  MAY  BE
          ANY INTEGER BETWEEN 1 AND 133 INCLUSIVE.  LENGTH HAS A
          SIGNON DEFAULT OF 72.

))TERSE/VERBOSE -
         SET TERSE/VERBOSE

          THE "SET TERSE" COMMAND SHORTENS  THE  WYLBUR  COMMAND
          PROMPT  "COMMAND?" TO "?".  IN ADDITION, ALL <DSNAMES>
          WILL BE LISTED IN AN ABBREVIATED FORM INSTEAD  OF  THE
          FULL  <DSNAME> DURING A "SHOW DSNAMES" OPERATION.  ALL
          COMMANDS CONTAINING THE PRE-PROCESSOR ESCAPE  OR  SKIP
          CHARACTERS WILL NOT HAVE THE PROCESSED COMMAND LISTED.
          THE "SET VERBOSE" COMMAND WILL RESUME THE VERBOSE MODE
          WHICH  IS  THE  REVERSE OF "TERSE" MODE.  "VERBOSE" IS
          THE DEFAULT AT SIGNON TIME.

         SET EXEC TERSE/VERBOSE

          THE "SET EXEC TERSE" CAN BE USED TO GOVERN THE  FORMAT
          OF  THE  MESSAGES  WHICH  APPEAR  ON  THE  TERMINAL IN
          RESPONSE TO AN  "EXEC"  COMMAND.   "TERSE"  SUPPRESSES
          REPRINTING OF EXEC LINES WITH PRE-PROCESSOR "SKIP" AND
          "ESC" CHARACTERS.  "VERBOSE" IS THE SIGNON VARIABLE.

))DELTA=NNN -
          SPECIFYING "DELTA=NNN" SETS THE DEFAULT VALUE  OF  THE
          LINE  NUMBER  INCREMENT GLOBAL, "DELTA".  "NNN" MAY BE
          ANY  VALUE  BETWEEN  0.001  AND  99999.999  INCLUSIVE.
          "DELTA" HAS A SIGNON VALUE OF 1.000.

))CRT/NOCRT -
          THE "SET CRT" AND "SET NOCRT" COMMANDS ARE LEGAL  ONLY
          FOR  CRT-TYPE TERMINALS (3277 AND OMRON), AND WILL SET
          OR UNSET THE PAGING OPTION DESCRIBED BELOW.

          WHEN "NOCRT" IS IN EFFECT AND A  LISTING  OF  A  RANGE
          LONGER  THAN THE SCREEN SIZE (25 LINES) IS BEING DONE,
          THE LISTING WILL FLOW OFF THE TOP OF THE SCREEN  UNTIL
          THE  LISTING  IS  OVER.   WHEN  "CRT"  IS  IN  EFFECT,
          HOWEVER, A LISTING WILL PAUSE WHEN THE SCREEN HAS BEEN
          FILLED  AND  WYLBUR  WILL PROMPT WITH A COLON (:).  AT
          THIS POINT YOU MAY RESPOND WITH THE FOLLOWING:

                   (CR) -- LISTING IS CONTINUED UNTIL THE SCREEN IS
                           FILLED AGAIN.
                   (ATTN) -- THE COMMAND IS ABORTED.
                   A 3-DIGIT NUMBER, FOLLOWED BY (CR) -- THIS WILL
                   CONTINUE LISTING THAT NUMBER OF LINES BEFORE THE
                   NEXT (:) PROMPT.  IF THE NUMBER IS GREATER THAN 256
                   THE NUMBER OF LINES LISTED WILL BE THE REMAINDER OF
                   DIVIDING THAT NUMBER BY 256.  THE NUMBER MUST BE AN
                   INTEGER LESS THAN 1000.


))ESC 'K' -
          "SET  ESCAPE  'K'"  SETS  THE   PRE-PROCESSOR   ESCAPE
          CHARACTER   WHICH   IS  THE  TRIGGER  THAT  TELLS  THE
          PRE-PROCESSOR  THAT  IT  HAS  WORK  TO  DO.   THE  'K'
          CHARACTER DOES NOT  HAVE  TO  BE  ENCLOSED  IN  QUOTES
          UNLESS  IT  IS  A  SPECIAL  CHARACTER (E.G.  =,()'" OR
          BLANK).  "SET  ESCAPE  (CR)"  WITH  NO  'K'  CHARACTER
          OPERAND  UNSETS  THE  ESCAPE  CHARACTER  AND TURNS OFF
          PRE-PROCESSOR SCANNING.

))MEMBER=CCCCCCCC -
          "SET MEMBER=CCCCCCCC"  IS  USED  TO  SET  THE  DEFAULT
          MEMBER NAME THAT WILL BE USED TO FORM A <DSNAME>.  THE
          <MEMBER  NAME>  SPECIFIED MAY NOT EXCEED 8 CHARACTERS.
          IF THE <MEMBER NAME> IS OMITTED, IT IS  SET  TO  NULL.
          AT  SIGNON,  IT  IS SET TO NULL.  THE CURRENT VALUE OF
          "MEMBER" CAN BE SHOWN AT ANY TIME WITH  "SHOW  MEMBER"
          OR "SHOW NAME".

))NAME=BBBBBBBB -
          THE "SET NAME" COMMAND ALLOWS YOU TO SET THE VALUES OF
          THE USER, PREFIX, AND/OR MEMBER  FIELDS  (GLOBALS)  IN
          ONE  COMMAND.  THE <DSNAME> IS FORMED IN THE USUAL WAY
          EXCEPT THAT THE DEFAULT "PREFIX" IS NULL  RATHER  THAN
          "LIB"  (SEE "DSNAMES" AND THE DESCRIPTION OF THE "USE"
          COMMAND).  "SHOW NAME" IS USED TO DISPLAY THE  CURRENT
          VALUES OF USER, PREFIX, AND MEMBER.

))PREFIX <STRING> -
          "SET PREFIX <STRING>"  COMMAND  IS  USED  TO  SET  THE
          PREFIX  THAT  CAN  BE USED IN BUILDING A <DSNAME>.  IN
          THIS COMMAND <STRING> IS NOT ENCLOSED IN  QUOTES.   IF
          <STRING>  IS  OMITTED,  THE PREFIX IS SET TO NULL.  AT
          SIGNON, THE PREFIX IS SET TO NULL.

          "SET  PREFIX  *<STRING>"  SETS   THE   PREFIX   TO   A
          CONCATENATION  OF  THE  OLD VALUE AND <STRING>.  "SHOW
          PREFIX" OR "SHOW NAME" MAY BE USED TO SHOW THE CURRENT
          VALUE OF "PREFIX".

))SKIP C -
          THE  "SET  SKIP  C"  COMMAND  IS  USED  TO   SET   THE
          PRE-PROCESSOR   SKIP   CHARACTER.   THE  "C"  MUST  BE
          ENCLOSED IN QUOTES IF THE CHARACTER USED IS A  SPECIAL
          CHARACTER (E.G., =,()'" OR BLANK).

))TABS -
          TABS MAY BE SET BY SPECIFYING THE COLUMN NUMBERS  THAT
          TABS  ARE TO BE SET, SUCH AS "SET TABS 10 30 55".  YOU
          MAY ALSO  ALLOW  WYLBUR  TO  PROMPT  YOU  WITH  COLUMN
          NUMBERS  IN  WHICH  YOU SPACE OVER AND ENTER A 1.  SEE
          THE HELP  ENTRY  FOR  TABS  FOR  COMPLETE  DETAILS  ON
          SETTING TABS.

))UPLOW/UPPER -
          THE "SET UPLOW" COMMAND CONTROLS HOW WYLBUR  PERCEIVES
          THE  DATA THAT IS COMING IN.  THE DEFAULT AT SIGNON IS
          THE DEFAULT CASE AT SIGNON IS "UPPER" AND USE OF  THIS
          COMMAND  IS  THE ONLY WAY TO CHANGE THAT .....WITH ONE
          EXCEPTION....IF YOU  USE  THE  "CHANGE  TO  UPPER"  OR
          "CHANGE  TO LOWER" OPERANDS OF THE CHANGE COMMAND, THE
          CASE SETTING IS AUTOMATICALLY SET TO "UPLOW".

))CURRENT <LINENO> OR * -
          "SET CURRENT" SETS THE <CURRENT LINE POINTER>  TO  THE
          <LINENO>  SPECIFIED.   "SET  CURRENT 80" WOULD SET THE
          <CURRENT LINE POINTER> OF THE ACTIVE FILE TO 80.   USE
          OF  THE  KEYWORD  "EXEC"  SETS  THE  EXEC FILE POINTER
          INSTEAD OF THE ACTIVE FILE.

))RESCAN -
          "SET  RESCAN"   SETS   THE   NUMBER   OF   TIMES   THE
          PRE-PROCESSOR  WILL  RESCAN  A  LINE  CONTAINING  SKIP
          CHARACTERS.    SEE  THE  HELP  ENTRIES  (PREPROC1  AND
          PREPROC2) FOR A COMPLETE EXPLANATION OF OPERATIONS.

))LOG/NOLOG -
          "SET NOLOG" SUPPRESSES PRINTING OF EACH  LINE  IN  THE
          EXEC  FILE  AS  IT  IS EXECUTED.  DEFAULT AT SIGNON IS
          "LOG".

=SHOW=SHO=SH
)F FUNCTION -

          THE WYLBUR SHOW COMMAND IS USED TO SHOW THE VALUES  OF
          THE  DEFAULTS THAT ARE SET WITH THE "SET" COMMAND.  IN
          ADDITION TO THE VALUES OF THE DEFAULTS, YOU  MAY  ALSO
          USE ANY OF THE BELOW LISTED "SHOW COMMANDS" TO LOOK AT
          VARIOUS  OTHER THINGS THAT ARE COMMONLY OF INTEREST TO
          A USER DURING A SESSION.  BECAUSE  OF  THE  REPETITIVE
          NATURE  OF  LISTING ALL OF THE OPTIONS AVAILABLE, THIS
          ENTRY WILL NOT LIST THE OPTIONS AGAIN.  SEE  THE  HELP
          ENTRY  FOR  THE SET COMMAND FOR ALL OPTIONS.  THE SHOW
          COMMAND WILL SHOW THE VALUES OF ALL OF THE OPTIONS  OF
          THE SET COMMAND.

         SHOW CATLG

          IN A DEPARTURE FROM THE NORMAL HELP FORMAT, THE SYNTAX
          OF THIS COMMAND IS:

         SHOW CATLG (FOR */INDEX PATTERN) (USER) (UNCATLG)
                    (SET/NOSET) (NOTYPE) (FROM/EXCLUED <STRING1>)
                    (THRU/TO <STRING2>)

          THE SHOW CATLG COMMAND IS USED TO DISPLAY  A  LIST  OF
          DSNAMES  AND/OR  INDEX  POINTERS  BELOW  A GIVEN INDEX
          NODE.  ONLY ONE LEVEL OF INDEX NAME MAY BE LISTED IN A
          SINGLE COMMAND.  THE  "INDEX  PATTERN"  IN  THE  "FOR"
          OPERAND  SPECIFIES  THE  VALID  LEVEL OF INDEX USED TO
          SEARCH THE CATALOG.  ONLY THOSE  NAMES  FOUND  AT  THE
          NEXT  LEVEL OF INDEX BELOW THE PATTERN WILL BE LISTED.
          IF THE "FOR" OPERAND IS OMITTED, THE "SAVED  USER"  IS
          USED TO FORM THE INDEX PATTERN.  EXAMPLE:

                   COMMAND?  SHOW CAT FOR $SYS1 FROM GHI TO STU (CR)

          YOU WILL NOTICE THAT IN THE ABOVE  EXAMPLE,  THE  WORD
          "CATLG"  MAY  BE  ABBREVIATED  TO "CAT".  THIS COMMAND
          WILL LIST ALL  DATASETS  WITH  A  FIRST  QUALIFIER  OF
          "SYS1"  THAT  HAVE A SECOND QUALIFIER WITHIN THE RANGE
          OF "GHI" TO, BUT NOT INCLUDING THOSE WITH "STU".

          NORMALLY EACH ENTRY ALSO SHOWS THE TYPE OF  ENTRY  AND
          OTHER PERTINENT INFORMATION FOR THAT ENTRY SUCH AS THE
          VOLUME NAME ON DATA SET ENTRIES.  THIS INFORMATION MAY
          BE   SUPPRESSED   WITH   THE  "NOTYPE"  OPERAND.   THE
          "UNCATLG"  OPTION  LISTS  EVERY  DATA  SET  NAME  THAT
          BELONGS TO YOU AND ASKS IF IT SHOULD BE  UNCATALOGUED.
          ALL  OTHER  OPERANDS ARE SIMILAR TO THE "SHOW DSNAMES"
          COMMAND (LISTED BELOW).

         SHOW COLUMNS

          THIS COMMAND WILL PRODUCE  A  LINE  CONTAINING  COLUMN
          NUMBERS.   IT  IS  USUALLY USED TO DECIDE WHERE TO SET
          THE  TABS  OR  WHAT  COLUMNS  TO  SPECIFY  IN  ANOTHER
          COMMAND.  THERE IS ONLY ONE OPERAND, "UNNUMBERED/UNN".
          USING THIS OPERAND WILL DISPLAY THE  COLUMNS  AS  THEY
          WOULD  BE  POSITIONED  IN  A  "LIST UNN" COMMAND.  THE
          NUMBERS GO FROM 1 TO 9, THEN AN  ALPHABETIC  CHARACTER
          WHERE A=10,B=20,C=30...M=130.

         SHOW DATE

          THIS  COMMAND  DISPLAYS  THE  DATE  IN  TWO  FORMS  --
          MM/DD/YY AND THE JULIAN DATA -- AS WELL AS THE TIME OF
          DAY.

         SHOW DIRECTORY/DIR

          THE SHOW DIRECTORY COMMAND PRODUCES A LIST  OF  MEMBER
          NAMES  FROM  THE  SPECIFIED  PDS.   THE  FORMAT OF THE
          COMMAND IS:

                   SHOW DIR (IN/FOR <DSNAME>) (USER UUUUU)
                            (ON <VOLUME>) (FROM/EXCLUDE (<STRING1>/#))
                            (THRU/TO (<STRING2>/#)) (SCRATCH/SCR) (ALL)
                            (SET/NOSET)

          IF THE "IN <DSNAME>" OPERAND IS OMITTED,  THE  DEFAULT
          NAME  ".LIB"  IS  ASSUMED  FOR  THE CURRENT USER.  THE
          FROM/THRU/EXCLUED/TO OPERANDS FUNCTION IDENTICALLY  TO
          THEIR USE IN THE "SHOW DSNAMES" (LISTED BELOW) COMMAND
          EXCEPT THAT IN THIS COMMAND THEY REFER TO MEMBER NAMES
          RATHER  THAN  DATA SET NAMES.  IF "#" IS SPECIFIED FOR
          EITHER OF THE STRINGS, THE CURRENT VALUE  IN  "MEMBER"
          IS  USED  FOR  THAT  STRING.  THE "SCRATCH" OPERAND IS
          ALSO IDENTICAL TO THE "SHOW DSNAMES"  EXCEPT  THAT  IT
          APPLIES  TO  MEMBERS  INSTEAD OF DATA SETS.  THE "SET"
          OPTION SETS THE "PREFIX" TO <DSNAME>  AND  UNSETS  THE
          "MEMBER" NAME.

          USUALLY  ONLY  THE  MEMBER  NAMES  ARE  SHOWN  IN  THE
          RESULTING LIST.  HOWEVER, IF YOU WANT TO SEE THE OTHER
          INFORMATION CONTAINED IN THE  PDS  DIRECTORY,  SPECIFY
          "ALL".  THIS CAUSES A HEXADECIMAL DISPLAY OF THE OTHER
          DIRECTORY INFORMATION:

                   COMMAND?  SHOW DIR ALL
                   UUUUU.LIB
                   FILE1 00020102 00003068
                   FILE2 00030102 00003072
                   FILE3 00020182 00003068

          THE SEVENTH DIGIT OF THE  FIRST  SET  OF  NUMBERS,  IF
          EQUAL  TO AN EIGHT, INDICATES AN ALIAS.  FILE3 IS THUS
          AN ALIAS OF FILE1.  THE  FIFTH  DIGIT  OF  THE  SECOND
          GROUP  OF  NUMBERS  INDICATES  THE  YEAR  THE FILE WAS
          CREATED (1973), AND THE NEXT THREE DIGITS INDICATE THE
          DAY.  FILE1 AND FILE3 WERE CREATED ON THE 68TH DAY  OF
          1973, FILE2 WAS CREATED ON THE 72ND DAY OF 1973.

         SHOW DSNAMES

          THE "SHOW DSNAMES" COMMAND PRODUCES A LIST OF  DSNAMES
          ON  A  GIVEN VOLUME WHICH SATISFY THE LIMITS SPECIFIED
          IN THE COMMAND.  THE FORMAT OF THE COMMAND IS:

         SHOW DSNAMES/DSN (LIKE <DSNAME>)
                          (FROM/EXCLUDE (<STRING1>/*))
                          (THRU/TO (<STRING2>/*)) (ON <VOLUME>)
                          (SET/NOSET) (SKIP N) (SCRATCH) (DATED)
                          (TYPE) (SPACE/SIZE/TRACKS/ALL)

          IF THE COMMAND IS ISSUED WITH NO OPERANDS, WYLBUR WILL
          LIST ALL DATA SETS WHICH BELONG TO THE USER  SPECIFIED
          IN  THE  "SAVED USER" FIELD.  THE VOLUME WILL BE TAKEN
          FROM THE "ON <VOLUME>" FIELD OR  FROM  THE  LAST  "SET
          VOLUME"  COMMAND  (CATLG IS THE SIGNON DEFAULT AND MAY
          NOT BE USED).  TO DISPLAY A  LIST  OF  DATA  SETS  FOR
          OTHER  USERS,  USE THE "LIKE" OPTION.  TO LOOK AT DATA
          SET NAMES FOR ALL USERS ON A VOLUME,  USE  "LIKE  $  "
          WITH NOTHING AFTER THE "$".

          THE "LIKE" OPERAND IS  USED  TO  CONSTRUCT  A  PATTERN
          AGAINST  WHICH  ALL  DATA  SET  NAMES ON THE SPECIFIED
          VOLUME  ARE  MATCHED.   ONLY  THOSE  DATA  SET   NAMES
          BEGINNING  WITH  THE  SPECIFIED  PATTERN ARE SELECTED.
          THIS OPERAND IS SIMILAR TO "DSNAME" OPERANDS  USED  IN
          OTHER COMMANDS EXCEPT THAT THERE IS NO "LIB" DEFAULT.

          YOU MAY LIMIT THE  RANGE  OF  THE  DISPLAYED  LIST  BY
          SPECIFYING  "FROM"  AND/OR  "THRU".   "FROM <STRING1>"
          SPECIFIES THE LOWER LIMIT OF THE  DISPLAYED  LIST  AND
          "THRU <STRING2>" SPECIFIES THE UPPER LIMIT.  EITHER OR
          BOTH  MAY  SPECIFY  "*"  TO  USE  THE  CURRENT  "SAVED
          PREFIX".   IF  "PREFIX"  IS  NULL,  AND  "*"  ALONE IS
          SPECIFIED, THE VALUE OF THE STRING IS ALSO NULL; I.E.,
          THE OPERAND IS IGNORED.  BOTH <STRING1> AND  <STRING2>
          REFER  TO  THAT PART OF THE DSNAME WHICH APPEARS AFTER
          THE PATTERN CONSTRUCTED FROM THE "LIKE" OPERAND OR THE
          DEFAULT PATTERN.  THUS, IF "USER" IS SET  TO  "ABCDE",
          THE COMMAND:

         SHOW DSNAMES LIKE XYZ FROM F THRU G

         WOULD CAUSE A DISPLAY OF ALL DATA SET NAMES OF THE FORM:

         ABCDE.XYZF....  THROUGH  ABCDE.XYZG....

          YOU MAY REVERSE THIS RANGE BY SPECIFYING THE "EXCLUDE"
          KEYWORD INSTEAD OF "FROM".  IN  THAT  CASE,  ALL  DATA
          SETS  EXCEPT  THOSE  BETWEEN  THE SPECIFIED LIMITS ARE
          DISPLAYED.

          TO LIST THE NAMES OF DATA SETS OTHER THAN WYLBUR  DATA
          SETS (THOSE WITH A USERID AS FIRST QUALIFIER), SPECIFY
          THE  DSNAME  IN  QUOTES  OR  PRECEDED  BY A "$" IN THE
          "LIKE" OPERAND.  THE QUOTES  OR  $  PERFORM  THE  SAME
          FUNCTION AS IN THE DSNAME OPERAND OF OTHER COMMANDS.

          IF THE "FROM" OPERAND IS  OMITTED,  THE  RANGE  STARTS
          FROM  THE  LOWEST  DATA  SET NAME FOUND.  IF "THRU" IS
          OMITTED, THE RANGE EXTENDS THROUGH THE LAST  DATA  SET
          NAME  FOUND.   IF  BOTH ARE OMITTED, ALL DATA SETS FOR
          THE DEFAULT PATTERN OR SPECIFIED  "LIKE"  PATTERN  ARE
          LISTED.

          "SET" WILL SET THE "SAVED PREFIX AND MEMBER" FIELDS TO
          THOSE SPECIFIED IN THE COMMAND.

          YOU MAY ALSO REQUEST THAT OTHER INFORMATION ASSOCIATED
          WITH THE DATA SETS BE DISPLAYED.   "DATED"  GIVES  YOU
          THE  DATE  ON  WHICH  THE DATA SET WAS CREATED AND THE
          DATE ON WHICH IT WAS LAST ACCESSED.  "SPACE" MEANS THE
          AMOUNT OF SPACE OCCUPIED  BY  THE  DATA  SET  AND  THE
          NUMBER  OF  EXTENTS  IF  NOT  1.   "TYPE"  INFORMATION
          CONSISTS  OF  DSORG  RECFM/LRECL/BLKSIZE  SEPARATED BY
          SLASHES AS INDICATED.  IF THE VALUES ARE NOT VALID, AN
          ASTERISK APPEARS INSTEAD.

          IF "SCRATCH/SCR" IS SPECIFIED, WYLBUR WILL PROMPT WITH
          THE WORD "SCRATCH?" AND REQUIRE A RESPONSE AFTER EVERY
          DATA SET NAME LISTED WHICH BELONGS TO  YOU.   A  "YES"
          RESPONSE   WILL  CAUSE  THE  LISTED  DATA  SET  TO  BE
          SCRATCHED.
)X
)O
=LOGOFF=SIGNOFF=SO=LOGOUT
)F FUNCTION -

          THE "LOGOFF" COMMAND IS NOT VALID UNDER WYLBUR.   THIS
          WAS  DONE  TO  PREVENT  CONFUSION  ON BEGINNING USERS.
          THIS HELP  ENTRY  IS  FOR  SIGNOFF  AND  THIS  COMMAND
          REPLACES LOGOFF.

          THE LOGOUT COMMAND IS ALSO A VALID WAY TO DEPART FROM
          WYLBUR AND HAS THE SAME SYNTAX AND OPERANDS.

)X SYNTAX -

         SIGNOFF (CLEAR/CLR)

   REQUIRED - NONE
   DEFAULTS - NONE
   ALIAS    - SO

)O OPERANDS -

))CLEAR/CLR
          THIS OPERAND  IS  A  FORM  OF  PROTECTION  TO  PREVENT
          INADVERTENT LOSS OF DATA.  IF SPECIFIED, WYLBUR THINKS
          YOU  KNOW  WHAT  YOU ARE DOING AND WILL NOT PROMPT YOU
          WITH "OK TO CLEAR?".  SPECIFICATION OF THIS  PARAMETER
          WILL RESULT IN CLEARING OF ANY DATA IN THE ACTIVE FILE
          AND  TERMINATION  OF WYLBUR WITHOUT ANY PROMPTING.  IF
          THIS OPERAND IS NOT SPECIFIED, WYLBUR WILL PROMPT WITH
          "OK TO CLEAR?" AND ANY RESPONSE OTHER  THAN  "YES"  OR
          "OK"  WILL STOP THE TERMINATION PROCESS AND RETURN YOU
          TO COMMAND MODE.
=STACK=STAC=STA
)F FUNCTION -
          THE WYLBUR STACK  COMMAND  ALLOWS  YOU  TO  PLACE  TSO
          COMMANDS  ON THE TSO COMMAND STACK FROM WITHIN WYLBUR.
          SUCH COMMANDS WILL BE EXECUTED WHEN  YOU  DEPART  FROM
          WYLBUR.


)X SYNTAX -

         STACK <COMMAND>

         REQUIRED - A VALID TSO COMMAND
         DEFAULT  - NONE
         ALIAS    - STAC, STA

)O OPERANDS -
))COMMAND -
         ANY TSO COMMAND.

=SUSPEND=SUSPEN=SUSPE=SUSP=SUS
)F FUNCTION -
          THE WYLBUR SUSPEND COMMAND ALLOWS YOU  TO  TEMPORARILY
          GET  OUT  OF  WYLBUR WITHOUT LOSING ANY DATA OR GLOBAL
          VALUES SET DURING A SESSION.  WHEN RETURNING TO WYLBUR
          YOU  WILL  RECEIVE  A   MESSAGE..."SUSPENDED   SESSION
          RESTORED".

)X SYNTAX -

         SUSPEND (CLEAR/CLR)

         REQUIRED - NONE
         DEFAULT  - NOCLR
         ALIAS    - SUS, SUSP, SUSPE, SUSPEN

)O OPERAND -
))CLEAR/CLR -
         CLEARS THE ACTIVE FILE BEFORE SUSPENSION.

=TABS
)F FUNCTION -

          TABS MAY BE USED WITH  WYLBUR  TO  SPEED  UP  TERMINAL
          INPUT  AND  OUTPUT BY SKIPPING LONG STRINGS OF BLANKS.
          THIS REQUIRES A "SET TABS" COMMAND FOR INTERNAL WYLBUR
          TABS, AND THE SETTING OF  THE  HARDWARE  TABS  IF  YOUR
          TERMINAL TYPE HAS HARDWARE TABS.

          THE SETTING OF HARDWARE TABS  WILL  NOT  BE  DISCUSSED
          HERE,  ONLY  THE  INTERNAL WYLBUR TABS.  THERE ARE TWO
          WAYS TO SET TABS.

         LONG FORM --- SPACING OVER

          YOU MAY SET A MAXIMUM OF EIGHT TABS.  YOU WILL  NOTICE
          THAT  THERE  ARE  ALPHA CHARACTERS EMBEDDED WITHIN THE
          NUMERICS  IN  THE  LONG  FORM.    THESE   ARE   "10'S"
          INDICATORS WHERE A=10, B=20, C=30....M=130.

         COMMAND?  SET TABS (CR)
         TYPE A "1" BENEATH EACH POSITION AT WHICH YOU SET A TAB.
                   123456789A123456789B123456789C12345.....
                           -          -         -
                   _

          THE CURSOR WILL BE PLACED BY WYLBUR  UNDER  COLUMN  1.
          STARTING  AT  THE  LEFT, SPACE OVER TO EACH SUCCESSIVE
          COLUMN IN WHICH YOU WANT A TAB TO BE  SET,  PRESS  THE
          HARDWARE  TAB  IF  YOU HAVE THAT TYPE OF TERMINAL, AND
          THEN TYPE THE NUMBER 1.  PHYSICAL TAB SETTINGS ARE NOT
          VERIFIED ON 3277 TYPE TERMINALS.

         COMMAND?  SET TABS (CR)
         TYPE A "1" BENEATH EACH POSITION AT WHICH YOU SET A TAB.
                   123456789A123456789B123456789C12345.....
                           -          -         -
                           1          1         1 (CR)
                           1          1         1
                           1          1         1

          THE EXAMPLE ABOVE SHOWS  THE  SUCCESSFUL  SETTING  AND
          VERIFICATION  OF  THE  TABS  IN COLUMNS 9, 20, AND 30.
          BECAUSE PHYSICAL TABS WERE SET  WYLBUR  HAS  SENT  TWO
          LINES OF DATA BACK TO VERIFY CORRECT TAB SETTINGS.  IF
          YOU  DID  NOT  SET THE HARDWARE TABS, WYLBUR WILL SEND
          BACK (THE SECOND LINE IS  HARDWARE  TABS)  A  LINE  OF
          BLANKS.   IF  YOU  DID  SET  THE HARDWARE TABS AND THE
          VERIFICATION ONES ARE NOT DIRECTLY IN LINE  WITH  EACH
          OTHER,   RESET   THE   PHYSICAL  TABS.   REMEMBER,  NO
          VERIFICATION OF HARDWARE  TABS  OCCURS  ON  3277  TYPE
          TERMINALS AND YOU WILL BE INFORMED OF THIS BY WYLBUR.

         SHORT FORM --- APPENDING COLUMN NUMBERS

          YOU MAY APPEND TO THE "SET TABS"  COMMAND  A  LIST  OF
          NUMBERS  REPRESENTING  THE  COLUMN NUMBERS FOR THE TAB
          SETTINGS.  IF THE 1'S  ARE  NOT  DIRECTLY  UNDER  EACH
          OTHER,   RESET   THE   PHYSICAL  TABS  TO  THE  PROPER
          POSITIONS.

         COMMAND?  SET TABS 9 20 30 (CR)
                            1          1          1
                            1          1          1

          TO RECEIVE THE FULL BENEFIT OF THE  TABS,  YOU  SHOULD
          SET  THE  PHYSICAL  TABS AS WELL AS THE INTERNAL TABS.
          WYLBUR WILL VERIFY EACH KIND OF SETTING  BY  TYPING  A
          VERIFICATION  LINE  FOR  EACH.  THE FIRST VERIFICATION
          LINE IS THE INTERNAL TABS AND THE SECOND LINE  IS  THE
          HARDWARE  TABS.   IF THE TWO VERIFICATION LINES DO NOT
          MATCH,  RESET THE PHYSICAL TABS.

          IF YOU PRESS THE TAB KEY MORE  TIMES  THAN  THERE  ARE
          TABS  SET,  WYLBUR  WILL  SEND  THE  MESSAGE "LINE XXX
          TRUNCATED TO 133 CHARACTERS" IF THE LINE IS TOO  LONG,
          OR  IGNORE  THE  ERRONEOUS  TAB  IF  THE LINE DOES NOT
          EXCEED 133 CHARS.  IF YOU ARE NOT SURE HOW  MANY  TABS
          HAVE BEEN SET, ISSUE THE "SHOW TABS" COMMAND.

          WHEN THE "SHOW TABS" COMMAND IS  ISSUED,  WYLBUR  WILL
          ALSO  TELL  YOU  WHETHER  SLOWLIST  OR  FASTLIST IS IN
          EFFECT.  SLOWLIST AND FASTLIST HAVE NO MEANING ON  THE
          DCEC WYLBUR SYSTEM AT THIS TIME.

          YOU MAY SUPPRESS THE VERIFICATION OF TABS IN THE  "SET
          TABS"    COMMAND    BY    SPECIFYING    THE    OPERAND
          "NOVERIFY/NOVER".
=TIME=TIM=TI
)F FUNCTION -
          THE WYLBUR TIME COMMAND IS  USED  TO  DISPLAY  SESSION
          USAGE  STATISTICS.   THE  DISPLAY CONSISTS OF CPU TIME
          USED, EXECUTION TIME USED, AND SESSION LENGTH.

)X SYNTAX -

         TIME

         REQUIRED - NONE
         DEFAULTS - NONE
         ALIAS    - TIM, TI

)O OPERANDS -
               THERE ARE NO OPERANDS.
=TO=SEND
)F FUNCTION -

          THE WYLBUR "TO" COMMAND ALLOWS YOU TO SEND MESSAGES TO
          THE OPERATOR OR ANOTHER USER.  IT IS VERY  SIMILAR  TO
          THE  TSO  "SEND"  COMMAND, BUT EASIER TO USE.  YOU MAY
          USE  THE  WORD  "SEND"  INSTEAD  OF  "TO".   THEY  ARE
          SYNONYMOUS.

)X SYNTAX -

TO <OPR/UUUUU> <MESSAGE>

REQUIRED - ALL
DEFAULTS - NONE
ALIAS    - NONE

)O OPERANDS -

))OPR/UUUUU -
          "UUUUU" STANDS FOR THE USER ID OF THE PERSON TO  WHICH
          YOU WISH TO SEND THE MESSAGE.  "OPR" MEANS THAT WYLBUR
          SHOULD SEND THE MESSAGE TO THE OPERATOR.

))MESSAGE -
          THE MESSAGE TEXT THAT YOU WISH SENT.  THE MESSAGE NEED
          NOT BE ENCLOSED IN QUOTES.

=UNCATLG=UNC=UNCA=UNCAT=UNCATL
)F FUNCTION -

          THE WYLBUR UNCATLG COMMAND CAUSES THE  SPECIFIED  DATA
          SET TO BE UNCATALOGED.  THIS DOES NOT SCRATCH THE DATA
          SET.

)X SYNTAX -

         UNCATLG <DSNAME>

         REQUIED - DSNAME
         DEFAULT - NONE
         ALIAS   - UNCATL, UNCAT, UNCA, UNC

)O OPERANDS -

))DSNAME -
         USED TO SPECIFY THE DATA SET TO BE UNCATALOGED.

=USE=US=U
)F FUNCTION -

          THE WYLBUR USE COMMAND READS A COPY OF A DIRECT ACCESS
          DATA SET (EXTERNAL FILE) INTO YOUR ACTIVE FILE.

)X SYNTAX -

          DUE TO THE NUMBER OF OPERANDS, THE  OPERANDS  WILL  BE
          SHOWN TWO TO A LINE EVEN THOUGH THEY WOULD APPEAR ON A
          SINGLE COMMAND LINE DURING A SESSION.

                   USE <DSNAME> (ON 'VOLUME')
                       (SET/NOSET) (CLEAR)
                       (EDIT/LRECL='NNN'/CARD/PRINT) (INT)
                       (NUMBERED/NUM) (SKIP MMMMM)
                       (SEQFLD='END/(POS,LEN)')

         REQUIRED - DSNAME
         DEFAULTS - VOLUME=CATLG, SET, NOCLEAR, EDIT,
                    SKIP=0, SEQFLD=(73,7)
         ALIAS    - US, U

)O OPERANDS -

          ALL OPERANDS ARE KEYWORDS AND MAY BE SPECIFIED IN  ANY
          SEQUENCE   EXCEPT   THE   <DSNAME>  OPERAND  WHICH  IS
          POSITIONAL.

))DSNAME -
          THE <DSNAME> OPERAND IS POSITIONAL AND  SPECIFIES  THE
          <DSNAME>  OF THE DATA SET TO BE READ.  NAMES OF WYLBUR
          DATA SETS WITH STANDARD WYLBUR NAMES MAY BE  SPECIFIED
          IN  THEIR  ENTIRETY  OR  IN  AN ABBREVIATED FORM USING
          DEFAULT AND/OR PRE-SET VALUES.  THE FULL SPECIFICATION
          OF  THIS  OPERAND  IS  DISCUSSED  IN  THE  HELP  ENTRY
          "DSNAMES".

))ON 'VOLUME' -
          THE "ON 'VOLUME'" OPERAND TELLS WYLBUR THE NAME OF THE
          DIRECT ACCESS VOLUME ON WHICH THE  DATA  SET  RESIDES.
          IF  THE  DATA  SET IS CATALOGED IN THE SYSTEM CATALOG,
          THIS OPERAND IS NOT NEEDED PROVIDING NO "SET  VOLUME="
          COMMAND  HAS BEEN ISSUED THAT HAS OVERRIDDEN THE LOGON
          DEFAULT VALUE OF VOLUME=CATLG.  THIS  OPERAND  MAY  BE
          SPECIFIED  AS  "ON  CATLG".  IF THE OPERAND IS USED IN
          THE FORM "ON CATLG" OR DEFAULT, THEN WYLBUR WILL  TELL
          YOU  THE  <VOLUME>  NAME OBTAINED FROM THE CATALOG FOR
          THE SPECIFIED DATA SET.  IF THE CATALOG IS  NOT  USED,
          "ON  'VOLUME'"  IS  REQUIRED FOR A SEQUENTIAL DATA SET
          UNLESS  YOU  HAVE  PREVIOUSLY  DONE  A  "SET   VOLUME"
          COMMAND.  IF "ON 'VOLUME" IS SPECIFIED IN THE COMMAND,
          IT OVERRIDES ANY PREVIOUSLY SET <VOLUME> NAME.  WYLBUR
          WILL  PROMPT  FOR  THE  <VOLUME>  NAME  IF  IT  IS NOT
          SPECIFIED FOR A SEQUENTIAL DATA  SET.   FOR  A  WYLBUR
          <LIBRARY> (YOUR USERID.  'LIB'), "ON CATLG" IS ASSUMED
          IF THE <VOLUME> IS NOT SPECIFIED.

))SET/NOSET -
          THE DEFAULT VALUE FOR THIS OPERAND IS SET  AND  REFERS
          TO  THE  SETTING OF THE SAVED PREFIX (AND POSSIBLY THE
          SAVED MEMBER) NAME/NAMES.

))CLEAR -
          USE CANNOT BE  EXECUTED  UNLESS  THE  ACTIVE  FILE  IS
          EMPTY.   IF  THERE  IS AN ACTIVE FILE, WYLBUR WILL ASK
          YOU IF IT IS "OK TO CLEAR?" IN ORDER TO  PROCEED  WITH
          THE USE.  YOU MAY PRE-EMPT THIS DIALOGUE BY SPECIFYING
          "CLEAR".   WYLBUR  WILL THEN CLEAR THE ACTIVE FILE AND
          PROCEED.  IF ANY REPLY OTHER THAN "YES OR OK" IS GIVEN
          TO THE "OK TO CLEAR?" PROMPT, THEN  THE  OPERATION  IS
          TERMINATED AND YOU ARE RETURNED TO THE COMMAND MODE.

))EDIT/LRECL='NNN'/CARD/PRINT -
          THIS OPERAND TELLS WYLBUR THE TYPE OF FILE HE IS GOING
          TO USE.  THE DEFAULT IS  "EDIT"  (WYLBUR'S  COMPRESSED
          FORM OF DATA STORAGE).  IF "LRECL='NNN'" (WHERE NNN IS
          REPLACED  WITH  A NUMBER EQUAL TO OR LESS THAN 133) IS
          USED, THEN WYLBUR ASSIGNS THAT VALUE TO THE DATA BEING
          READ IN AND ACTS ACCORDINGLY.  IF "CARD" IS USED  THEN
          THE  LRECL  OF 80 IS USED.  ALL 80 COLUMNS ARE ASSUMED
          TO HAVE VALID DATA IN THEM AND WYLBUR LINE NUMBERS ARE
          ASSIGNED  OUTSIDE  OF  THE  80  COLUMNS.   PRINT,   IF
          SPECIFIED, TELLS WYLBUR THAT THE LINE LENGTH IS 133.

          NORMALLY, WYLBUR USES THE INFORMATION IN THE DATA  SET
          LABEL  (DSCB) TO DETERMINE HOW THE DATA SET WAS STORED
          AND HOW IT IS TO BE READ.  HOWEVER, IF  THE  DSCB  HAS
          BEEN ALTERED, OR IF YOU WISH TO READ THE DATA SET IN A
          SPECIAL  WAY,  YOU MAY OVERRIDE THE INFORMATION IN THE
          DSCB WITH THIS OPERAND.  IF THE RECORD LENGTH  (LRECL)
          OF  THE  DATA SET IS GREATER THAN 133 CHARACTERS, (THE
          MAXIMUM RECORD SIZE FOR  THE  ACTIVE  FILE)  YOU  MUST
          OVERRIDE  THE  DSCB  INFORMATION  WITH  A  NUMBER  NOT
          GREATER  THAN  133.   WYLBUR  WILL  READ  FIXED LENGTH
          RECORDS (RECFM=F OR FB) AND  VARIABLE  LENGTH  RECORDS
          (RECFM=V OR VB) BUT NOT "SPANNED" RECORDS (RECFM=VBS).
          UNDEFINED DATA SETS (RECFM=U) ARE ASSUMED TO BE WYLBUR
          INTERNAL  (EDIT)  FORMAT  DATA SETS.  WYLBUR LIBRARIES
          AND THE  WYLBUR  ACTIVE  FILE  ARE  ALWAYS  IN  "EDIT"
          FORMAT.

          "EDIT" SPECIFIES THAT THE DATA HAS BEEN SAVE IN WYLBUR
          INTERNAL FORMAT (A COMPRESSION SCHEME).   "LRECL='NNN'
          SPECIFIES  THAT  THE  DATA SET IS NOT IN "EDIT" FORMAT
          AND THAT THE RECORD LENGTH TO BE USED IN READING IT IS
          'NNN'.  WYLBUR THEN TREATS  THE  DATA  SET  AS  "FIXED
          BLOCK" (RECFM= FB).  IF THE ACTUAL PHYSICAL BLOCK SIZE
          IS  NOT  AN  INTEGRAL  MULTIPLE OF NNN, ANY CHARACTERS
          REMAINING AFTER ALL POSSIBLE LINES OF  NNN  CHARACTERS
          HAVE  BEEN  EXTRACTED  WILL  BE IGNORED.  "CARD" IS AN
          ABBREVIATION OF LRECL=80 AND PRINT IS AN  ABBREVIATION
          FOR LRECL=133.  ALL PROVISIONS FOR LRECL APPLY EQUALLY
          TO  "CARD"  AND "PRINT".  THE VALUES "LRECL=", "CARD",
          AND "PRINT" MAY BE SPECIFIED FOR ANY DATA SET, BUT THE
          USER SHOULD BE AWARE THAT THE USE  OF  THESE  OPERANDS
          MAY  PRODUCE  SOME RATHER ODD LOOKING DATA IF THE DATA
          SET BEING READ DOES NOT ACTUALLY CONTAIN FIXED  LENGTH
          RECORDS.

))INT -
          THIS KEYWORD IS SPECIFIED IF YOU WANT  WYLBUR  TO  USE
          THE  LINE  NUMBERS  AS  INTEGERS,  WITHOUT INSERTING A
          DECIMAL POINT BETWEEN THE  FIFTH  AND  SIXTH  NUMBERS.
          THIS  PRESUPPOSES THAT THE "NUMBERED" OPERAND HAS BEEN
          SUPPLIED IN THE COMMAND.


          ))SKIP MMMM - YOU MAY  SPECIFY  THAT  SOME  NUMBER  OF
          RECORDS  AT  THE  BEGINNING  OF THE DATA SET ARE TO BE
          SKIPPED.  THE OPERAND "SKIP=MMMM" SPECIFIES  THAT  THE
          FIRST MMMM RECORDS ARE TO BE IGNORED.

))NUMBERED/NUM -
          SPECIFICATION OF ANY OF THE THREE  KEYWORDS  (ALL  ARE
          SYNONYMOUS)  TELLS  WYLBUR THAT LINE NUMBERS ARE TO BE
          FOUND WITHIN THE DATA.  IF THIS KEYWORD IS  SPECIFIED,
          AND  THE  DATA  IS  STORED IN EDIT FORMAT, WYLBUR WILL
          TERMINATE THE COMMAND, ISSUE "NUMBERED  ILLEGAL",  AND
          PROMPT  FOR  ANOTHER  COMMAND.   IF THE DATA IS STORED
          WITHOUT LINE NUMBERS AND THIS  KEYWORD  IS  SPECIFIED,
          WYLBUR  WILL  TERMINATE THE COMMAND, ISSUE "USE OPTION
          ERROR,  USE  INCOMPLETE",  AND  PROMPT   FOR   ANOTHER
          COMMAND.

))SEQFLD='END/(POS,LEN)' -
          WHEN DATA SETS ARE SAVED IN "EDIT" FORMAT, THE  WYLBUR
          LINE  NUMBERS  ARE  STORED  SEPARATE  FROM  THE  DATA.
          HOWEVER,  THIS  IS NORMALLY NOT TRUE FOR DATA SAVED IN
          OTHER FORMATS.  SUCH DATA SETS WILL BE  RENUMBERED  BY
          WYLBUR  (FROM  1.000  BY  CURRENT DELTA) WHEN THEY ARE
          READ.  FOR NON-EDIT DATA SETS, THE  "NUMBERED"  OPTION
          ASSUMES  THAT  EACH  RECORD  HAS  A LINE NUMBER IN IT.
          WYLBUR USES THAT LINE  NUMBER  AND  DELETES  FROM  THE
          RECORD  THOSE  COLUMNS  CONTAINING  THE  LINE  NUMBER.
          ALTHOUGH  THE  LINE  NUMBERS  CAN BE EITHER DECIMAL OR
          INTEGER, INTEGER LINE NUMBERS WILL BE ASSUMED TO  HAVE
          AN  IMPLIED THREE DECIMAL PLACES.  THE "SEQFLD" OPTION
          IS USED TO NOTIFY WYLBUR THAT THE LINE NUMBERS ARE  AT
          SOME   POSITION  OR  LENGTH  OTHER  THAN  THE  DEFAULT
          "SEQFLD=(END,8)".  ANY STARTING COLUMN POSITION  (POS)
          AND  ANY  LENGTH (,LEN) LESS THAT 10 CAN BE SPECIFIED.
          IF THE LENGTH IS NOT CHANGED, THE  PARENTHESES  AROUND
          THE  POSITION  FIELD CAN BE OMITTED.  "SEQFLD" ASSUMES
          NUMBERED AND BOTH USE THE DEFAULT LRECL IN THE DSCB.

./ ALIAS NAME=W
./ ALIAS NAME=WYLTSO
