./ ADD NAME=$INDEX   0179-80013-80211-0755-00142-00104-00125-$SYS13  00
THIS IS THE DIRECTORY FOR THE  I T E L  SYSTEM MODIFICATIONS.

SYSTEM LEVEL: MVS 3.8 FROM 7908 DLIBS, WITH PTFS 7909 THRU 7911,
AND WITH SE V2.0 AND SAME V1.0, INSTALLED 4/13/80.

BOB WENZEL     415/955-0473

SYS0.SMP.SE.CNTL:      THIS DATASET CONTAINS MODIFICATIONS IN SMP4
                       FORMAT TO SYSTEM CODE.  EACH MODIFICATION IS
                       NAMED VS..... AND CONTAINS JCL, SMP CONTROL
                       CARDS, AND THE MODIFICATION ITSELF.

MODIFICATION NUMBERS SHOULD BE SIGNED OUT WHEN THEY ARE NEEDED
BY MAKING A ONE LINE ENTRY IN THIS MEMBER.  THIS LINE SHOULD
BE IN THE FOLLOWING FORMAT:
">MM/DD/YY VSNNNNN-ID-TITLE OF INTENDED LOCAL MODIFICATION"
  WHERE - '>' IS USED AS A MARKER TO LIST CHANGE HEADERS
        - MM/DD/YY IS THE DATE APPLIED
        - NNNNN IS A NUMBER ASSIGNED SEQUENTIALLY WITHIN VS

   NOTE: THE SYSTEM SHOULD BE CONSIDERED AT THE 7911 DLIB LEVEL.

************************************************************************

FOLLOWING IS THE INDEX OF THE MEMBERS ACTUALLY IN THIS DATASET AND
INSTALLED IN THE SYSTEM.

************************************************************************
>06/17/80 VS00001-$SYS13-REBUILDS SVCTABLE WITHOUT A SYSGEN.
>04/10/80 VS00002-$SYS13-IKJEFF53: IPO-6.0 SAMPLE TSO OUTPUT/STATUS/
                         CANCEL EXIT ROUTINE.
>04/10/80 VS00003-$SYS13-IKJEFLD: LOGON PREPROMPT EXIT FOR TSOHOLD.
>04/10/80 VS00004-$SYS13-SGIEC0PT: ADD LOCAL PROGRAM NAMES TO PROGRAM
                         PROPERTIES TABLE (PPT).
>04/10/80 VS00005-$SYS03-UCC_ONE(TMS): PUT HOOKS INTO IFG0194A,
                         IGC0001I, IGC00020, & IGC0005E.
>04/10/80 VS00006-$SYS13-IKJEFTE2/IKJEFTE8: ADD LOCAL AUTHORIZED
                         COMMAND PROCESSORS/PROGRAMS TO THE LIST OF
                         THOSE INVOKED BY THE TSO TMP/CALL COMMAND
                         AND COMMAND PROCESSORS FOR ASM2.
>04/10/80 VS00007-$SYS03-ABEND-AID/TOMARK: FRONT-END IGC0005A.
>07/08/80 VS00008-$SYS13-SPFIJTIP FETCH/VERFYQEL: INSTALL JTIP
                         INTERFACE. ALLOW $SYS AND $RJE USERS TO FETCH,
                         SHOW, PURGE AND ROUTE BY JOB, REGARDLESS OF
                         JOBNAME.
>04/10/80 VS00009-$SYS13-IKJEBELE: MAKE 3270 LOGICAL TAB SIGN ("CENT")
                         GOOD FOR ALL TERMINALS.
>04/11/80 VS00010-$SYS13-IEFUJI IEFUSI IEFUTL: INSTALLATION OF IEFUJI,
                         IEFUSI AND IEFUTL.
>04/  /80 VS00011-HOLD  -IEANUC01: FRONT END IGC018 FOR DYNAMIC BLDL.
>05/17/80 VS00012-$SYS13-IKJEFLE: 1) RESET PROFILE PREFIX TO BE THAT OF
                         USERID, & 2) SAVE ACCOUNT NUMBER IN UPTUSER.
>04/10/80 VS00013-$SYS13-IKJEBECI,IKJEGCIV: ELIMINATE BLDL FOR TSO EDIT
                         AND TEST SUB-COMMANDS.
>  /  /80 VS00014-$SYS13-IEFU83:
>04/10/80 VS00015-$SYS13-IKJEBESA: HAVE TSO EDIT "RLSE" ON NEW DATASETS.
>04/10/80 VS00016-$SYS13-WYLBUR: ADD SVC 249 (IGC0024I) TO LPALIB.
>04/10/80 VS00017-$SYS03-JES2(HASPPRPU): PUT THE JOB NAME ON THE PUNCH
                         SEPARATOR CARD.
>04/10/80 VS00018-$SYS03-JES2(HASPRDR): SET THE DEFAULT MSGCLASS TO "A"
                         FOR A TSO-SUBMITTED JOB. NOT NEEDED IF TSO
                         COMMAND PACKAGE IS INSTALLED FMID(JBB1112).
>04/11/80 VS00019-$SYS13 IDMS: SVC 219.
>04/10/80 VS00020-$SYS13-UCLIN: ADD LINKLIB MODULES TO LPALIB (IEBCOPY/
                         UCLIN).
>04/11/80 VS00021-$SYS13-SYNCSORT: ADD MODULES IGX00017 AND WCSREENT
                         TO LPALIB.
>04/10/80 VS00022-$SYS03-UCC_ONE(TMS): ADD MODULES IGC..24G, IGC..24H
                         TO LPALIB.
>04/10/80 VS00023-$SYS13-IEFACTRT: INSTALLATION OF IEFACTRT, HAS COREQ
                         OF VS00024.
>04/10/80 VS00024-$SYS13-IEECVXIT: INSTALLATION OF IEECVXIT, HAS COREQ
                         OF VS00023.
>04/11/80 VS00025-$SYS03-JTIP: MODIFIES ALMOST ALL OF JES2.
>04/16/80 VS00026-$SYS03-JTIP: IKJEBEMA AND IGC0023I AND JTIP COMMANDS
>  /  /   VS00027-HOLD  -IEFAB4A2: DON'T ABEND ON "NOT CATLG 2".
>04/28/80 VS00028-$SYS13-LINKLIB: ADD OZLIB MODULES TO LINKLIB (IEBCOPY/
                         UCLIN) FOR INFORMATION SYSTEMS.
>04/10/80 VS00029-$SYS13-IECVHIDT: CHANGED HOT I/O DEFAULT VALUES.
>04/11/80 VS00030-$SYS13-CICS: INSTALL TYPE 4 SVC 214 FOR PAGE FIX, AND
                         TYPE 6 SVC 215 FOR HIGH PERFORMANCE.
>04/10/80 VS00031-$SYS13-AZ25758: CIR. 106-C'S BY COPYING SOME SU33
                         MODULES FROM LINKLIB TO LPALIB.
>04/10/80 VS00032-$SYS13-IEECVETC: INVOKE DIDOCS TO SET-UP CONSOLES IN
                         ROLL DELETABLE MODE.
>04/10/80 VS00033-$SYS03-JES2(HASPPRPU): MULTICOPY PAGE SEPARATOR.
>04/11/80 VS00034-$SYS13-VSCOBOL: MOVE REENTRANT MODULES TO LPALIB,
                         DID NOT USE SMP... TOO MANY MODULES AND
                         ALIASES.
>  /  /   VS00035-HOLD  -AGENLIB: MODIFY GENERATE, JOBCARD, SGASMPAK,
                         SGIFB600,SGLEDPK1,TSASMPAK TO PRODUCE "BETTER"
>04/17/80 VS00036-$SYS13-SPFCOPY: INSTALL SPFCOPY WHICH ENABLES SPF TO
                         DO A COMPRESS.
>04/17/80 VS00037-$SYS13-SPFIPAN: INSTALL PANVALET SPF INTERFACE.
>04/10/80 VS00038-$SYS13-IKJEFD30: CHANGE DEFAULT ALLOCATE DISPOSITION
                         FROM "OLD" TO "SHR".
>04/10/80 VS00039-$SYS03-JTIP: 27MAR79 FIXES.
>06/19/80 VS00040-$SYS13-JARSCICS: INSTALL SVC TYPE 3 (237) FOR WRITING
                         SMF RECORDS, AND SVC TYPE 6 (208) FOR SAMPLING
                         CPU REAL TIME FOR TESTCICS.
>04/10/80 VS00041-$SYS13-UCLIN: ADD CMDLIB MODULES TO LPALIB (IEBCOPY/
                         UCLIN).
>06/06/80 VS00042-$SYS13-SGIEE0MS: CHANGE  MSTRJCL TO NOT START JES2
>04/17/80 VS00043-$SYS03-ASM2: ZAP IFG0196W, ADD IGC0023H.
                         ASSOCIATED MEMBERS ARE VS00043I AND VS00043O.
                         VS00043I IS THE INPUT TO VS00043.
                         VS00043O IS THE ZAPS GENERATED BY VS00043I AND
                         INPUT FOR SMPPTFIN.
>06/09/10 VS00044-$SYS13-HMASMUC1:  CICS STAGE2 GEN PRODUCES UCLIN CARDS
                         TO UPDATE CDS MACRO ENTRIES AND HAS PROBLEMS
                         PROBLEM IR10797 FOR MORE DETAILS.
>06/17/80 VS00045-$SYS13-CICS: INSTALL TYPE 4 SVC 245 FOR PAGE FIX,
                         TYPE 2 SVC 229 FOR INTER REGION COMMUNICATIONS
                         AND TYPE 6 SVC 209 FOR HIGH PERFORMANCE OPTION.
>06/18/80 VS00046-$SYS13-IEDAYW IEDQ21: ALLOW CERTAIN CONTROL CHARACTERS
                         FOR TTY COMPATIBLE TERMINALS AND REPLACE TTY
                         TRANSLATE TABEL IEDQ21.
>07/09/80 VS00047-$SYS13-JES2(HASPPRPU): MAKE PRINT TRAIN TN WORK
                         CORRECTLY WITH &PRTRANS=YES SPECIFIED.
>07/01/80 VS00048-$SYS13-JARSCICS: INSTALL SVC TYPE 3 (236) FOR WRITING
                         SMF RECORDS, AND SVC TYPE 6 (207) FOR SAMPLING
                         CPU REAL TIME FOR PRODCICS.
>04/10/80 VS00053-$SYS03-JTIP: 6MAR80 FIXES DUE TO UZ26743/7909,PER UIC
>07/20/80 VS00054-$CSG05-ASM2: REL 2.5 MOD TO IFG0196W
>07/20/80 VS00055-$CSG05-ASM2: REL 2.5 MOD TO IFG0194C
>07/20/80 VS00056-$CSG05-ASM2: REL 2.5 MOD TO IDA0192C



************************************************************************

FOLLOWING ARE ONLY COMMENTS, TAKEN FROM THE OLD MEMOREX SYS0.SMP.CNTL.

************************************************************************

>  /  /   FDR1   -$SYS  -FIX TO SLOWDOWN BACKUPS.
>  /  /   PCF1   -$SYS  -FIX TO IMPROVE CLIST PROCESSING.
>  /  /   VS00030-$SYS  -CCWTRACE:
>  /  /   VS00048-$SYS  -IEANUC01: FRONT-END IGC018 FOR DYNAMIC BLDL.
>  /  /   VS00049-$SYS  -SPFSUBS: LOG/LIST DATA SETS TO TSOSPF PACK
>  /  /   VS00050-$SYS  -NETWORK SOLICITOR DCNS MESSAGE
                         ADD SUBROUTINE FOR COMPILERS
./ ADD NAME=SMPLIST  0101-80130-80130-1531-00006-00024-00003-$SYS13  00
//SMPLIST JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//STEP1  EXEC IPOSMP4
//SYSIN    DD *
 LIST CDS SYSMOD USERMOD APAR PTF.
/*
./ ADD NAME=SMPLIST1 0101-80204-80204-1134-00006-00006-00001-$SYS13  00
//SMPLIST1 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//STEP1  EXEC IPOSMP4
//SYSIN    DD *
 LIST CDS SYSMOD USERMOD APAR PTF.
/*
./ ADD NAME=SMPLIST2 0101-80204-80204-1136-00006-00006-00002-$SYS13  00
//SMPLIST2 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//STEP1  EXEC IPOSMP4
//SYSIN    DD *
 LIST CDS SYSMOD NOACCEPT.
/*
./ ADD NAME=VS00001  3814-80010-80169-1814-00087-00132-00046-$SYS13  00
//VS00001  JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//*  IPO-6.0
//*
//* REFER IPO60.JCLLIB(SVCTBL)
//* COMPID SYSTEMS
//* DOC    THIS JOB IS EXAMPLE OF HOW THE SVCTABLE CAN BE REBUILT
//*        WITHOUT A SYSGEN
//*
//* STEPNAME   DESCRIPTION
//* ________   ______________________________________________________
//* SVCGEN     ASSEMBLE MINI GEN FOR SVCTABLE JOB STEP
//* TSOEDIT    SELECT ONLY ASSEMBLER INPUT FOR SVCTABLE
//* ASMSVC     ASSEMBLE NEW SVC TABLE
//* SMPSVC     USE SMP TO INCLUDE NEW SVC TABLE INTO SYSTEM
//*
//* NOTES:
//*      1) THIS JOB REASSEMBLES THE SVCTABLE SYSGEN MACRO,
//*         THUS THE COMPLETE SVCTABLE IS REPLACED IN THE NUCLEUS.
//*         TO THIS END THE SVCTABLE MACRO MUST BE SPECIFIED IN
//*         ITS ENTIRETY, AS IT WOULD BE SPECIFIED IN A SYSGEN.
//*
//*      2) REFER TO THE SPL: SYSGEN FOR CODING OF THE SVCTABLE
//*         MACRO.
//*
//SVCGEN  EXEC PGM=IFOX00,PARM='DECK,NOLOAD',TIME=5,REGION=5000K
//SYSPRINT DD SYSOUT=*
//SYSLIB   DD DISP=SHR,DSN=SYS2.AGENLIB,DCB=BLKSIZE=19040
//         DD DISP=SHR,DSN=SYS1.AGENLIB,UNIT=DISK,VOL=SER=ITEL02
//         DD DISP=SHR,DSN=SYS1.AMODGEN,UNIT=DISK,VOL=SER=ITEL02
//         DD DISP=SHR,DSN=SYS1.AMACLIB,UNIT=DISK,VOL=SER=ITEL02
//SYSUT1   DD UNIT=VIO,SPACE=(6233,(152,38),,,ROUND)
//SYSUT2   DD UNIT=VIO,SPACE=(6233,(152,38),,,ROUND)
//SYSUT3   DD UNIT=VIO,SPACE=(6233,(152,38),,,ROUND)
//SYSPUNCH DD DSN=SYS0.SMP.SE.CNTL(VS00001O),
//         DCB=(LRECL=80,RECFM=FB,BLKSIZE=3120),
//         DISP=OLD
//SYSIN    DD DISP=SHR,DSN=SYS0.GENLIB.SE.CNTL(STAGE1A)
//         DD DISP=SHR,DSN=SYS0.GENLIB.SE.CNTL(SVCTABLE)
//         DD DISP=SHR,DSN=SYS0.GENLIB.SE.CNTL(DUMMY1B)
//********************************************************************
//*
//* EDIT SVCTABLE ASSEMBLER STATEMENTS FROM JOB STEP PRODUCED IN THE
//*      PREVIOUS STEP
//*
//********************************************************************
//TSOEDIT EXEC PGM=IKJEFT01,DYNAMNBR=5,COND=(0,NE)
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD *
E 'SYS0.SMP.SE.CNTL(VS00001O)' DATA
DEL * 1230
DOWN 5
F X/X 1
DEL * 99999
S
END
/*
//********************************************************************
//*
//* ASSEMBLE  NEW SVC TABLE: OBJECT OUTPUT TO SYS1.OBJPDS03(IEASVC00)
//*
//********************************************************************
//ASMSVC EXEC ASMS,OBJ=OBJPDS03,MOD=IEASVC00,
//           CLASS='A',COND=(0,NE)
//SYSIN      DD  DISP=OLD,DSN=SYS0.SMP.SE.CNTL(VS00001O)
//********************************************************************
//*
//* USE SMP TO UPDATE NUCLEUS WITH THE NEW SVCTABLE
//*
//********************************************************************
//VS00001  EXEC IPOSMP4,COND=(0,NE),RES=ITEL01
//SMPJCLIN   DD DSN=*.SVCGEN.SYSPUNCH,DISP=OLD,
//           VOL=REF=*.SVCGEN.SYSPUNCH
//OBJECT     DD DSN=*.ASMSVC.A.SYSPUNCH,DISP=OLD,
//           VOL=REF=*.ASMSVC.A.SYSPUNCH
//SYSIN    DD *
 REJECT  S(VS00001).
 RECEIVE S(VS00001).
 APPLY   S(VS00001).
 LIST CDS SYSMOD(VS00001) .
//SMPPTFIN   DD *
++ USERMOD (VS00001) .
++ VER (Z038) FMID(JBB1222) .
++JCLIN TXLIB(SMPJCLIN) .
++ MOD (IEASVC00) TXLIB(OBJECT).
//********************************************************************
./ ADD NAME=VS00001O
      PRINT ON,NODATA
SVCTABLE   CSECT
 DS    0D
 DC V(IGC000),X'00008000'
 DC V(IGC001),B'00000000000000001000000000000000'
 DC V(IGC002),B'00000000000000001000000000000000'
 DC V(IGC003),B'00000000000000001000000000000000'
 DC V(IGC004),B'00000000000000001000000000000000'
 DC V(IGC005),B'00000000000000001000000000000000'
 DC V(IGC006),B'10000000000000001000000000000000'
 DC V(IGC007),B'10000000000000001000000000000000'
 DC V(IGC008),B'10000000000000001000000000000000'
 DC V(IGC009),B'10000000000000001000000000000000'
 DC V(IGC010),B'00000000000000001000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC V(IGC012),B'10000000000000001000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000001000000000000000'
 DC V(IGC015),B'00000000000000001000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC V(IGC018),B'10000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11001000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC V(IGC037),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC A(0),B'11001000000000000000000000000000'
 DC A(0),B'11000000000000001000000000000000'
 DC A(0),B'11000000000000001000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC V(IGC043),B'00000000000000001000000000000000'
 DC V(IGC044),B'10000000000000001000000000000000'
 DC V(IGC045),B'10000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC V(IGC048),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(0),B'11000000000000001000000000000000'
 DC A(0),B'11001000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000001000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC V(IGC056),B'10000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC V(IGC058),B'00000000000000001000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000001000000000000000'
 DC V(IGC062),B'10000000000000001000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC V(IGC070),B'10000000000000001000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC A(0),B'11001000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC V(IGC079),B'10000000000000001000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11001000000000000000000000000000'
 DC A(0),B'11001000000000000000000000000000'
 DC V(IGC084),B'00000000000000001000000000000000'
 DC A(0),B'11001000000000000000000000000000'
 DC A(0),B'11001000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC V(IGC092),B'00000000000000001000000000000000'
 DC A(0),B'11000000000000001000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC V(IGC095),B'00000000000000001000000000000000'
 DC A(0),B'11000000000000001000000000000000'
 DC A(0),B'11000000000000001000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000001100000000000000'
 DC A(0),B'11000000000000001000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11001000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGC107),B'00101000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGC109),B'10000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC V(IGC111),B'10000000000000000000000000000000'
 DC V(IGC112),B'00000000000000001000000000000000'
 DC V(IGC113),B'00000000000000001000000000000000'
 DC V(IGC114),B'00000000000000001000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGC116),B'00000000000000001000000000000000'
 DC V(IGC117),B'10000000000000001000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGC119),B'00000000000000001000000000000000'
 DC V(IGC120),B'00000000000000001000000000000000'
 DC V(IGC121),B'00000000000000001000000000000000'
 DC V(IGC122),B'10000000000000000000000000000000'
 DC V(IGC123),B'10001000000000000000000000000000'
 DC V(IGC124),B'00000000000000001000000000000000'
 DC V(IGC125),B'00000000000000001000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11001000000000000000000000000000'
 DC A(0),B'11001000000000000000000000000000'
 DC A(0),B'11001000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGC137),B'00100000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC V(IGCERROR),B'10000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC V(IGC207),B'00100000000000000000000000000000'
 DC V(IGC208),B'00100000000000000000000000000000'
 DC V(IGC209),B'00100000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC V(IGC215),B'00100000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC V(IGC219),B'00000000000000001000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC V(IGC229),B'10000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(0),B'11000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
 DC A(IGCRETRN),B'00000000000000000000000000000000'
IGCRETRN SR    15,15
         BR    14
         END
./ ADD NAME=VS000019 0100-80169-80169-1730-00132-00132-00000-$SYS13  00
//VS00001  JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//*  IPO-6.0
//*
//* REFER IPO60.JCLLIB(SVCTBL)
//* COMPID SYSTEMS
//* DOC    THIS JOB IS EXAMPLE OF HOW THE SVCTABLE CAN BE REBUILT
//*        WITHOUT A SYSGEN
//*
//* STEPNAME   DESCRIPTION
//* ________   ______________________________________________________
//* SVCGEN     ASSEMBLE MINI GEN FOR SVCTABLE JOB STEP
//* SELECT     SELECT ONLY ASSEMBLER INPUT FROM JOB STEP
//* ASMSVC     ASSEMBLE NEW SVC TABLE
//* SMPSVC     USE SMP TO INCLUDE NEW SVC TABLE INTO SYSTEM
//*
//* NOTES:
//*      1) THIS JOB REASSEMBLES THE SVCTABLE SYSGEN MACRO,
//*         THUS THE COMPLETE SVCTABLE IS REPLACED IN THE NUCLEUS.
//*         TO THIS END THE SVCTABLE MACRO MUST BE SPECIFIED IN
//*         ITS ENTIRETY, AS IT WOULD BE SPECIFIED IN A SYSGEN.
//*
//*      2) SINCE THIS ASSEMBLY IS TAKEN OUT OF THE SCOPE OF A
//*         COMPLETE SET OF SYSGEN MACROS CERTAIN SYSGEN ASSEMBLER
//*         VARIABLES MUST BE PRESET AS NOTED IN THE ASSEMBLY BELOW.
//*
//*      3) REFER TO THE SPL: SYSGEN FOR CODING OF THE SVCTABLE
//*         MACRO.
//SVCGEN EXEC PGM=IFOX00,PARM='DECK,NOLOAD'
//SYSLIB DD DSN=SYS1.AGENLIB,UNIT=DISK,VOL=SER=ITEL02,DISP=SHR
//       DD DSN=SYS1.MACLIB,UNIT=DISK,DISP=SHR
//SYSUT1 DD UNIT=VIO,SPACE=(CYL,(5,5))
//SYSUT2 DD UNIT=VIO,SPACE=(CYL,(5,5))
//SYSUT3 DD UNIT=VIO,SPACE=(CYL,(5,5))
//SYSPRINT DD  SYSOUT=*
//SYSPUNCH DD  DSN=SYS0.LINKLIB2.OBJ(VS00001),DISP=OLD
//SYSIN    DD    *,DCB=BLKSIZE=19040
**********************************************************************
*                                                                    *
*        PRE-SET SELECTED GLOBAL SYSGEN VARIABLES                    *
*                                                                    *
**********************************************************************
         PRINT OFF
         COPY  SGGBLPAK  BRING IN SYSGEN GLOBAL VARIABLES
         PRINT ON
&SGMENTB(16) SETB 1      AND OVERRIDE DIAGNOSTIC SWITCH .
&SGCTRLC(41) SETC '*'        CLASS= PARM ON ASMS PROC
&SGCTRLC(05) SETC 'OBJPDS03' OBJ=   PARM ON ASMS PROC
**********************************************************************
*        CHANGE THE FOLLOWING TO CONFORM TO FULLGEN OPTIONS          *
*               THEY ARE INITIALIZED TO THE FULLGEN OPTIONS          *
*               AS DISTRIBUTED ON THE MVS SYSTEM IPO SYSTEM AND      *
*               AND SHOULD NOT HAVE TO BE CHANGED                    *
**********************************************************************
&SGMENTB(12) SETB 0          0=> NO GAM,  1=> GAM    FULLGEN OPTION
&SGDMGTB(06) SETB 1          0=> NO VTAM  1=> VTAM   FULLGEN OPTION
**********************************************************************
*__________________ READ THIS ________________________________       *
*                                                                    *
*        CHANGE THE FOLLOWING TO CONFORM TO YOUR IOGEN OPTIONS       *
*          THE VARIABLES CAN TAKE ON A VALUE OF 0 OR 1               *
*          0 MEANING THE OPTION WAS NOT SPECIFIED                    *
*          1 MEANING THE OPTION WAS SPECIFIED                        *
**********************************************************************
&SGDCLSB(09) SETB 0          0=> NO 2250  1=> 2250   IOGEN OPTION
&SGDCLSB(28) SETB 0          0=> NO 3851  1=> 3851   IOGEN OPTION
             SPACE
**********************************************************************
*                                                                    *
*        ENTER YOUR SVCTABLE MACRO WITH YOUR SVCS                    *
*           -- WATCH YOUR CONTINUATIONS --                           *
**********************************************************************
//         DD  DSN=SYS0.GENLIB.SE.CNTL(SVCTABLE),DISP=SHR
//         DD  *
**********************************************************************
*                                                                    *
*        ISSUE SYSGEN MACROS TO PUNCH SVCTABLE ASSEMBLY STEP         *
*                                                                    *
**********************************************************************
         SGIEI1SV                  MACRO TO INCLUDE SYSTEM SVCS
         SGIEA201                  MACRO TO PUNCH ASSEMBLY STEP
         END
//********************************************************************
//*
//* SELECT ASSEMBLER STATEMENTS FROM JOB STEP PRODUCED IN THE
//*        PREVIOUS STEP
//*
//********************************************************************
//SELECT EXEC PGM=IEBGENER,COND=(0,NE)
//SYSPRINT DD SYSOUT=*
//SYSUT1   DD DSN=*.SVCGEN.SYSPUNCH,DISP=OLD,
//         VOL=REF=*.SVCGEN.SYSPUNCH
//SYSUT2   DD DSN=&&PASS,DISP=(,PASS),
//         UNIT=DISK,SPACE=(CYL,(5,1,1)),
//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=800)
//SYSIN    DD *
  GENERATE MAXNAME=3,MAXGPS=32
  MEMBER   NAME=DUMMY1
  RECORD   IDENT=(8,'//SYSIN ',1)
  MEMBER   NAME=IEASVC00
  RECORD   IDENT=(5,' END ',9)
//********************************************************************
//*
//* ASSEMBLE  NEW SVC TABLE: OBJECT OUTPUT TO SYS1.OBJPDS03(IEASVC00)
//*
//********************************************************************
//ASMSVC EXEC ASMS,OBJ=OBJPDS03,MOD=IEASVC00,
//           CLASS='*',COND=(0,NE)
//A.SYSPUNCH DD  VOL=SER=ITEL01,UNIT=DISK
//SYSIN      DD  DSN=&&PASS(IEASVC00),DISP=(OLD,DELETE)
//********************************************************************
//*
//* USE SMP TO UPDATE NUCLEUS WITH THE NEW SVCTABLE
//*
//********************************************************************
//VS00001  EXEC IPOSMP4,COND=(0,NE),RES=ITEL01
//SMPJCLIN   DD DSN=*.SVCGEN.SYSPUNCH,DISP=OLD,
//           VOL=REF=*.SVCGEN.SYSPUNCH
//OBJECT     DD DSN=*.ASMSVC.A.SYSPUNCH,DISP=OLD,
//           VOL=REF=*.ASMSVC.A.SYSPUNCH
//SYSIN    DD *
 REJECT  S(VS00001).
 RECEIVE S(VS00001).
 APPLY   S(VS00001).
 LIST CDS SYSMOD(VS00001) .
//SMPPTFIN   DD *
++ USERMOD (VS00001) .
++ VER (Z038) FMID(JBB1222) .
++JCLIN TXLIB(SMPJCLIN) .
++ MOD (IEASVC00) TXLIB(OBJECT).
//********************************************************************
./ ADD NAME=VS00002  0108-79327-80102-0850-00024-00031-00016-$SYS13  00
//VS00002 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//*         STEP 1 ASSEMBLE IKJEFF53
//*         STEP 2 SMP TO INSTALL AS SYSMOD NUMBER VS00002
//*
//STEP1    EXEC ASMFC,MAC1='SYS1.AMODGEN',
//          PARM.ASM='NOTERM,LIST,NODECK,OBJECT'
//ASM.SYSLIB DD UNIT=DISK,VOL=SER=ITEL01
//          DD UNIT=DISK,VOL=SER=ITEL02
//ASM.SYSGO DD DISP=OLD,DSN=SYS0.LINKLIB2.OBJ(IKJEFF53)
//SYSIN     DD DISP=SHR,DSN=SYS0.LINKLIB2.SOURCE(IKJEFF53)
//*
//STEP2  EXEC IPOSMP4,COND=(8,LT)
//SMPPTFIN DD *
++ USERMOD (VS00002) .
++ VER (Z038) FMID(JBB1112) /*
 MODULE IKJEFF53    TSO OUTPUT/STATUS/CANCEL EXIT ROUTINE */.
++ MOD (IKJEFF53) DISTLIB (AOST4) TXLIB (OBJECT).
//SYSIN    DD *
 RECEIVE  S(VS00002)   /* IKJEFF53 */    .
 APPLY    S(VS00002)  DIS(NO).
/*
//OBJECT  DD DISP=SHR,DSN=SYS0.LINKLIB2.OBJ
./ ADD NAME=VS00003  0107-79327-80143-1909-00025-00028-00019-$SYS13  00
//VS00003 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//*         STEP 1 ASSEMBLE IKJEFLD
//*         STEP 2 SMP TO INSTALL AS SYSMOD NUMBER VS00003
//*
//STEP1    EXEC ASMFC,MAC1='SYS1.AMODGEN',
//          PARM.ASM='NOTERM,LIST,NODECK,OBJECT'
//ASM.SYSLIB DD UNIT=DISK,VOL=SER=SYS100
//          DD UNIT=DISK,VOL=SER=ITEL02
//ASM.SYSGO DD DSN=SYS0.LINKLIB2.OBJ(IKJEFLA),DISP=OLD
//SYSIN     DD DSN=SYS0.LINKLIB2.SOURCE(IKJEFLD),DISP=SHR
//*
//STEP2  EXEC IPOSMP4,COND=(8,LT)
//SMPCNTL  DD  *
 RECEIVE S (VS00003).
 APPLY   S (VS00003) DIS(NO).
 LOG (LOGON PREPROMPT EXIT USED WITH TSOHOLD - RPW/04/10/80).
 LIST  CDS SYSMOD(VS00003) DIS(NO).
//SMPPTFIN  DD  *
++ USERMOD (VS00003) .
++ VER (Z038) FMID(EBB1102) .
++ MOD (IKJEFLA) TXLIB(OBJECT).
//OBJECT    DD  DISP=SHR,DSN=SYS0.LINKLIB2.OBJ
//********************************************************************
./ ADD NAME=VS00004  0122-79327-80213-1648-00262-00252-00000-$SYS13  00
//VS00004 JOB (2000,S010),VS00004,NOTIFY=$SYS00
/*JOBPARM Q=F,I
//*
//* REFER  IPO60.JCLLIB(PPTUPDT)
//* COMPID  SYSTEMS
//* DOC  THIS MEMBER CONTAINS THE JCL TO UPDATE THE PROGRAM
//*      PROPERTIES TABLE USING SMP.
//*
//*********************************************************************
//*                                                                   *
//* IMPORTANT IMPORTANT IMPORTANT IMPORTANT IMPORTANT                 *
//*                                                                   *
//* IEBUPDTE INPUT MUST BE UNNUMBERED                                 *
//*                                                                   *
//* EXAMPLE JCL TO SHOW PPT USED BY MVS SYSTEM IPO DEVELOPMENT GROUP  *
//*                                                                   *
//* NOTE: ENTRIES ARE NOW 16 BYTES LONG, THEY USED TO BE 12.          *
//*                                                                   *
//* * THIS IS A MAPPING FOR A SINGLE ENRTY IN IEFSDPPT, THE PROGRAM
//* * PROPERTIES TABLE.
//* PPTNAME  DS   CL8 - PROGRAM NAME
//* PPTBYTE1 DS   C -   FIRST BYTE OF PROPERTIES
//* PPTNCNCL EQU  X'80' THIS PROGRAM IS NON-CANCELABLE
//* PPTSKEY  EQU  X'40' THIS PROGRAM REQUIRES THE SPECIAL PROTECT
//* *                   KEY IN PPTKEY
//* PPTNSWP  EQU  X'20' THIS PROGRAM IS TO BE AUTHORIZED TO BE
//* *                   NON-SWAPPABLE
//* PPTPRIV  EQU  X'10' THIS PROGRAM IS TO BE 'PRIVILEGED' (WITH
//* *                   RESPECT TO THE SYSTEM RESOURCES MANAGER)
//* PPTSYSTK EQU  X'08' THIS PROGRAM IS A SYSTEM TASK
//* PPTNDSI  EQU  X'04' THIS PROGRAM IS NOT TO BE GIVEN DATA SET
//* *                   INTEGRITY
//* PPTNOPAS EQU  X'02' BYPASS PASSWORD PROTECTION
//* * THE REMAINING BIT IS RESERVED
//* PPTKEY   DS   C -   THIS KEY IS TO BE GIVEN TO THE PROGRAM
//* *                   BEING ATTACHED IF PPTSKEY IS ON
//* * EQUATES FOR PROTECT KEYS FOLLOW:
//* PPTKEY0 EQU   X'00'
//* PPTKEY1 EQU   X'10'
//* PPTKEY2 EQU   X'20'
//* PPTKEY3 EQU   X'30'
//* PPTKEY4 EQU   X'40'
//* PPTKEY5 EQU   X'50'
//* PPTKEY6 EQU   X'60'
//* PPTKEY7 EQU   X'70'
//* PPTKEY8 EQU   X'80'
//* PPTCPUA DS    BL2   BIT MASK OF CPU'S ON WHICH THIS PROGRAM CAN
//* *                   RUN (SHOULD BE X'FFFF' IF AFFINITY IS NOT
//* *                   REQUIRED)
//* ***** NEW FIELDS FOLLOW ******
//* PPTFLGS DS    0F    FLAG BYTES
//* PPTPUBYT DS   CL1   PREFERRED USAGE FLAGS
//* PPT2LPU EQU   X'80' 2ND LEVEL PREFERRED USAGE
//* PPT1LPU EQU   X'40' 1ST LEVEL PREFERRED USAGE
//* PPTN2LP EQU   X'20' NOT 2ND LEVEL PREFERRED USAGE
//* * THE REMAINING BITS ARE RESERVED
//*      DS    CL3   RESERVED
//*
//*  FUNCTION
//*  THIS MODULE (THE PROGRAM PROPERTIES TABLE) CONTAINS A LIST OF
//*  PROGRAMS AND THE SPECIAL PROPERTIES TO BE ASSIGNED TO THESE
//*  PROGRAMS. THE FORMAT OF EACH ENTRY IS DESCRIBED BY MACRO
//*  IEFZB610. (THE NAME OF THE DSECT GENERATED IS PPT.)
//*  THE BYTE FOLLOWING THE LAST ENTRY CONTAINS X'FF' AND
//*  THE REMAINING BYTES IN THAT ENTRY CONTAIN BINARY ZEROES.
//*  1. THE TABLE IS USED BY IEFSD161 AND IEFSD101.
//*  2. NONE OF THE PROPERTIES WILL BE ASSIGNED IF THE STEP HAS
//*     REQUESTED A JOBLIB OR STEPLIB WHICH IS NOT DEFINED AS
//*     BEING AUTHORIZED. THIS CHECK IS PERFORMED BY IEFSD162.
//*  3. THE PROPERTY 'SYSTEM TASK' WILL NOT BE ASSIGNED UNLESS
//*     THE JOB IS '1-STEP' AND 'STARTED.' THIS CHECK IS
//*     PERFORMED BY IEFSD101.
//*  4. THE PROPERTY 'NO DATA SET INTEGRITY' WILL NOT BE
//*     ASSIGNED UNLESS THE JOB IS '1-STEP.' THIS CHECK IS
//*     PERFORMED BY IEFSD101.
//*  5. EVEN IF THE 'NO DATA SET INTEGRITY' PROPERTY IS
//*     REQUESTED, DATA SET INTEGRITY PROCESSING WILL ALWAYS
//*     BE PERFORMED BY IEFSD102. THE PROPERTY (NDSI) WILL
//*     ACTUALLY BE PROVIDED BY IEFSD162 IF THE AUTHORIZATION
//*     CHECK OF JOBLIB/STEPLIB IS SUCCESSFUL. (THIS METHOD
//*     IS NECESSARY EVEN IF NO JOBLIB OR STEPLIB IS PRESENT,
//*     BECAUSE THE PRESENCE OR ABSENCE OF A STEPLIB IS NOT
//*     KNOWN UNTIL ALLOCATION IS COMPLETE.)
//*  6. THIS MODULE WAS CREATED BY SGIEF0PT.
//*
//SMPPPT  EXEC IPOSMP4
//SMPCNTL  DD  *
  REJECT   S (VS00004) .
  RECEIVE  S (VS00004) .
  APPLY    S (VS00004) DIS(NO).
  LIST   CDS SYSMOD(VS00004) DIS(NO) .
//SMPPTFIN DD  *
++ USERMOD(VS00004) .
++ VER (Z038) FMID(EBB1102)
              PRE(UZ23961) /*
   THESE UPDATES ARE AT PTF LEVEL UZ23961
   IEBUPDTE INPUT MUST BE SEQUENCED PROPERLY SINCE
   SMP4 WILL NOT ACCEPT ANY IEBUPDTE CONTROL CARDS
   OTHER THAN CHANGE AND ENDUP                       10/16/79 SCF
   */ .
++ MACUPD (SGIEF0PT) ASSEM(IEFSDPPT) DISTLIB(AMODGEN) BASE(UPDATE) .
><  CHANGE NAME=SGIEF0PT
***THESE ENTRIES PRECEEDS THE IBM ENTRIES, VALID LINE NUMBERS ARE
***       BETWEEN 03350003 AND 03400001 INCLUSIVELY
********* UPDATE FOR ISTINM01 ACF VTAM
          DC    CL8'ISTINM01'             PROGRAM NAME       1
          DC    AL1(PPTSKEY+PPTNSWP+PPTSYSTK+PPTNOPAS+PPTNDSI)
          DC    AL1(PPTKEY6)              KEY                3
          DC    XL2'FFFF'                 AFFINITIES         4
          DC    AL1(PPTN2LP)        FLAG BYTE
          DC    XL3'00'             RESERVED FLAG BYTES
********* UPDATE FOR RMF
          DC    CL8'ERBMFMFC'             PROGRAM NAME       1
          DC    AL1(PPTPRIV+PPTSYSTK+PPTNDSI+PPTNOPAS) PROPERTIES   FJP
          DC    AL1(PPTKEY0)              KEY                3
          DC    XL2'FFFF'                 AFFINITIES         4
          DC    AL1(0)              FLAG BYTE
          DC    XL3'00'             RESERVED FLAG BYTES
********* UPDATE FOR ASM2 (SUBTASK OF $MIGRATE)
          DC    CL8'$MCLMVR '             PROGRAM NAME       1
          DC    AL1(PPTNDSI+PPTNOPAS)         PROPERTIES     2
          DC    AL1(PPTKEY8)              KEY                3
          DC    XL2'FFFF'                 AFFINITIES         4
          DC    AL1(PPTN2LP)        FLAG BYTE
          DC    XL3'00'             RESERVED FLAG BYTES
********* UPDATE FOR ASM2
          DC    CL8'$MIGRATE'             PROGRAM NAME       1
          DC    AL1(PPTNDSI+PPTNOPAS)     PROPERTIES         2
          DC    AL1(PPTKEY8)              KEY                3
          DC    XL2'FFFF'                 AFFINITIES         4
          DC    AL1(0)              FLAG BYTE
          DC    XL3'00'             RESERVED FLAG BYTES
********* UPDATE FOR SMP
          DC    CL8'HMASMP  '             PROGRAM NAME       1
          DC    AL1(PPTNOPAS)             PROPERTIES         2
          DC    AL1(PPTKEY8)              KEY                3      FJP
          DC    XL2'FFFF'                 AFFINITIES         4
          DC    AL1(0)              FLAG BYTE
          DC    XL3'00'             RESERVED FLAG BYTES
********* UPDATE FOR DPRO
          DC    CL8'DPROANAL'             PROGRAM NAME       1
          DC    AL1(PPTNOPAS)             PROPERTIES         2
          DC    AL1(PPTKEY8)              KEY                3
          DC    XL2'FFFF'                 AFFINITIES         4
          DC    AL1(PPTN2LP)        FLAG BYTE
          DC    XL3'00'             RESERVED FLAG BYTES
********* UPDATE FOR ALTERNATE TCAM NAME
          DC    CL8'IEDQTCAN'             PROGRAM NAME       1      FJP
          DC    AL1(PPTNSWP+PPTSKEY+PPTNOPAS) PROPERTIES     2
          DC    AL1(PPTKEY6)              KEY                3
          DC    XL2'FFFF'                 AFFINITIES         4
          DC    AL1(PPTN2LP)        FLAG BYTE
          DC    XL3'00'             RESERVED FLAG BYTES
********* UPDATE FOR IDMS PRODUCTION VERSION
          DC    CL8'IDMSCV0'              PROGRAM NAME       1
          DC    AL1(PPTNSWP)              PROPERTIES         2
          DC    AL1(PPTKEY8)              KEY                3
          DC    XL2'FFFF'                 AFFINITIES         4
          DC    AL1(PPTN2LP)        FLAG BYTE
          DC    XL3'00'             RESERVED FLAG BYTES
********* UPDATE FOR TSO
          DC    CL8'IKTCAS00'             PROGRAM NAME       1
          DC    AL1(PPTSKEY+PPTSYSTK+PPTNDSI+PPTNOPAS+PPTPRIV) 2
          DC    AL1(PPTKEY6)              KEY                3
          DC    XL2'FFFF'                 AFFINITIES         4
          DC    AL1(0)              FLAG BYTE
          DC    XL3'00'             RESERVED FLAG BYTES
********* USED BY CSG FOR TESTING PURPOSES
          DC    CL8'XXX11XXX'             PROGRAM NAME       1
          DC    AL1(PPTNDSI+PPTNOPAS)     PROPERTIES         2
          DC    AL1(PPTKEY8)              KEY                3
          DC    XL2'FFFF'                 AFFINITIES         4
          DC    AL1(0)              FLAG BYTE
          DC    XL3'00'             RESERVED FLAG BYTES
********* UPDATE FOR HASJES2A A DIFFERENT JES2
          DC    CL8'HASJES2A'             PROGRAM NAME       1
          DC    AL1(PPTSKEY+PPTSYSTK)     PROPERTIES         2
          DC    AL1(PPTKEY1)              KEY                3
          DC    XL2'FFFF'                 AFFINITIES         4
          DC    AL1(0)              FLAG BYTE
          DC    XL3'00'             RESERVED FLAG BYTES
***
***  THE ABOVE REPRESENTS (SLIGHTLY) MODIFIED IPO-4.0 MATERIAL,
***  WHAT FOLLOWS REPRESENTS ITEL ADDITIONS TO THE PPT
***
********* UPDATE FOR COPYPACK
          DC    CL8'COPYPACK'             PROGRAM NAME          1
          DC    AL1(PPTNOPAS+PPTNDSI)     PROPERTIES            2
          DC    AL1(PPTKEY8)              KEY                   3
          DC    XL2'FFFF'                 AFFINITIES            4
          DC    AL1(PPTN2LP)              FLAG BYTE             5
          DC    XL3'00'                   RESERVED FLAG BYTES   6
********* UPDATE FOR ASM2
          DC    CL8'$ARCHIVE'             PROGRAM NAME          1
          DC    AL1(PPTNOPAS)             PROPERTIES            2
          DC    AL1(PPTKEY8)              KEY                   3
          DC    XL2'FFFF'                 AFFINITIES            4
          DC    AL1(PPTN2LP)              FLAG BYTE             5
          DC    XL3'00'                   RESERVED FLAG BYTES   6
********* UPDATE FOR ASM2
          DC    CL8'$ASMBMON'             PROGRAM NAME          1
          DC    AL1(PPTNOPAS)             PROPERTIES            2
          DC    AL1(PPTKEY8)              KEY                   3
          DC    XL2'FFFF'                 AFFINITIES            4
          DC    AL1(PPTN2LP)              FLAG BYTE             5
          DC    XL3'00'                   RESERVED FLAG BYTES   6
********* UPDATE FOR SOF
          DC    CL8'CREDISP0'             PROGRAM NAME          1
          DC    AL1(PPTNDSI)              PROPERTIES            2
          DC    AL1(PPTKEY8)              KEY                   3
          DC    XL2'FFFF'                 AFFINITIES            4
          DC    AL1(PPTN2LP)              FLAG BYTE             5
          DC    XL3'00'                   RESERVED FLAG BYTES   6
********* UPDATE FOR CICS TEST AND PROD. VERSIONS
          DC    CL8'DFHSIP'               PROGRAM NAME          1
          DC    AL1(PPTNDSI+PPTNSWP)      PROPERTIES            2
          DC    AL1(PPTKEY8)              KEY                   3
          DC    XL2'FFFF'                 AFFINITIES            4
          DC    AL1(PPTN2LP)              FLAG BYTE             5
          DC    XL3'00'                   RESERVED FLAG BYTES   6
********* UPDATE FOR ACF2 MAIN TASK
          DC    CL8'ACFMAIN '             PROGRAM NAME          1
          DC    AL1(PPTNCNCL+PPTSKEY+PPTSYSTK+PPTNOPAS)         2
          DC    AL1(PPTKEY1)              KEY                   3
          DC    XL2'FFFF'                 AFFINITIES            4
          DC    AL1(PPTN2LP)              FLAG BYTE             5
          DC    XL3'00'                   RESERVED FLAG BYTES   6
********* UPDATE FOR IDMS TEST VERSION
          DC    CL8'IDMSCV1'              PROGRAM NAME          1
          DC    AL1(PPTNSWP)              PROPERTIES            2
          DC    AL1(PPTKEY8)              KEY                   3
          DC    XL2'FFFF'                 AFFINITIES            4
          DC    AL1(PPTN2LP)              FLAG BYTE             5
          DC    XL3'00'                   RESERVED FLAG BYTES   6
********* UPDATE FOR COMPRESS
          DC    CL8'COMPRESS'             PROGRAM NAME          1   FJP
          DC    AL1(PPTNOPAS)             PROPERTIES            2
          DC    AL1(PPTKEY8)              KEY                   3
          DC    XL2'FFFF'                 AFFINITIES            4
          DC    AL1(0)                    FLAG BYTE             5
          DC    XL3'00'                   RESERVED FLAG BYTES   6
********* UPDATE FOR GTFCCW
          DC    CL8'GTFCCW'               PROGRAM NAME          1   FJP
          DC    XL1'FE'                   PROPERTIES            2
          DC    AL1(PPTKEY0)              KEY                   3
          DC    XL2'FFFF'                 AFFINITIES            4
          DC    AL1(0)                    FLAG BYTE             5
          DC    XL3'00'                   RESERVED FLAG BYTES   6
********* UPDATE FOR GTF
          DC    CL8'AHLGTF  '             PROGRAM NAME       1
          DC    XL1'FE'                   PROPERTIES         2
          DC    AL1(PPTKEY0)              KEY                3
          DC    XL2'FFFF'                 AFFINITIES         4
          DC    AL1(0)              FLAG BYTE
          DC    XL3'00'             RESERVED FLAG BYTES
********* UPDATE FOR NETWORK
          DC    CL8'NETWORK '             PROGRAM NAME       1
          DC    AL1(PPTSKEY+PPTNOPAS)     PROPERTIES         2
          DC    AL1(PPTKEY6)              KEY                3
          DC    XL2'FFFF'                 AFFINITIES         4
          DC    AL1(0)              FLAG BYTE
          DC    XL3'00'             RESERVED FLAG BYTES
./ ADD NAME=VS00005  0110-80084-80101-1100-00118-00111-00028-$SYS03  00
//VS00005  JOB (2000,9030),S.CAIRES,CLASS=Z,MSGCLASS=A
/*JOBPARM Q=F,I
//*
//* DELTA 239 FOR PTF UZ26761, MODIFIED FOR AZ43620, WAS USED
//* SINCE THERE IS NO DELTA FOR UZ90018, A PTF IN ERROR NEEDED
//* FOR INSTALL OF SE V2.0.  WENZEL 4/10/80.
//*
//* USE SMP4 TO PUT IN THE TMS DATA MANAGEMENT HOOKS (ZAPS) INTO
//* SYS1.LPALIB ON SYS101.
//*
//* THIS SYSMOD VS00005 WAS MODIFIED FROM THE VS00005 ON ITEL'S
//* SYS3.TMS.CNTL BY T. RAIMER TO REPLACE THE DELTA 202 FOR PTF UZ22467
//* WITH THE DELTA 253 FOR PTF UZ27340, WHICH SUPERSEDES UZ22467.
//*
//* COMMENTS WERE ADDED BY S. CAIRES, TO IDENTIFY BASE DELTAS AND PTFS.
//*
//* TO BUILD VS00005 FROM SCRATCH OR TO CHECK THIS VS00005, FIRST FUN
//* JOB TMSPDC11, TO EXEC TMSDELTA WITH OPTIONS:  ADD99, LIST99,
//* VERIFY(ZAP), AND SMPZAP(VS00005).  THE ZAPS IN SMP FORMAT AND THE
//* VERIFY CARDS CORRESPOND TO THE TMS BASE FOR SAY MVS 3.8.  THEY MAY
//* HAVE BEEN SUPERSEDED BY LATER SMP PTFS.  TO IDENTIFY WHICH MODULES
//* HAVE BEEN HIT BY PTFS, RUN THE VERIFY CARDS AGAINST SYS1.LPALIB, OR
//* DO AN APPLY CHECK OF THE (TMS BASE) VS00005.  THEN USE LIST99 TO
//* IDENTIFY THE DELTAS WHICH CORRESPOND TO THE PTF NUMBERS FOUND.  TO
//* DOUBLE CHECK, USE SMP4 TO LIST THE MODS HIT BY THE ZAPS IN THE TMS
//* BASE FOR MVS 3.8 TO FIND THE RMID FOR EACH MOD:  'LIST CDS
//* MOD(IFGXXXXX,IFGYYYYY).'
//*
//*
//VS00005  EXEC IPOSMP4         DLIB=PAG002,RES=SYS101,PTS=PAG002
//SYSIN    DD  *      (//SMPCNTL DD *)
 /* RESTORE S (VS00005) . */
 LIST PTS SYSMOD(VS00005) .
 REJECT  S (VS00005) .
 RECEIVE S (VS00005) .
 LIST PTS SYSMOD(VS00005) .
 LIST CDS SYSMOD(VS00005) .
 APPLY S (VS00005)  /* CHECK   /* BACKUP CDS AND ACDS
                                  BEFORE DIS(WRITE) */ .
 LIST CDS SYSMOD(VS00005) .
 LOG (TMSHOOKS INTO IFG0194A, IGC0001I, IGC00020 AND IGC0005E).
/*
//SMPPTFIN DD  *
++  USERMOD (VS00005)  /* UCC-ONE (TMS) HOOKS FOR O/S REL VS203.8 */ .
++ VER (Z038) FMID(EDM1102)
   PRE (UZ26761,AZ43620,UZ90018,
        UZ22527,UZ25274,UZ22277,UZ26833,UZ27757).
++ ZAP (IFG0194F)
 /* DELTA 239 FOR PTF UZ26761, MODIFIED FOR AZ43620, WAS USED
    SINCE THERE IS NO DELTA FOR UZ90018, A PTF IN ERROR NEEDED
    FOR INSTALL OF SE V2.0 */ .
* TMS HOOKS FOR O/S RELEASE VS203.8
 NAME IFG0194A IFG0194F                                   40239
 VER  0488 910140B1,471034CE                              40239
 VER  0A2C D501A01A3E7F,47203A80                          40239
 VER  0DFC D20441CA3F29,920441CF                          40239
*VER  0F70 0000,00000000,00000000,00000000,00000000       40239
 VER  0FB0 0000,00000000,00000000,00000000,00000000     AZ43620
 REP  0488 910140B1,470034CE                              40239
*REP  0A2C 1BFF,47F03F6E,47000000                         40239
 REP  0A2C 1BFF,47F03FAE,47000000                       AZ43620
*REP  0F70 0AF8,47FF3F70,47F03A80,47F03A34,47F03DFA       40239
 REP  0FB0 0AF8,47FF3FB0,47F03A80,47F03A34,47F03DFA     AZ43620
 IDRDATA VS00005
++ ZAP (IFG0196Q) .  /* TMS BASE DELTA FOR PTF - - - - (EDM1102) */
 NAME IGC0001I IFG0196Q
 VER 0020 F23441E04030,58B00010,D503B03841E0,47B03094
 VER 008E 4100000D
 REP 0020 41F00004,0AF8,47FF3024,47F03094,47F0308C,0700
 IDRDATA VS00005
++ ZAP (IFG0195H) .  /* DELTA 254 FOR PTF UZ27757 */
*        SUPPORT FOR PTF UZ27757 FOR VS2 3.8
 NAME IGC0001I IFG0195H                                  40254 003124
 VER  024A 91037000,47E03304,95F04030,47403304,95F04032  40254 003125
 VER  025E 47403304,95804034,47403304,F224417D4030       40254 003126
 REP  024A 41F00008,0AF8,47FF324E,47F03304,95F04030,4740 40254 003127
 REP  025E 3304,95F04032,47403304,95804034,47403304      40254 003128
 IDRDATA VS00005
++ ZAP (IFG0552B) .  /* TMS BASE DELTA     FOR PTF UZ22527 */
 NAME IGC0005E IFG0552B
 VER 026E F23441E04030,58100010,D503103841E0,47B032D8
 VER 01A4 47F032D8
 VER 02D2 4100006C
 REP 026E 41F00010,0AF8,47FF3272,47F032D8,47F032D0,0700
 REP 01A4 47F0326C
 IDRDATA VS00005
++ ZAP (IFG0196N) .  /* TMS BASE DELTA FOR PTF - - - - (EDM1102) */
 NAME IGC0001I IFG0196N
 VER 009E D50132FEA018,474030B4
 VER 02C0 1700,43004190
 VER 0352 00000000,0000,00000000,00000000,00000000,00000000
 REP 009E 47F03350
 REP 0352 41F00014,0AF8,47FF3356,47F030A6,47F032BE,47F030B4
 IDRDATA VS00005
++ ZAP (IFG0553F) .  /* DELTA 230 FOR PTF UZ25274 */
 NAME IGC0005E IFG0553F                                   40230
 VER  04C8 9180202A,47E034D6,910C202B,478034E8            40230
 REP  04C8 41F0001C,0AF8,47FF34CC,47F034E8,0700           40230
 IDRDATA VS00005
++ ZAP (IFG0552V) .  /* TMS BASE DELTA    FOR PTF - - - - (EDM1102) */
 NAME IGC0005E IFG0552V
 VER 0012 9180202A,47803020,910C202B,47803026
 REP 0012 41F0003C,0700,0AF8,47FF3018,47F03026
 IDRDATA VS00005
++ ZAP (IFG0551T) .  /* TMS BASE DELTA     FOR PTF UZ22277 */
 NAME IGC0005E IFG0551T
 VER 00CA 9180202A,478030D8,910C202B,478030DE,D703200C200C
 REP 00CA 41F00040,0AF8,47FF30CE,47F030DE,0700
 IDRDATA VS00005
++ ZAP (IFG0200Y) .  /* DELTA 236 FOR PTF UZ26833 */
 NAME IGC00020 IFG0200Y                                   40236
 VER 01EC 9180A012,4710321C,41F03511                      40236
 VER 021E 9140A006,47E03234                               40236
 VER 0560 00000000,0000,00000000                          40236
 REP 01EC 9180A012,4710355E                               40236
 REP 0560 41F00044,0AF8,47F0321C                          40236
 IDRDATA VS00005
/*
./ ADD NAME=VS00006  0102-80101-80102-0851-00031-00028-00003-$SYS13  00
//VS00006 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//*         STEP 1 ASSEMBLE IKJEFTE2
//*         STEP 2 ASSEMBLE IKJEFTE8
//*         STEP 3 SMP TO INSTALL AS SYSMOD NUMBER VS00006
//*
//STEP1    EXEC ASMFC,MAC1='SYS1.AMODGEN',
//          PARM.ASM='NOTERM,LIST,NODECK,OBJECT'
//ASM.SYSLIB DD UNIT=DISK,VOL=SER=ITEL01
//          DD UNIT=DISK,VOL=SER=ITEL02
//ASM.SYSGO DD DISP=OLD,DSN=SYS0.LINKLIB2.OBJ(IKJEFTE2)
//SYSIN     DD DISP=SHR,DSN=SYS0.LINKLIB2.SOURCE(IKJEFTE2)
//*
//STEP2    EXEC ASMFC,PARM.ASM='NOTERM,LIST,NODECK,OBJECT'
//ASM.SYSLIB DD UNIT=DISK,VOL=SER=ITEL01
//ASM.SYSGO DD DISP=OLD,DSN=SYS0.LINKLIB2.OBJ(IKJEFTE8)
//SYSIN     DD DISP=SHR,DSN=SYS0.LINKLIB2.SOURCE(IKJEFTE8)
//*
//STEP3    EXEC IPOSMP4,COND=(8,LT)
//SYSIN   DD  *
 RECEIVE S(VS00006) .
 APPLY   S(VS00006) DIS(NO) .
 LIST  CDS SYSMOD(VS00006).
 LIST  CDS MOD(IKJEFTE2,IKJEFTE8).
//SMPPTFIN     DD  *
++ USERMOD (VS00006) .
++ VER (Z038) FMID(EBB1102)  SUP(IPOTE80).
++ MOD (IKJEFTE2) DISTLIB(AOST4) TXLIB(OBJECT) .
++ MOD (IKJEFTE8) DISTLIB(AOST4) TXLIB(OBJECT) .
//OBJECT  DD DISP=SHR,DSN=SYS0.LINKLIB2.OBJ
./ ADD NAME=VS00007  0104-80106-80106-1644-00090-00129-00079-$SYS03  00
//VS00007  JOB (2000,S010),CAIRES,CLASS=Z,MSGCLASS=A
/*JOBPARM Q=F,I
//*
//* INSTALL ABEND-AID REL 3.0 AFTER PUT TAPES 7909 THRU 7911,
//* AND AFTER INSTALL OF SAME V1.0 AND SE V2.0 AT ITEL. CAIRES 4/15/80.
//*
//* JCL TAKEN FROM SYS4.ABENDAID.V30.SORCMAC(JCLS45A2).
//* THIS JOB USES $SYSUT.ABENDAID.V30.CNTL(ABENDAID) INSTEAD OF
//* SYS4.ABENDAID.V30.OBJECT(ABENDAID), WHICH LIBRARY IS TO BE
//* DELETED AFTER INITIAL INSTALLATION.
//*
//*
//IPOSMP4  EXEC IPOSMP4           DLIB=PAG002,RES=SYS101,PTS=PAG002
//********************************************************************
//*   JCLS45A2 - SMP 4 JCL FOR THE ABEND-AID OPERATING SYSTEM CHANGE *
//*              FOR MVS REL 3.8 WITH SU 64 (3033 MP PER SUPPORT)    *
//*                                                                  *
//*    PLEASE NOTE THAT THE PROCEDURE NAME (SMP4PROC) MUST BE CHANGED*
//*    ALSO NOTE THAT THE ORDER OF THE SMP DD STATEMENTS MAY NOT     *
//*         MATCH THE ORDER OF THE SAME SMP DD CARD IN YOUR SMPPROC  *
//*         PLEASE REARRANGE THEM BEFORE RUNNING TO INSURE PROPER    *
//*         JCL OVERRIDE                                             *
//*                                                                  *
//********************************************************************
//SYSIN    DD  *    ( //SMPCNTL DD DDNAME=SYSIN )
UCLIN CDS.
REP MOD(ABENDAID) LMOD(IGC0005A) DISTLIB(ABENDAID) FMID(EBB1102) .
ENDUCL.
UCLIN ACDS.
ADD MOD(ABENDAID) LMOD(IGC0005A) DISTLIB(ABENDAID) FMID(EBB1102) .
ENDUCL.
 LIST PTS SYSMOD(VS00007) .
 REJECT  S(VS00007) .
 RECEIVE S(VS00007)
         /* UPDATE CDS WITH ABENDAID FRONT END TO IGC0005A */ .
 LIST PTS SYSMOD(VS00007) .
 LIST CDS SYSMOD(VS00007) .
 APPLY   S (VS00007)  DIS(WRITE) .
 LOG (UPDATE SMP CDS WITH ABENDAID MODULE DESTINED FOR LPALIB).
 LIST CDS SYSMOD(VS00007) .
/*
//*
//*
//*
//DUMMYJCL DD *   UNUSED CARDS.
 APPLY   S (VS00007)  CHECK .
/*
//*
//*
//*
//* JCLIN FOR LMOD IGC0005A, INCLUDING ABENDAID MOD.
//*
//SMPPTFIN DD DATA,DLM=$$
++ USERMOD(VS00007) .
++ VER(Z038) FMID(EBB1102).
++ JCLIN  /* UPDATE SMPCDS WITH ABENDAID FRONT END TO IGC0005A */ .
//LINK     EXEC PGM=IEWL,PARM='LIST,XREF,NCAL,RENT,REFR'
//SYSLMOD  DD  DSN=SYS1.LPALIB,DISP=SHR
//ABENDAID DD DISP=SHR,DSN=SYS4.ABENDAID.V30.LINKLIB
//SYSLIN   DD  *
     INCLUDE ABENDAID(ABENDAID)
     ORDER   ABENDAID
     ORDER   IEAVAD00(P),IEAVAD03(P)
     ORDER   IEAVAD01(P),IEAVAD0B
     ORDER   IEAVAD02(P),IEAVAD05,IEAVAD09,IEAVADFM
     ORDER   IEAVAD06(P),IEAVAD07,IEAVAD08
     ORDER   IEAVAD11(P),IEAVAD31,IEAVAD51,IEAVAD71,IEAVAD0A
     ORDER   IEAVAD0E(P),IEAVAD0F,IEAVAD10
     ORDER   IEAVAD0C(P),IEAVAD0D
     ORDER   IEAVTSDG(P),IEAVTSDC,IEAVTSSE
     ORDER   IEAVTSDL(P),IEAVTSDF
     ORDER   IEAVTSDT(P),IEAVTSDH,IEAVTSDU
     ORDER   IEAVTSDO,IEAVTSDW
     ALIAS   IEAVTSDT
     ALIAS   IEAVTSDA
     ENTRY   ABENDAID
     NAME    IGC0005A(R)
/*
++ MOD(ABENDAID) TXLIB(TMOBJECT) DISTLIB(ABENDAID) LEPARM(RENT,REFR) .
$$
//ABENDAID DD DSN=SYS4.ABENDAID.V30.LINKLIB,DISP=SHR,
//            VOL=SER=SYS200,UNIT=DISK
//*TMOBJECT DD DSN=SYS4.ABENDAID.V30.OBJECT,DISP=SHR
//*
//* THE FOLLOWING LIBRARY, $SYSUT.ABENDAID.V30.CNTL, CONTAINS A COPY OF
//* THE ABENDAID CSECT FROM SYS4.ABENDAID.V30.OBJECT, CREATED BY JOB
//* ABENAID1.  SYS4.ABENDAID.V30.OBJECT IS NOT NEEDED AFTER ABENDAID
//* INSTALLATION.
//*
//TMOBJECT DD DSN=$SYSUT.ABENDAID.V30.CNTL,DISP=SHR
./ ADD NAME=VS00008  0120-80107-80191-1154-00091-00023-00000-$SYS13  00
//VS00008 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//*         STEP 1 ASSEMBLE AND LINKEDIT SPFIJTIP
//*         STEP 2 SMP TO INSTALL SPF/JTIP AS SYSMOD NUMBER VS00008
//*
//STEP1    EXEC ASMFCL,MAC='SYS2.MACLIB'
//ASM.SYSLIB DD
//          DD UNIT=DISK,VOL=SER=SYS100
//ASM.SYSIN DD DSN=SYS0.CMDLIB2.SOURCE(SPFIJTIP),DISP=SHR
//LKED.SYSLMOD DD DISP=OLD,DSN=SYS2.CMDLIB(SPFIJTIP)
//*
//STEP2   EXEC  IPOSMP4
//SMPPTFIN DD *
++ USERMOD (VS00008) .
++ VER (Z038) FMID(JTP0001) PRE(VS00026)
 /*
 JES2TSO:  UPDATE TO JES2TSO - ADD  DUMMY STATEMENT
           TO FORCE ASSEMBLY.
 FETCH:    UPDATE TO FETCH - SPF/JTIP INTERFACE
           PERMITS FETCH TO RETRIEVE BY DDNAME TO THE
           SPFLIST1/2 VIO DATASETS.
 VERFYQEL: UPDATE TO VERFYQEL SO THAT $SYS USER CAN
           FETCH, ROUTE, PURGE AND SHOW ANY JOB
           REGARDLESS OF THE JOBNAME.
 */ .
++ SRCUPD (JES2TSO) DISTLIB(JTIPMAC) .
>< CHANGE NAME=JES2TSO
*        DUMMY STATEMENT TO FORCE ASSEMBLY                     ITEL RPW
++ SRCUPD (FETCH) DISTLIB(JTIPMAC) .
>< CHANGE NAME=FETCH
         PUNCH ' ALIAS FET'                                    ITEL RPW
         EJECT 1                                                CSG RWB
         BZ    CSGONT1             OKAY - BYPASS THIS JAZZ      CSG RWB
CSGRC04  L     R3,CPPLUPT          ELSE -                       CSG RWB
         L     R4,CPPLECT          FLUSH THE COMMAND STACK -    CSG RWB
         LA    R5,ECBS             AND -                        CSG RWB
         XC    ECBS,ECBS           SET -                        CSG RWB
         L     R13,4(,R13)         RETURN -                     CSG RWB
         RETURN (14,12),RC=4       CODE TO 04 - JOB NOT FOUND   CSG RWB
         SPACE 2                                                CSG RWB
CSGONT1  DS    0H                                               CSG RWB
         EJECT 1                                                CSG RWB
         TM    DSNAM+6,X'40'       QUOTES AROUND DSN ?          CSG RWB
         BNO   CSGALLOC            ..NO, CAN'T BE THE ONE I WANTCSG RWB
         L     R2,DSNAM            POINT AT DSNAME              CSG RWB
         LA    R1,7                LOOK AT 7 POSITIONS          CSG RWB
CSGCKSPC DS   0H                   CHECK FOR SPECIAL DSN        CSG RWB
         CLC   =C'.SPFTEMP',1(R2)   SPF TEMP LIST DS ?          CSG RWB
         BE    CSGCHK10            ..MAYBE , MAKE SURE          CSG RWB
         LA    R2,1(,R2)           ..NO, TRY AGAIN              CSG RWB
         BCT   R1,CSGCKSPC                                      CSG RWB
         B     CSGALLOC                                         CSG RWB
CSGCHK10 DS   0H                   CHECK FOR SPECIAL DSN        CSG RWB
         CLC   =C'.LIST',10(R2)    COMPLETE CHECK               CSG RWB
         BNE   CSGALLOC            NOT ONE I WANT               CSG RWB
         MVC   CSGDDNAM(7),=C'SPFLIST'  SET UP 'SPECIAL' DDNAME CSG RWB
         MVC   CSGDDNAM+7(1),9(R2)      LIST NO. FROM DSN       CSG RWB
         EXTRACT CSGTIOT,FIELDS=(TIOT) GET ADDR OF TIOT         CSG RWB
         L     R2,CSGTIOT                                       CSG RWB
         LA    R2,24(,R2)          POINT AT FIRST DD            CSG RWB
CSGCHKDD CLC   0(4,R2),=F'0'       END OF TIOT ?                CSG RWB
         BE    CSGALLOC            ..YES, GO ALLOC D.S.         CSG RWB
         CLC   CSGDDNAM,4(R2)      ..NO, IS 'SPECIAL' DD HERE ? CSG RWB
         BE    CSGDDFND            ..YES, GO PROCCESS           CSG RWB
         SR    R1,R1               ..NO, GET INCR               CSG RWB
         IC    R1,0(R2)                                         CSG RWB
         AR    R2,R1               ADD TO CURRENT ENTRY         CSG RWB
         B     CSGCHKDD            GO CHECK NEXT ENTRY          CSG RWB
CSGDDFND DS   0H                   'SPECIAL' DD FOUND           CSG RWB
         MVC   DA08DDNM,CSGDDNAM   SET UP DDNAME                CSG RWB
         B     DAIROK              GO TO IT                     CSG RWB
CSGALLOC DS   0H                   'SPECIAL' DD NOT FOUND       CSG RWB
ERROR90  PUTIT 'INVALID JOB NUMBER',JUMP=CSGRC04                CSG RWB
         DC    C'N',AL1(133),AL2(3059),X'94',X'03'             ITEL RPW
CSGDDNAM DS    CL8                 'SPECIAL' DDNAME FOR SPF     CSG RWB
CSGTIOT  DS    F                    ADDR OF TIOT                CSG RWB
++ SRCUPD (VERFYQEL) DISTLIB(JTIPMAC) .
>< CHANGE NAME=VERFYQEL
         CLC   0(4,R1),=C'$SYS' SEE IF SYSTEM USER             ITEL RPW
         BE    VEREXIT          OK, BYPASS EVERTHING           ITEL RPW
         CLC   0(4,R1),=C'$RJE' SEE IF PRODCTION USER          ITEL RPW
         BNE   NOVERXIT         NOPE                           ITEL RPW
         CLI   JQEJNAME,C'I'    PRODUCTION JOB                 ITEL RPW
         BE    VEREXIT          OK, LET THEM DO IT             ITEL RPW
>< ENDUP
//SYSIN DD *
 REJECT  S (VS00008) .
 RECEIVE S (VS00008) .
 APPLY   S (VS00008) .
/*
./ ADD NAME=VS00009  3803-80010-80101-1327-00020-00019-00007-$SYS13  00
//VS00009 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//VS00009 EXEC IPOSMP4
//SYSIN DD *
 RECEIVE S (VS00009) .
 APPLY   S (VS00009) .
 LOG (3270  LOGICAL TAB (CENT SIGN), GOOD ON ALL TERMINALS) .
//SMPPTFIN DD  *
++ USERMOD (VS00009) /*LOGOCAL TABS(¢) GOOD ON ALL TERMINALS */ .
++ VER (Z038) FMID(EBB1102) .
++ ZAP (IKJEBELE) .
 NAME IKJEBELE
 VER  0228 92406003     MVI  3(6),X'40'
 VER  0828 4A4B4C4D                       CENT SIGN, TABLE CONT.
 REP  0228 924A6003     MVI  3(6),C'   '    TAB OFF SUBCOMMAND
 REP  0828 05                              LOGICAL TAB FOR 3270
*                                          REPLACE LOGICAL TAB WITH
*                                          CENT SIGN
 IDRDATA VS00009
/*
./ ADD NAME=VS00010  0109-80081-80117-1357-00033-00022-00022-$SYS13  00
//VS00010  JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//*         STEP 1 ASSEMBLE IEFUJI
//*         STEP 2 ASSEMBLE IEFUSI
//*         STEP 3 ASSEMBLE IEFUTL
//*         STEP 4 SMP TO INSTALL AS SYSMOD NUMBER VS00010
//*
//STEP1    EXEC ASMFC,PARM.ASM='NOTERM,LIST,NODECK,OBJECT'
//ASM.SYSGO DD DSN=SYS0.LINKLIB2.OBJ(IEFUJI),DISP=OLD
//SYSIN     DD DSN=SYS0.LINKLIB2.SOURCE(IEFUJI),DISP=SHR
//*
//STEP2    EXEC ASMFC,PARM.ASM='NOTERM,LIST,NODECK,OBJECT'
//ASM.SYSGO DD DSN=SYS0.LINKLIB2.OBJ(IEFUSI),DISP=OLD
//SYSIN     DD DSN=SYS0.LINKLIB2.SOURCE(IEFUSI),DISP=SHR
//*
//STEP3    EXEC ASMFC,PARM.ASM='NOTERM,LIST,NODECK,OBJECT'
//ASM.SYSGO DD DSN=SYS0.LINKLIB2.OBJ(IEFUTL),DISP=OLD
//SYSIN     DD DSN=SYS0.LINKLIB2.SOURCE(IEFUTL),DISP=SHR
//*
//STEP4    EXEC IPOSMP4,COND=(0,NE)
//SMPPTFIN     DD  *
++ USERMOD (VS00010) .
++ VER (Z038) FMID(JBB1222) .
++ MOD (IEFUJI) DISTLIB(AOSB3) TXLIB(OBJECT) .
++ MOD (IEFUSI) DISTLIB(AOSB3) TXLIB(OBJECT) .
++ MOD (IEFUTL) DISTLIB(AOSB3) TXLIB(OBJECT) .
//SYSIN   DD  *
 REJECT  S(VS00010) .
 RECEIVE S(VS00010) .
 APPLY   S(VS00010) DIS(NO) .
 LIST  CDS SYSMOD(VS00010) DIS(NO) .
//OBJECT  DD DSN=SYS0.LINKLIB2.OBJ,DISP=SHR
./ ADD NAME=VS00011  0104-80128-80128-1237-00173-00176-00000-$SYS13  00
//VS00011 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//STEP1    EXEC ASMFCL
//ASM.SYSLIB DD UNIT=DISK,VOL=SER=SYS100
//ASM.SYSIN  DD  DISP=SHR,DSN=SYS0.LINKLIB2.SOURCE(BLDLSWIT)
//LKED.SYSLMOD  DD  DISP=SHR,DSN=SYS2.LINKLIB
//LKED.SYSIN    DD  *
 SETCODE AC(1)
 NAME  BLDLSWIT(R)
//*
//STEP2    EXEC ASMFCL,MAC1='SYS1.AMODGEN'
//ASM.SYSLIB DD UNIT=DISK,VOL=SER=SYS100
//           DD UNIT=DISK,VOL=SER=ITEL02
//ASM.SYSIN  DD  DISP=SHR,DSN=SYS0.LINKLIB2.SOURCE(BLDLSTAT)
//LKED.SYSLMOD  DD  DISP=SHR,DSN=SYS2.LINKLIB
//LKED.SYSIN    DD  *
 NAME  BLDLSTAT(R)
/*
//STEP3    EXEC ASMFC,
//          PARM.ASM='NOTERM,LIST,NODECK,OBJECT'
//ASM.SYSLIB DD UNIT=DISK,VOL=SER=SYS100
//ASM.SYSGO DD DISP=OLD,DSN=SYS0.LINKLIB2.OBJ(DYNBLDL)
//SYSIN     DD DISP=SHR,DSN=SYS0.LINKLIB2.SOURCE(DYNBLDL)
//*
//STEP4    EXEC IPOSMP4
//SYSIN DD *
 RECEIVE S(VS00011) .
 APPLY   S(VS00011) .
 LIST CDS SYSMOD(VS00011) .
 LIST CDS MOD(IGC018) .
//NUCLEUSA DD DSN=SYS0.LINKLIB2.OBJ,DISP=SHR
//SMPPTFIN DD DATA
++ USERMOD (VS00011) .
++ VER   (Z038)   FMID (EDM1102)  PRE (UZ90059)
                 /*

         DYNAMIC BLDL

         THIS MODIFICATION SUPPLIES A DYNAMIC BLDL TABLE.
         IT FRONT ENDS IGC018.  THIS MOD INCLUDES BOTH
         THE FRONT END MODULE FOR IGC018 AND THE SYSGEN
         MACRO UPDATE FOR THE INCLUSION OF THE NEW MODULE
         AND THE EXTERNAL REFERENCE SYMBOL CHANGE.
         IF PLACED ONTO AN EXISTING SYSTEM, JCLIN
         WILL BE NECESSARY.

         NOTE THAT IN ORDER FOR THE "CHANGE" STATEMENT
         TO PROPERLY UPDATE THE BLDL MODULE (IGC018),
         IT IS NECESSARY TO PERFORM A JCLIN AND APPLY
         A PTF (OR OTHERWISE CAUSE SMP TO REPLACE IGC018).
         IF YOU FAIL TO DO SO WHEN APPLYING THIS PTF
         TO AN ALREADY GENERATED SYSTEM, BLDL WILL BE
         IN RATHER POOR SHAPE.

         DURING THE APPLY OF ANY PTF AGAINST THE ORIGINAL
         IGC018 MODULE, AN ERROR MESSAGE WILL BE ISSUED
         BY THE LINKAGE EDITOR, AS THE CSECT NAME OF IGC018
         IS CHANGED TO IGC018A AND THE "IDENTIFY" STILL
         REFERENCES THE ORIGINAL CSECT NAME. (NOTE THAT
         CHANGING THE "IDENTIFY" WILL ONLY RESULT IN THE
         ERROR MESSAGE BEING ISSUED AT ACCEPT TIME
         INSTEAD OF APPLY TIME.

         THE DYNAMIC BLDL CSECT (DYNBLDL) AS DISTRIBUTED
         CONTAINS A 200 ENTRY TABLE.  THIS CAN BE CHANGED
         BY UPDATING THE EQUATES FOR "ENT1" AND "ENT1X"
         IN THE SOURCE FOR DYNBLDL AND REASSEMBLING.
         EACH ENTRY TAKES 64 BYTES AND IS FIXED IN THE
         NUCLEUS.  200 ENTRIES PROVIDED A "HIT RATIO" IN
         EXCESS OF 95 PERCENT UNTIL THE 13 MOST POPULAR
         PL/I EXECUTION TIME SUBROUTINES WERE PLACED IN
         THE LINK PACK AREA.  THE "HIT RATIO" DROPPED
         TO ABOUT 90 PERCENT.

         SEPARATE PROGRAMS ARE AVAILABLE TO ENABLE/DISABLE
         DYNAMIC BLDL AND TO RETRIEVE USE STATISTICS.
         THESE AND "BLDLSWIT" AND "BLDLSTAT".
         BLDLSWIT IS AN AUTHORIZED PROGRAM THAT WILL TURN
         A SWITCH IN THE DYNAMIC BLDL MODULE ON AND OFF.
         (WHEN DISABLING DYNAMIC BLDL, IT ALSO ZEROS THE
         BLDL TABLE.)  NOTE, HOWEVER, WHEN DYNAMIC BLDL IS
         DISABLED, THE SYSTEM WILL USE ONLY THE BLDL LIST
         SUPPLIED THROUGH PARMLIB AT IPL TIME (IF ANY).
         THIS CAN LEAD TO SERIOUS PERFORMANCE PROBLEMS.
         BLDLSTAT IS AN UNAUTHORIZED PROGRAM WHICH WILL
         DISPLAY THE CONTENTS OF THE BLDL TABLE AND WILL
         GIVE USAGE STATISTICS AND PERCENTAGES.
         IT CAN BE RUN FROM EITHER BATCH OR TSO.

         SYSGEN MACRO:      SGIEC3FB
         NEW MODULE:        DYNBLDL
         MODULE DEPENDANCY: IGC018 (UZ90059 - 7909)

                                                               */ .
++ UPDTE (SGIEC3FB)  DISTLIB (AGENLIB) .
><       CHANGE NAME=SGIEC3FB,LIST=ALL
         PUNCH '         CHANGE IGC018(IGC018A)    DYNAM BLDL ' #Z00132
         PUNCH '         INCLUDE NUCLEUSA(DYNBLDL) DYNAM BLDL ' #Z00132
><       ENDUP
++ MOD   (DYNBLDL)  DISTLIB (NUCLEUSA) TXLIB(NUCLEUSA).
++ JCLIN .
//NUC24 EXEC LINKS,COND=(4,LT),REGION=350K,
// PARM='LIST,XREF,NCAL,SCTR,LET,SIZE=(300K,64K)',
// UNIT='3330',SER=CCMVST,N=SYS1,NAME=NUCLEUS,P1='(',
// MOD=IEANUC01,P2=')',OBJ=OBJPDS03,CLASS=M
//SYSLIN DD *
   INSERT  IEAVNIP0
   INSERT  IEAVFX00
 INCLUDE AOS20(IGC058)
 INCLUDE AOS20(IECTATEN)
 INCLUDE SYSPUNCH(IEAASU00,IEASVC00,IEAVBK00,IEECVUCM)
 INCLUDE AOSC5(IECVURDT,IECVURSV,IECVRRSV)
 INCLUDE AOSC5(IECVESIO,IECVDURP)
 INCLUDE AOSC5(IEEVLDWT)
    INCLUDE AOSC5(IECTCATN)
 INCLUDE SYSPUNCH(IFBCTA00)
 INCLUDE SYSPUNCH(IEFAQTOP)
 INCLUDE  SYSPUNCH(IECZDTAB)
         CHANGE IGC018(IGC018A)    DYNAM BLDL
 INCLUDE  AOSD0(IGC018)
         INCLUDE NUCLEUSA(DYNBLDL) DYNAM BLDL
 INCLUDE  SYSPUNCH(IFGDEBCK)
 INCLUDE AOSCE(IGFCCHCR)
 INCLUDE AOSCE(IGFCHDA)
 INCLUDE AOSCE(IGFTMC00)
 INSERT IGFPMCIH,IGFRWAC
 INSERT IGFPMPFX,IGFPMSCA,IGFPMHCA
 INSERT IGFPMRTM,IGFPMTHA,IGFPMFRS
 INSERT IGFPMMSG,IGFPMKTA,IGFPKREF
 INSERT IGFPTERM,IGFPTSIG
 INSERT IGFCCHED
 INSERT IGFPNRFH
 INSERT IGFPBUCR,IGFPEXIT
 INSERT IGFPSAD0
 INSERT IGFPTCON,IGFPTREC
 INCLUDE AOSCE(IGFPMCIH)
 INCLUDE AOSCE(IGFRWAC)
 INCLUDE AOSCE(IGFPMPFX)
 INCLUDE AOSCE(IGFPMSCA)
 INCLUDE AOSCE(IGFPMHCA)
 INCLUDE AOSCE(IGFPMRTM)
 INCLUDE AOSCE(IGFPMTHA)
 INCLUDE AOSCE(IGFPMFRS)
 INCLUDE AOSCE(IGFPMMSG)
 INCLUDE AOSCE(IGFPMKTA)
 INCLUDE AOSCE(IGFPKREF)
 INCLUDE AOSCE(IGFPTERM)
 INCLUDE AOSCE(IGFPTSIG)
 INCLUDE AOSCE(IGFCCHED)
 INCLUDE AOSCE(IGFPNRFH)
 INCLUDE AOSCE(IGFPBUCR)
 INCLUDE AOSCE(IGFPEXIT)
 INCLUDE AOSCE(IGFPSAD0)
 INCLUDE AOSCE(IGFPTCON)
 INCLUDE AOSCE(IGFPTREC)
 INCLUDE AOSCE(ICFBDX00)
 INCLUDE AOSCD(IFBDCB01)
 INCLUDE SYSPUNCH(IEECVD1)
 INCLUDE SYSPUNCH(IEECVH9)
 INCLUDE SYSPUNCH(IEECVH8)
 INCLUDE SYSPUNCH(IEECVH7)
 INCLUDE SYSPUNCH(IEECVH6)
 INCLUDE SYSPUNCH(IEECVH5)
 INCLUDE SYSPUNCH(IEECVH4)
 INCLUDE SYSPUNCH(IEECVH3)
 INCLUDE SYSPUNCH(IEECVH2)
 INCLUDE SYSPUNCH(IEECVH1)
 INCLUDE SYSPUNCH(IEECVSUB)
 INCLUDE SYSPUNCH(IEEPFKEY)
 INCLUDE SYSLMOD(IEANUC01)
 NAME IEANUC01(R)
/*
./ ADD NAME=VS000119 0100-80128-80128-1224-00176-00176-00000-$SYS13  00
//VS00011 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//STEP1    EXEC ASMFCL,MAC1='SYS1.AMODGEN'
//ASM.SYSLIB DD UNIT=DISK,VOL=SER=SYS100
//          DD UNIT=DISK,VOL=SER=ITEL02
//ASM.SYSIN  DD  DISP=SHR,DSN=SYS0.LINKLIB2.SOURCE(BLDLSWIT)
//LKED.SYSLMOD  DD  DISP=SHR,DSN=SYS2.LINKLIB
//LKED.SYSIN    DD  *
 SETCODE AC(1)
 NAME  BLDLSWIT(R)
//*
//STEP2    EXEC ASMFCL,MAC1='SYS1.AMODGEN'
//ASM.SYSLIB DD UNIT=DISK,VOL=SER=SYS100
//          DD UNIT=DISK,VOL=SER=ITEL02
//ASM.SYSIN  DD  DISP=SHR,DSN=SYS0.LINKLIB2.SOURCE(BLDLSTAT)
//LKED.SYSLMOD  DD  DISP=SHR,DSN=SYS2.LINKLIB
//LKED.SYSIN    DD  *
 NAME  BLDLSTAT(R)
/*
//*STEP3    EXEC ASMFC,MAC1='SYS1.AMODGEN',
//STEP3    EXEC ASMFC,
//          PARM.ASM='NOTERM,LIST,NODECK,OBJECT'
//ASM.SYSLIB DD UNIT=DISK,VOL=SER=SYS100
//          DD UNIT=DISK,VOL=SER=ITEL02
//ASM.SYSGO DD DISP=OLD,DSN=SYS0.LINKLIB2.OBJ(DYNBLDL)
//SYSIN     DD DISP=SHR,DSN=SYS0.LINKLIB2.SOURCE(DYNBLDL)
//*
//STEP4    EXEC IPOSMP4
//SYSIN DD *
 RECEIVE S(VS00011) .
 APPLY   S(VS00011) .
 LIST CDS SYSMOD(VS00011) .
 LIST CDS MOD(IGC018) .
//NUCLEUSA DD DSN=SYS0.LINKLIB2.OBJ,DISP=SHR
//SMPPTFIN DD DATA
++ USERMOD (VS00011) .
++ VER   (Z038)   FMID (EDM1102)  PRE (UZ90059)
                 /*

         DYNAMIC BLDL

         THIS MODIFICATION SUPPLIES A DYNAMIC BLDL TABLE.
         IT FRONT ENDS IGC018.  THIS MOD INCLUDES BOTH
         THE FRONT END MODULE FOR IGC018 AND THE SYSGEN
         MACRO UPDATE FOR THE INCLUSION OF THE NEW MODULE
         AND THE EXTERNAL REFERENCE SYMBOL CHANGE.
         IF PLACED ONTO AN EXISTING SYSTEM, JCLIN
         WILL BE NECESSARY.

         NOTE THAT IN ORDER FOR THE "CHANGE" STATEMENT
         TO PROPERLY UPDATE THE BLDL MODULE (IGC018),
         IT IS NECESSARY TO PERFORM A JCLIN AND APPLY
         A PTF (OR OTHERWISE CAUSE SMP TO REPLACE IGC018).
         IF YOU FAIL TO DO SO WHEN APPLYING THIS PTF
         TO AN ALREADY GENERATED SYSTEM, BLDL WILL BE
         IN RATHER POOR SHAPE.

         DURING THE APPLY OF ANY PTF AGAINST THE ORIGINAL
         IGC018 MODULE, AN ERROR MESSAGE WILL BE ISSUED
         BY THE LINKAGE EDITOR, AS THE CSECT NAME OF IGC018
         IS CHANGED TO IGC018A AND THE "IDENTIFY" STILL
         REFERENCES THE ORIGINAL CSECT NAME. (NOTE THAT
         CHANGING THE "IDENTIFY" WILL ONLY RESULT IN THE
         ERROR MESSAGE BEING ISSUED AT ACCEPT TIME
         INSTEAD OF APPLY TIME.

         THE DYNAMIC BLDL CSECT (DYNBLDL) AS DISTRIBUTED
         CONTAINS A 200 ENTRY TABLE.  THIS CAN BE CHANGED
         BY UPDATING THE EQUATES FOR "ENT1" AND "ENT1X"
         IN THE SOURCE FOR DYNBLDL AND REASSEMBLING.
         EACH ENTRY TAKES 64 BYTES AND IS FIXED IN THE
         NUCLEUS.  200 ENTRIES PROVIDED A "HIT RATIO" IN
         EXCESS OF 95 PERCENT UNTIL THE 13 MOST POPULAR
         PL/I EXECUTION TIME SUBROUTINES WERE PLACED IN
         THE LINK PACK AREA.  THE "HIT RATIO" DROPPED
         TO ABOUT 90 PERCENT.

         SEPARATE PROGRAMS ARE AVAILABLE TO ENABLE/DISABLE
         DYNAMIC BLDL AND TO RETRIEVE USE STATISTICS.
         THESE AND "BLDLSWIT" AND "BLDLSTAT".
         BLDLSWIT IS AN AUTHORIZED PROGRAM THAT WILL TURN
         A SWITCH IN THE DYNAMIC BLDL MODULE ON AND OFF.
         (WHEN DISABLING DYNAMIC BLDL, IT ALSO ZEROS THE
         BLDL TABLE.)  NOTE, HOWEVER, WHEN DYNAMIC BLDL IS
         DISABLED, THE SYSTEM WILL USE ONLY THE BLDL LIST
         SUPPLIED THROUGH PARMLIB AT IPL TIME (IF ANY).
         THIS CAN LEAD TO SERIOUS PERFORMANCE PROBLEMS.
         BLDLSTAT IS AN UNAUTHORIZED PROGRAM WHICH WILL
         DISPLAY THE CONTENTS OF THE BLDL TABLE AND WILL
         GIVE USAGE STATISTICS AND PERCENTAGES.
         IT CAN BE RUN FROM EITHER BATCH OR TSO.

         SYSGEN MACRO:      SGIEC3FB
         NEW MODULE:        DYNBLDL
         MODULE DEPENDANCY: IGC018 (UZ90059 - 7909)

                                                               */ .
++ UPDTE (SGIEC3FB)  DISTLIB (AGENLIB) .
><       CHANGE NAME=SGIEC3FB,LIST=ALL
         PUNCH '         CHANGE IGC018(IGC018A)    DYNAM BLDL ' #Z00132
         PUNCH '         INCLUDE NUCLEUSA(DYNBLDL) DYNAM BLDL ' #Z00132
><       ENDUP
++ MOD   (DYNBLDL)  DISTLIB (NUCLEUSA) TXLIB(NUCLEUSA).
++ JCLIN .
//NUC24 EXEC LINKS,COND=(4,LT),REGION=350K,
// PARM='LIST,XREF,NCAL,SCTR,LET,SIZE=(300K,64K)',
// UNIT='3330',SER=CCMVST,N=SYS1,NAME=NUCLEUS,P1='(',
// MOD=IEANUC01,P2=')',OBJ=OBJPDS03,CLASS=M
//SYSLIN DD *
   INSERT  IEAVNIP0
   INSERT  IEAVFX00
 INCLUDE AOS20(IGC058)
 INCLUDE AOS20(IECTATEN)
 INCLUDE SYSPUNCH(IEAASU00,IEASVC00,IEAVBK00,IEECVUCM)
 INCLUDE AOSC5(IECVURDT,IECVURSV,IECVRRSV)
 INCLUDE AOSC5(IECVESIO,IECVDURP)
 INCLUDE AOSC5(IEEVLDWT)
    INCLUDE AOSC5(IECTCATN)
 INCLUDE SYSPUNCH(IFBCTA00)
 INCLUDE SYSPUNCH(IEFAQTOP)
 INCLUDE  SYSPUNCH(IECZDTAB)
         CHANGE IGC018(IGC018A)    DYNAM BLDL
 INCLUDE  AOSD0(IGC018)
         INCLUDE NUCLEUSA(DYNBLDL) DYNAM BLDL
 INCLUDE  SYSPUNCH(IFGDEBCK)
 INCLUDE AOSCE(IGFCCHCR)
 INCLUDE AOSCE(IGFCHDA)
 INCLUDE AOSCE(IGFTMC00)
 INSERT IGFPMCIH,IGFRWAC
 INSERT IGFPMPFX,IGFPMSCA,IGFPMHCA
 INSERT IGFPMRTM,IGFPMTHA,IGFPMFRS
 INSERT IGFPMMSG,IGFPMKTA,IGFPKREF
 INSERT IGFPTERM,IGFPTSIG
 INSERT IGFCCHED
 INSERT IGFPNRFH
 INSERT IGFPBUCR,IGFPEXIT
 INSERT IGFPSAD0
 INSERT IGFPTCON,IGFPTREC
 INCLUDE AOSCE(IGFPMCIH)
 INCLUDE AOSCE(IGFRWAC)
 INCLUDE AOSCE(IGFPMPFX)
 INCLUDE AOSCE(IGFPMSCA)
 INCLUDE AOSCE(IGFPMHCA)
 INCLUDE AOSCE(IGFPMRTM)
 INCLUDE AOSCE(IGFPMTHA)
 INCLUDE AOSCE(IGFPMFRS)
 INCLUDE AOSCE(IGFPMMSG)
 INCLUDE AOSCE(IGFPMKTA)
 INCLUDE AOSCE(IGFPKREF)
 INCLUDE AOSCE(IGFPTERM)
 INCLUDE AOSCE(IGFPTSIG)
 INCLUDE AOSCE(IGFCCHED)
 INCLUDE AOSCE(IGFPNRFH)
 INCLUDE AOSCE(IGFPBUCR)
 INCLUDE AOSCE(IGFPEXIT)
 INCLUDE AOSCE(IGFPSAD0)
 INCLUDE AOSCE(IGFPTCON)
 INCLUDE AOSCE(IGFPTREC)
 INCLUDE AOSCE(ICFBDX00)
 INCLUDE AOSCD(IFBDCB01)
 INCLUDE SYSPUNCH(IEECVD1)
 INCLUDE SYSPUNCH(IEECVH9)
 INCLUDE SYSPUNCH(IEECVH8)
 INCLUDE SYSPUNCH(IEECVH7)
 INCLUDE SYSPUNCH(IEECVH6)
 INCLUDE SYSPUNCH(IEECVH5)
 INCLUDE SYSPUNCH(IEECVH4)
 INCLUDE SYSPUNCH(IEECVH3)
 INCLUDE SYSPUNCH(IEECVH2)
 INCLUDE SYSPUNCH(IEECVH1)
 INCLUDE SYSPUNCH(IEECVSUB)
 INCLUDE SYSPUNCH(IEEPFKEY)
 INCLUDE SYSLMOD(IEANUC01)
 NAME IEANUC01(R)
/*
./ ADD NAME=VS00012  3808-80010-80137-1846-00035-00047-00026-$SYS13  00
//VS00012 JOB   (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//SMP EXEC IPOSMP4
//SMPCNTL DD *
 REJECT  S (VS00012).
 RESTORE S (VS00012).
 RECEIVE S (VS00012).
 APPLY S (VS00012)  .
 LIST CDS SYSMOD(VS00012).
/*
//SMPPTFIN DD *
++ USERMOD(VS00012)      /* RESET PROFILE PREFIX TO BE USERID */.
++ VER (Z038) FMID(JBB1112) PRE(UZ28125).
++ ZAP (IKJEFLE).
 NAME IKJEFLE
**********************************************************************
 VER  0ACE 47F0CB26               B     FNDPROC            NOT CHANGED
 VER  0B4A 5880B4C0      FNDPROC  L     @08,UADSNDAT
 VER  25FA 00000000      PATCHLOC DC    X'00000000'
 VER  25FE 00000000               DC    X'00000000'
 VER  2602 00000000               DC    X'00000000'
 VER  2606 00000000,0000          DC    X'000000000000'
 VER  260C 00000000               DC    X'00000000'
 VER  2610 00000000               DC    X'00000000'
**********************************************************************
 REP  0B4A 47F095D8               B     PATCHLOC
**********     BEGINING OF PATCH AREA     **********
 REP  25FA 5810B400      PATCHLOC L     R1,LWAPTR
 REP  25FE 58E01018               L     R14,LWAPSCB(,R1) PSCB PTR
 REP  2602 5810E034               L     R1,PSCBUPT(,14)  UPT PTR
 REP  2606 D2071010,E000          MVC   16(8,R1),0(R14)  MOVE ID
 REP  260C 5880B4C0               L     @08,UADSNDAT     FROM BEFORE
 REP  2610 47F0CB2A               B     FNDPROC+4        CONTINUE
**********************************************************************
 IDRDATA VS00012
./ ADD NAME=VS00013  3803-80010-80101-1347-00025-00027-00008-$SYS13  00
//VS00013  JOB  (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//SMP EXEC IPOSMP4
//SMPCNTL DD *
 RECEIVE S (VS00013).
 APPLY S (VS00013) .
 LOG (ELIMINATE BLDL FOR TSO EDIT AND TEST SUBCOMMANDS).
 LIST CDS SYSMOD(VS00013).
 LIST CDS   MOD(IKJEBECI,IKJEGCIV) .
/*
//SMPPTFIN DD *
++ USERMOD(VS00013)   .       /* ELIMINATE BLDL FOR TSO EDIT AND */
++ VER (Z038) FMID(EBB1102) . /* TEST SUBCOMMANDS               */
++ ZAP (IKJEBECI)  .
 NAME IKJEBECI
 VER 021C 0A12
 VER 037C 9280F000
 REP 021C 1BFF
 REP 037C 9200
 IDRDATA VS00013
++ ZAP (IKJEGCIV)  .
 NAME IKJEGCIV
 VER 00F4 0A12
 REP 00F4 1BFF
 IDRDATA VS00013
./ ADD NAME=VS00014  0116-80089-80211-1255-00027-00048-00027-$SYS13  00
//VS00014 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//*         STEP 1 ASSEMBLE IEFU84
//*         STEP 2 SMP TO INSTALL AS SYSMOD NUMBER VS00014
//*
//STEP1    EXEC ASMFC,MAC1='SYS1.AMODGEN',
//          PARM.ASM='NOTERM,LIST,NODECK,OBJECT'
//ASM.SYSLIB DD UNIT=DISK,VOL=SER=SYS100
//          DD UNIT=DISK,VOL=SER=ITEL02
//ASM.SYSGO DD DSN=SYS0.LINKLIB2.OBJ(IEFU84),DISP=OLD
//SYSIN     DD DSN=SYS0.LINKLIB2.SOURCE(IEFU84),DISP=SHR
//*
//STEP2  EXEC IPOSMP4,COND=(8,LT)
//SMPCNTL  DD  *
 REJECT  S (VS00014).
 RESTORE S (VS00014).
 RECEIVE S (VS00014).
 APPLY   S (VS00014) DIS(WRITE).
 LOG (SMF EXIT- RPW/07/28/80).
 LIST  CDS SYSMOD(VS00014) DIS(NO).
//SMPPTFIN  DD  *
++ USERMOD (VS00014) .
++ VER (Z038) FMID(JBB1222) .
++ MOD (IEFU84) TXLIB(OBJECT).
//OBJECT    DD  DISP=SHR,DSN=SYS0.LINKLIB2.OBJ
//********************************************************************
./ ADD NAME=VS00015  3804-80010-80101-1348-00017-00018-00017-$SYS13  00
//VS00015  JOB  (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//SMP EXEC IPOSMP4
//SMPCNTL DD *
 RECEIVE S (VS00015) .
 APPLY   S (VS00015) .
 LIST CDS  MOD(IKJEBESA) .
 LIST CDS  SYSMOD(VS00015) .
//SMPPTFIN DD *     SU11 TSO CMD PACKAGE
++ USERMOD (VS00015)      /* CHANGE TSO EDIT TO RELEASE SPACE
                         FOR NEW DATASETS                 */.
++ VER(Z038) PRE(UZ29594) FMID(JBB1112) .
++ ZAP (IKJEBESA) .   /* PTF UZ29594 */
 NAME IKJEBESA
 VER 139C 04020840      SADA8N   DC   DISP=(NEW,CATLG)
 REP 139C 04020850                    DISP=(NEW,CATLG),RLSE
 IDRDATA VS00015
./ ADD NAME=VS00016  3808-80010-80102-1945-00036-00023-00035-$SYS13  00
//VS00016 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//*         STEP 1 ASSEMBLE IGC0024I
//*         STEP 2 SMP TO INSTALL AS SYSMOD NUMBER VS00016
//*
//STEP1    EXEC ASMFC,MAC1='SYS1.AMODGEN',
//          PARM.ASM='NOTERM,LIST,NODECK,OBJECT'
//ASM.SYSLIB DD UNIT=DISK,VOL=SER=ITEL01
//          DD UNIT=DISK,VOL=SER=ITEL02
//ASM.SYSGO DD DISP=OLD,DSN=SYS0.LINKLIB2.OBJ(IGC0024I)
//SYSIN     DD DISP=SHR,DSN=SYS0.LINKLIB2.SOURCE(IGC0024I)
//*
//STEP2    EXEC IPOSMP4,COND=(8,LT)
//SYSIN DD *
 RECEIVE S (VS00016) .
 APPLY   S (VS00016) .
 LOG (UPDATE SMP CDS WITH SVC FOR WYLBUR).
 LIST  CDS SYSMOD (VS00016) .
//WYLBUR   DD  DISP=SHR,DSN=SYS0.LINKLIB2.OBJ(IGC0024I)
//SMPPTFIN DD  DATA
++ USERMOD (VS00016) .
++ VER (Z038) FMID(EBB1102) .
++ MOD (IGC0024I) DISTLIB(WYLBUR) TXLIB(WYLBUR) .
++ JCLIN .
//LKED     EXEC PGM=IEWL,PARM='XREF,LIST,LET,NCAL'
//* REFER SYS1.PROCLIB(LKED)
//SYSPRINT DD  SYSOUT=*
//WYLBUR   DD  DISP=SHR,DSN=SYS0.LINKLIB2.OBJ(IGC0024I)
//SYSLMOD  DD  DISP=OLD,DSN=SYS1.LPALIB(IGC0024I)
//SYSUT1   DD  UNIT=VIO,
//         SPACE=(1024,(200,20))
//SYSLIN   DD  *
 INCLUDE   WYLBUR(IGC0024I)
 NAME      IGC0024I(R)
/*
./ ADD NAME=VS00017  0110-79358-80101-1656-00019-00016-00000-$SYS03  00
//VS00017  JOB (2000,S010),S.CAIRES,CLASS=A,MSGCLASS=A
/*JOBPARM Q=F,I
//* VS00017 FROM FOWLER MEMOREX.
//VS00017  EXEC IPOSMP4           DLIB=PAG002,RES=SYS101,PTS=PAG002
//SYSIN DD *
 REJECT  S (VS00017) .
 RECEIVE S (VS00017) .
 LIST  PTS SYSMOD(VS00017) .
 APPLY   S (VS00017) CHECK BYPASS(REQ) /* DIS(READ) */ .
//SMPPTFIN DD  *
++ USERMOD (VS00017) /* PUT JOB NAME ON THE PUNCH SEPARATOR CARD */ .
++ VER (Z038)  FMID(EJE1102)
       PRE (AZ40644, UZ24622)
       REQ (VS00018, VS00025, VS00033) .
++ SRCUPD (HASPPRPU) DISTLIB(HASPSRC) .
>< CHANGE NAME=HASPPRPU
         MVC   BUFSTART(8),JCTJNAME     MOVE JOB NAME TO PUNCH  VS00017 Q1687010
><  ENDUP                                                               Q9999999
/*
./ ADD NAME=VS00018  0109-79358-80101-1659-00020-00018-00000-$SYS03  00
//VS00018  JOB (2000,S010),S.CAIRES,CLASS=Z,MSGCLASS=A
/*JOBPARM Q=F,I
//* VS00018 FROM FOWLER MEMOREX.
//VS00018  EXEC IPOSMP4          DLIB=PAG002,RES=SYS101,PTS=PAG002
//SYSIN  DD  *
 RECEIVE S (VS00018).
 LIST PTS SYSMOD(VS00018) .
 APPLY   S (VS00018) CHECK BYPASS(REQ) /* DIS(READ) */ .
//SMPPTFIN DD  *
++ USERMOD (VS00018) /* SET THE DEFAULT MSGCLASS TO "A" FOR A
                        TSO-SUBMITTED JOB */ .
++ VER (Z038) FMID(EJE1102)
       PRE (#Z90235, UZ24623, UZ24947)
       REQ (VS00017, VS00025, VS00033) .
++ SRCUPD (HASPRDR) DISTLIB (HASPSRC) .
>< CHANGE NAME=HASPRDR
         MVI   JCTMCLAS,C'A'            SET DEFAULT MSGCLASS=A  VS00018 R2567500
         CLI   JCTJOBID,C'J'            IS THIS A JOB           VS00018 R2567600
         BE    *+10                     BIF SO - USE MSGCLASS=A VS00018 R2567700
><  ENDUP                                                               R9999999
./ ADD NAME=VS00019  3803-80010-80102-1149-00020-00022-00018-$SYS13  00
//VS00019 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//*   INSTALL THE IDMS SVC  219
//*
//VS00019  EXEC IPOSMP4
//SYSIN DD *
 UCLIN CDS .
 ADD MOD(IGC219) LMOD(IEANUC01) DISTLIB(IDMS) FMID(EBB1102) .
 ENDUCL .
 RECEIVE S(VS00019) .
 APPLY   S(VS00019) .
 LOG (ADD SVC  219 FOR IDMS) .
 LIST CDS SYSMOD(VS00019) .
//SMPPTFIN DD *
++ USERMOD (VS00019) .
++ VER (Z038) FMID(EBB1102) .
++ MOD (IGC219)   DISTLIB(IDMS) LKLIB(IDMS) .
/*
//IDMS   DD DISP=SHR,DSN=SYS3.IDMS.LOAD
./ ADD NAME=VS00020  0101-80101-80101-1135-00320-00320-00001-$SYS13  00
//VS00020 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//LPALNK EXEC PGM=IEBCOPY
//SYSPRINT   DD SYSOUT=*
//SYSUT3     DD UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSUT4     DD UNIT=SYSDA,SPACE=(CYL,(10,10))
//LPALIB     DD DSN=SYS1.LPALIB,DISP=OLD,UNIT=DISK,VOL=SER=ITEL01
//SLINKDD    DD DSN=SYS1.LINKLIB,DISP=SHR,UNIT=DISK,VOL=SER=ITEL01
//SYSIN      DD *
 COPY OUTDD=LPALIB,INDD=SLINKDD
 S M=IDCAL01
 S M=IDCAMS
 S M=IDCBI01
 S M=IDCCC01
 S M=IDCCDAL
 S M=IDCCDBI
 S M=IDCCDCC
 S M=IDCCDCK
 S M=IDCCDDE
 S M=IDCCDDL
 S M=IDCCDLC
 S M=IDCCDLR
 S M=IDCCDMP
 S M=IDCCDPM
 S M=IDCCDPR
 S M=IDCCDRC
 S M=IDCCDRM
 S M=IDCCDRP
 S M=IDCCDRS
 S M=IDCCDVY
 S M=IDCCDXP
 S M=IDCCK01
 S M=IDCDB01
 S M=IDCDB02
 S M=IDCDE01
 S M=IDCDL01
 S M=IDCIO04
 S M=IDCLC01
 S M=IDCLR01
 S M=IDCMP01
 S M=IDCPM01
 S M=IDCPR01
 S M=IDCRC01
 S M=IDCRIKT
 S M=IDCRILT
 S M=IDCRI01
 S M=IDCRI04
 S M=IDCRM01
 S M=IDCRP01
 S M=IDCRS01
 S M=IDCSATO
 S M=IDCTSAL0
 S M=IDCTSBI0
 S M=IDCTSCC0
 S M=IDCTSCK0
 S M=IDCTSDE0
 S M=IDCTSDL0
 S M=IDCTSEX0
 S M=IDCTSIO0
 S M=IDCTSLC0
 S M=IDCTSLC1
 S M=IDCTSLR0
 S M=IDCTSLR1
 S M=IDCTSMP0
 S M=IDCTSPR0
 S M=IDCTSRC0
 S M=IDCTSRI0
 S M=IDCTSRI1
 S M=IDCTSRS0
 S M=IDCTSSA0
 S M=IDCTSTP0
 S M=IDCTSTP1
 S M=IDCTSTP6
 S M=IDCTSUV0
 S M=IDCTSXP0
 S M=IDCVY01
 S M=IDCXP01
 S M=IKJCT467
 S M=IKJCT469
 S M=IKJEES40
 S M=IKJEES73
 S M=IKJEFA10
 S M=IKJEFA20
 S M=IKJEFA30
 S M=IKJEFA40
 S M=IKJEFF03
 S M=IKJEFF04
 S M=IKJEFF15
 S M=IKJEFF18
 S M=IKJEFF19
 S M=IKJEFF50
 S M=IKJEFF51
 S M=IKJEFF55
 S M=IKJEFF57
 S M=IKJEFT25
 S M=IKJRBBCR
 S M=IKJEFF10
 S M=IKJEFF53
 S M=ACCOUNT
 S M=AMBLIST
 S M=HEWLDRGO
 S M=HEWLOAD
 S M=HEWLOADR
 S M=HMBLIST
 S M=IAPAP100
 S M=IAPTIMER
 S M=IEAVMASV
 S M=IEAVMQR0
 S M=IEAVMWTL
 S M=IEAVTMSI
 S M=IEAVTPUT
 S M=IEAVVINT
 S M=IEBCRANL
 S M=IEBCREAT
 S M=IEBDG
 S M=IEBDGCUP
 S M=IEBDGMSG
 S M=IEBFDANL
 S M=IEBFDTBL
 S M=IEBISAM
 S M=IEBISC
 S M=IEBISF
 S M=IEBISL
 S M=IEBISPL
 S M=IEBISU
 S M=IEDQEC
 S M=IEDQES
 S M=IEDQEW
 S M=IEDQGQ
 S M=IEDQNF
 S M=IEDQNG
 S M=IEDQNH
 S M=IEDQNJ
 S M=IEDQNK
 S M=IEDQNM
 S M=IEDQNO
 S M=IEDQNP
 S M=IEDQNQ
 S M=IEDQNR
 S M=IEDQNS
 S M=IEDQNX
 S M=IEDQWO
 S M=IEECVGCI
 S M=IEEPGEXP
 S M=IEESB601
 S M=IEEVSEND
 S M=IEHATLAS
 S M=IEWLDRGO
 S M=IEWLOAD
 S M=IEWLOADR
 S M=IFASMFDP
 S M=IGFCIC
 S M=IGFC60
 S M=IGFC70
 S M=IGFC80
 S M=IGG0CLA0
 S M=ILROPS00
 S M=ILRPGEXP
 S M=ILRPREAD
 S M=IMBLIST
 S M=LOADER
/*
//*
//LINKUCL EXEC IPOSMP4        UCLIN: LINKLIB ---> LPALIB
//SYSIN   DD  *
  UCLIN CDS DIS(WRITE).
  ADD LMOD(IDCAL01)    SYSLIB(LPALIB).
  ADD LMOD(IDCAMS)     SYSLIB(LPALIB).
  ADD LMOD(IDCBI01)    SYSLIB(LPALIB).
  ADD LMOD(IDCCC01)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDAL)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDBI)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDCC)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDCK)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDDE)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDDL)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDLC)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDLR)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDMP)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDPM)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDPR)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDRC)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDRM)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDRP)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDRS)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDVY)    SYSLIB(LPALIB).
  ADD LMOD(IDCCDXP)    SYSLIB(LPALIB).
  ADD LMOD(IDCCK01)    SYSLIB(LPALIB).
  ADD LMOD(IDCDB01)    SYSLIB(LPALIB).
  ADD LMOD(IDCDB02)    SYSLIB(LPALIB).
  ADD LMOD(IDCDE01)    SYSLIB(LPALIB).
  ADD LMOD(IDCDL01)    SYSLIB(LPALIB).
  ADD LMOD(IDCIO04)    SYSLIB(LPALIB).
  ADD LMOD(IDCLC01)    SYSLIB(LPALIB).
  ADD LMOD(IDCLR01)    SYSLIB(LPALIB).
  ADD LMOD(IDCMP01)    SYSLIB(LPALIB).
  ADD LMOD(IDCPM01)    SYSLIB(LPALIB).
  ADD LMOD(IDCPR01)    SYSLIB(LPALIB).
  ADD LMOD(IDCRC01)    SYSLIB(LPALIB).
  ADD LMOD(IDCRIKT)    SYSLIB(LPALIB).
  ADD LMOD(IDCRILT)    SYSLIB(LPALIB).
  ADD LMOD(IDCRI01)    SYSLIB(LPALIB).
  ADD LMOD(IDCRI04)    SYSLIB(LPALIB).
  ADD LMOD(IDCRM01)    SYSLIB(LPALIB).
  ADD LMOD(IDCRP01)    SYSLIB(LPALIB).
  ADD LMOD(IDCRS01)    SYSLIB(LPALIB).
  ADD LMOD(IDCSATO)    SYSLIB(LPALIB).
  ADD LMOD(IDCTSAL0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSBI0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSCC0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSCK0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSDE0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSDL0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSEX0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSIO0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSLC0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSLC1)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSLR0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSLR1)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSMP0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSPR0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSRC0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSRI0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSRI1)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSRS0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSSA0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSTP0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSTP1)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSTP6)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSUV0)   SYSLIB(LPALIB).
  ADD LMOD(IDCTSXP0)   SYSLIB(LPALIB).
  ADD LMOD(IDCVY01)    SYSLIB(LPALIB).
  ADD LMOD(IDCXP01)    SYSLIB(LPALIB).
  ADD LMOD(IKJCT467)   SYSLIB(LPALIB).
  ADD LMOD(IKJCT469)   SYSLIB(LPALIB).
  ADD LMOD(IKJEES40)   SYSLIB(LPALIB).
  ADD LMOD(IKJEES73)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFA10)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFA20)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFA30)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFA40)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF03)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF04)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF15)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF18)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF19)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF50)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF51)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF55)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF57)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFT25)   SYSLIB(LPALIB).
  ADD LMOD(IKJRBBCR)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF10)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFF53)   SYSLIB(LPALIB).
  ADD LMOD(ACCOUNT)    SYSLIB(LPALIB).
  ADD LMOD(AMBLIST)    SYSLIB(LPALIB).
  ADD LMOD(HEWLDRGO)   SYSLIB(LPALIB).
  ADD LMOD(HEWLOAD)    SYSLIB(LPALIB).
  ADD LMOD(HEWLOADR)   SYSLIB(LPALIB).
  ADD LMOD(HMBLIST)    SYSLIB(LPALIB).
  ADD LMOD(IAPAP100)   SYSLIB(LPALIB).
  ADD LMOD(IAPTIMER)   SYSLIB(LPALIB).
  ADD LMOD(IEAVMASV)   SYSLIB(LPALIB).
  ADD LMOD(IEAVMQR0)   SYSLIB(LPALIB).
  ADD LMOD(IEAVMWTL)   SYSLIB(LPALIB).
  ADD LMOD(IEAVTMSI)   SYSLIB(LPALIB).
  ADD LMOD(IEAVTPUT)   SYSLIB(LPALIB).
  ADD LMOD(IEAVVINT)   SYSLIB(LPALIB).
  ADD LMOD(IEBCRANL)   SYSLIB(LPALIB).
  ADD LMOD(IEBCREAT)   SYSLIB(LPALIB).
  ADD LMOD(IEBDG)      SYSLIB(LPALIB).
  ADD LMOD(IEBDGCUP)   SYSLIB(LPALIB).
  ADD LMOD(IEBDGMSG)   SYSLIB(LPALIB).
  ADD LMOD(IEBFDANL)   SYSLIB(LPALIB).
  ADD LMOD(IEBFDTBL)   SYSLIB(LPALIB).
  ADD LMOD(IEBISAM)    SYSLIB(LPALIB).
  ADD LMOD(IEBISC)     SYSLIB(LPALIB).
  ADD LMOD(IEBISF)     SYSLIB(LPALIB).
  ADD LMOD(IEBISL)     SYSLIB(LPALIB).
  ADD LMOD(IEBISPL)    SYSLIB(LPALIB).
  ADD LMOD(IEBISU)     SYSLIB(LPALIB).
  ADD LMOD(IEDQEC)     SYSLIB(LPALIB).
  ADD LMOD(IEDQES)     SYSLIB(LPALIB).
  ADD LMOD(IEDQEW)     SYSLIB(LPALIB).
  ADD LMOD(IEDQGQ)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNF)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNG)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNH)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNJ)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNK)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNM)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNO)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNP)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNQ)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNR)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNS)     SYSLIB(LPALIB).
  ADD LMOD(IEDQNX)     SYSLIB(LPALIB).
  ADD LMOD(IEDQWO)     SYSLIB(LPALIB).
  ADD LMOD(IEECVGCI)   SYSLIB(LPALIB).
  ADD LMOD(IEEPGEXP)   SYSLIB(LPALIB).
  ADD LMOD(IEESB601)   SYSLIB(LPALIB).
  ADD LMOD(IEEVSEND)   SYSLIB(LPALIB).
  ADD LMOD(IEHATLAS)   SYSLIB(LPALIB).
  ADD LMOD(IEWLDRGO)   SYSLIB(LPALIB).
  ADD LMOD(IEWLOAD)    SYSLIB(LPALIB).
  ADD LMOD(IEWLOADR)   SYSLIB(LPALIB).
  ADD LMOD(IFASMFDP)   SYSLIB(LPALIB).
  ADD LMOD(IGFCIC)     SYSLIB(LPALIB).
  ADD LMOD(IGFC60)     SYSLIB(LPALIB).
  ADD LMOD(IGFC70)     SYSLIB(LPALIB).
  ADD LMOD(IGFC80)     SYSLIB(LPALIB).
  ADD LMOD(IGG0CLA0)   SYSLIB(LPALIB).
  ADD LMOD(ILROPS00)   SYSLIB(LPALIB).
  ADD LMOD(ILRPGEXP)   SYSLIB(LPALIB).
  ADD LMOD(ILRPREAD)   SYSLIB(LPALIB).
  ADD LMOD(IMBLIST)    SYSLIB(LPALIB).
  ADD LMOD(LOADER)     SYSLIB(LPALIB).
  ENDUCL.
/*
./ ADD NAME=VS00021  0105-80102-80191-1717-00029-00026-00029-$SYS13  00
//VS00021  JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//*            MOVE SYNCSORT REENTRANT MODULES TO LPALIB
//*
//IPOSMP4 EXEC IPOSMP4
//SMP.SMPCNTL   DD  *
 REJECT  S (VS00021) .
 RECEIVE S (VS00021) .
 APPLY  S (VS00021) .
 LIST  CDS SYSMOD(VS00021) .
 LOG (UPDATE SMP CDS WITH SYNCSORT MODULES DESTINED FOR LPALIB).
//SYNCSORT DD DISP=SHR,DSN=SYS4.SYNCSORT.V23G.LPALIB
//SMPPTFIN  DD  DATA
++ USERMOD (VS00021)  /* SYNCSORT MODULES IN LPALIB */ .
++ VER (Z038) FMID(EDM1102) .
++ MOD (IGX00017) DISTLIB(SYNCSORT) LKLIB(SYNCSORT) .
++ MOD (WCSREENT) DISTLIB(SYNCSORT) LKLIB(SYNCSORT) .
++ JCLIN.
//STEP1  EXEC PGM=IEBCOPY
//SYNCSORT DD DISP=SHR,DSN=SYS4.SYNCSORT.V23G.LPALIB
//LPALIB   DD DISP=SHR,DSN=SYS1.LPALIB,
//            VOL=SER=SYS100,UNIT=DISK
//SYSPRINT DD SYSOUT=*
//SYSIN    DD *
 C I=((SYNCSORT,R)),O=LPALIB
 S M=IGX00017
 S M=WCSREENT
/*
./ ADD NAME=VS00022  0107-79026-80101-1013-00096-00067-00049-$SYS03  00
//VS00022  JOB (2000,S010),S.CAIRES,CLASS=A,MSGCLASS=A
/*JOBPARM Q=F,I
//*
//* VS00022 TAKEN FROM WENZEL'S SYS.IPO40.SMP.CNTL(VS00022).
//* NEEDS CHANGES FOR SMP4.
//*
//IPOSMP4 EXEC IPOSMP4           DLIB=PAG002,RES=SYS101,PTS=PAG002
//SMP.SMPCNTL   DD  *
 LIST  PTS SYSMOD(VS00022) .
 APPLY  S (VS00022) DIS(WRITE) /* BACKUP CDS AND ACDS BEFORE WRITE */ .
 LIST  CDS SYSMOD(VS00022) .
 LOG (UPDATE SMP CDS WITH TMS MODULES DESTINED FOR LPALIB).
/*
//*
//*
//*
//DUMMYJCL DD *   UNUSED CARDS
 JCLIN /* UPDATE SMP CDS WITH TMS MODULES DESTINED FOR LPALIB */
  DIS(WRITE) /* JCLIN DEFAULT -- BACKUP CDS AND ACDS BEFORE WRITE */ .
 REJECT  S (VS00022) .
 RECEIVE S (VS00022) .
 APPLY  S (VS00022) CHECK DIS(READ) /* APPLY DEFAULT */ .
/*
//*
//*
//*
//TMS      DD DISP=SHR,DSN=SYS3.TMS.LPALIB,
//            VOL=SER=SYS101,UNIT=DISK
//*
//SMPJCLIN  DD DATA
//TMS  JOB (8220,0952),WENZEL,MSGCLASS=X,NOTIFY=$SYS13,CLASS=Z
//STEP1  EXEC PGM=IEBCOPY
//TMS      DD DISP=SHR,DSN=SYS3.TMS.LPALIB,
//            VOL=SER=SYS101,UNIT=DISK
//LPALIB   DD DISP=SHR,DSN=SYS1.LPALIB,
//            VOL=SER=SYS101,UNIT=DISK
//SYSPRINT DD SYSOUT=*
//*
//* THESE MEMBER NAMES MAY CHANGE WITH NEW RELEASES OF TMS.
//*
//SYSIN    DD *
 C I=((TMS,R)),O=LPALIB
 S M=IGC0A24H
 S M=IGC0B24H
 S M=IGC0C24H
 S M=IGC0D24H
 S M=IGC0E24H
 S M=IGC0F24H
 S M=IGC0024H
 S M=IGC0124H
 S M=IGC0224H
 S M=IGC0324H
 S M=IGC0424H
 S M=IGC0524H
 S M=IGC0624H
 S M=IGC0724H
 S M=IGC0824H
 S M=IGC0924H
 S M=IGC0024G
 S M=IGC0124G
 S M=IGC0224G
 S M=IGC0324G
 S M=IGC0424G
 S M=IGC0524G
 S M=IGC0624G
 S M=IGG24700
/*
//*
//SMPPTFIN  DD  *
++ USERMOD (VS00022)  /* UCC-1 TMS MODULES IN LPALIB */ .
++ VER (Z038) FMID(EDM1102) .
++ MOD (IGC0A24H) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0B24H) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0C24H) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0D24H) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0E24H) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0F24H) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0024H) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0124H) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0224H) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0324H) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0424H) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0524H) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0624H) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0724H) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0824H) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0924H) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0024G) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0124G) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0224G) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0324G) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0424G) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0524G) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGC0624G) DISTLIB(TMS) LKLIB(TMS) .
++ MOD (IGG24700) DISTLIB(TMS) LKLIB(TMS) .
/*
./ ADD NAME=VS00023  0108-79329-80102-0855-00022-00031-00018-$SYS13  00
//VS00023 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//*         STEP 1 ASSEMBLE IEFACTRT
//*         STEP 2 SMP TO RECEIVE SYSMOD NUMBER VS00023.
//*                HAS A COREQ OF VS00024.
//*
//STEP1    EXEC ASMFC,MAC1='SYS1.AMODGEN',
//          PARM.ASM='NOTERM,LIST,NODECK,OBJECT'
//ASM.SYSLIB DD UNIT=DISK,VOL=SER=ITEL01
//          DD UNIT=DISK,VOL=SER=ITEL02
//ASM.SYSGO DD DSN=SYS0.LINKLIB2.OBJ(IEFACTRT),DISP=OLD
//SYSIN     DD DSN=SYS0.LINKLIB2.SOURCE(IEFACTRT),DISP=SHR
//*
//STEP2    EXEC IPOSMP4,COND=(8,LT)
//SMPPTFIN     DD  *
++ USERMOD (VS00023) .
++ VER (Z038) FMID(JBB1222) REQ(VS00024).
++ MOD (IEFACTRT) DISTLIB(AOSB3) TXLIB(OBJECT) .
//SYSIN   DD  *
 RECEIVE S(VS00023) .
//OBJECT  DD DISP=SHR,DSN=SYS0.LINKLIB2.OBJ
./ ADD NAME=VS00024  0101-80101-80101-1725-00022-00027-00012-$SYS13  00
//VS00024 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//*         STEP 1 ASSEMBLE IEECVXIT
//*         STEP 2 SMP TO RECEIVE SYSMOD NUMBER VS00024
//*                AND TO APPLY BOTH VS00023 AND VS00024
//*
//STEP1    EXEC ASMFC,PARM.ASM='NOTERM,LIST,NODECK,OBJECT'
//ASM.SYSLIB DD UNIT=DISK,VOL=SER=ITEL01
//ASM.SYSGO DD DSN=SYS0.LINKLIB2.OBJ(IEECVXIT),DISP=OLD
//SYSIN     DD DSN=SYS0.LINKLIB2.SOURCE(IEECVXIT),DISP=SHR
//*
//STEP2    EXEC IPOSMP4,COND=(8,LT)
//SMPPTFIN     DD  *
++ USERMOD (VS00024) .
++ VER (Z038) FMID(EBB1102) REQ(VS00023).
++ MOD (IEECVXIT) DISTLIB(AOSC5) TXLIB(OBJECT) .
//SYSIN   DD  *
 RECEIVE S(VS00024) .
 APPLY   S(VS00023,VS00024) .
 LIST  CDS SYSMOD(VS00023,VS00024).
//OBJECT  DD DISP=SHR,DSN=SYS0.LINKLIB2.OBJ
./ ADD NAME=VS00025  0101-80102-80102-1134-00355-00359-00000-$SYS03  00
//VS00025  JOB (2000,S010),S.CAIRES,CLASS=Z,MSGCLASS=A
/*JOBPARM Q=F,I
//*
//* RECEIVE JTIP001 AS VS00025, WHICH REASSEMBLES NEARLY ALL JES2
//* WHEN APPLIED OR ACCEPTED.
//*
//VS00025  EXEC IPOSMP4      DLIB=PAG002,RES=SYS101,PTS=PAG002
//SYSIN    DD  *    ( //SMPCNTL DD DDNAME=SYSIN IN IPOSMP4 PROC )
 LIST PTS SYSMOD(VS00025) .
 REJECT S (VS00025) .
 RECEIVE  /* VS00025 (OR JTIP001) CONTAINS JES2 SOURCE CHANGES THAT
             FORCE RE-ASSEMBLY OF NEARLY ALL OF JES2 */ .
 LIST PTS SYSMOD(VS00025) .
 APPLY  S (VS00025)         BYPASS(ID) DIS(READ) CHECK .
 ACCEPT S (VS00025) NOAPPLY BYPASS(ID) DIS(READ) CHECK .
/*
//*SMPPTFIN DD DSN=SYS3.JTIP.V12.SMP4(VS00025),DISP=SHR,VOL=SER=ITEL02,
//*            UNIT=3350
//SMPPTFIN DD *    FROM SYS3.JTIP.V12.SMP4(VS00025), COPIED 4/11/80.
++PTF(VS00025) /* NAME CHANGED TO VS00025 FROM JTIP001 <---PDC */
               /* VS00025 COPIED FROM SYS3.JTIP.V12.SMP4. */ .
++VER(Z038) FMID(EJE1102)
  PRE(#Z90235,
  UZ24612,UZ24614,UZ24616,UZ24619,UZ24620,UZ24622,UZ24623,
  UZ24625,UZ24627,UZ24947,
  AZ27300,AZ37386,AZ38575,AZ40644) .
++MACUPD($CMB) DISTLIB(HASPSRC)
   ASSEM(HASPCOMM,HASPCON,HASPINIT,HASPMISC,HASPPRPU,HASPRDR,
         HASPSSM,HASPXEQ,HASPNUC,HASPACCT,HASPRTAM,HASPDOC)
   ASMLIB(HASPSRC) .
>< CHANGE NAME=$CMB,SEQFLD=756                                77/08/15  BV000000
CMB#MAPS EQU   CMBDOMID,4          X-MEM MSG PARMLIST POINTER   UIC 002 BV140010
*                                  WHEN CMBFLAGC SET.           UIC 002 BV140020
++MACUPD($COMWORK) DISTLIB(HASPSRC) .
>< CHANGE NAME=$COMWORK,SEQFLD=747                            77/08/15  B0000000
COMPNTER DS    24F                 AREA FOR OPERAND POINTERS    UIC 002 B1154000
         COPY  #VERQEL             GET QEL OWNERSHIP VERIFY AREAUIC 002 B1160650
++MACUPD($DCT) DISTLIB(HASPSRC) .
>< CHANGE NAME=$DCT,SEQFLD=756                                77/08/15  CD000000
         COPY  #INTRDCT            GET X-MEM MSG AREA DEFS      UIC 002 CD269610
RIDBUFSZ EQU   4096-256            LENGTH OF INTERNAL READER BF UIC 002 CD271000
++MACUPD($HASPGEN) DISTLIB(HASPSRC) .
>< CHANGE NAME=$HASPGEN,SEQFLD=756                            77/08/15  DR000000
         COPY  UICC                UICC DEPENDENCIES            UIC 002 DR028610
$TUBE    EQU   64*&UICC  ($SPARE1 - RTE 13) CARD READER DISPLAY UIC 002 DR272610
$INT     EQU   $SPARE2             TS->JES CONSOLE ID (RTE 14)  UIC 002 DR274610
++MACUPD($HCT) DISTLIB(HASPSRC) .
>< CHANGE NAME=$HCT,SEQFLD=756                                77/08/15  DT000000
$JCMDQUE DC    A(*-*)              ADDR OF CMBS RSVD FOR TS/JES UIC 002 DT271610
$JCMDPCE DC    V(HASPCOMM)         TS->JES CMD PROCESSOR        UIC 002 DT446610
$JFETPCE DC    V(HASPJFET)         SYSOUT FETCH PROCESSOR       UIC 002 DT447610
++MACUPD($JCT) DISTLIB(HASPSRC) .
>< CHANGE NAME=$JCT,SEQFLD=756                                77/08/15  EB000000
         GBLB  &UICC                                            UIC 002 EB007000
         DS    0D                  ENSURE START ON DBLWD        UIC 002 EB296610
         COPY  #JCTUWK1            GET UICC JCT DEFINITIONS     UIC 002 EB296620
++MACUPD($JQE) DISTLIB(HASPSRC) .
>< CHANGE NAME=$JQE,SEQFLD=756                                77/08/15  EM000000
         GBLB  &UICC                                            UIC 002 EM007000
         COPY  #JQEDEFS            GET UICC JQE DEFINITIONS     UIC 002 EM062610
$FETCH   EQU   $DUMMY              SYSOUT FETCH QUEUE           UIC 002 EM124610
++MACUPD($MODMAP) DISTLIB(HASPSRC) .
>< CHANGE NAME=$MODMAP,SEQFLD=756                             77/08/15  EW000000
MAPJFET  DC    CL8'HASPJFET'       FETCH PROCESSOR              UIC 002 EW130610
MAPJFETA DC    V(HASPJFET),A(0)                                 UIC 002 EW130620
++MACUPD($OCR) DISTLIB(HASPSRC) .
>< CHANGE NAME=$OCR,SEQFLD=756                                77/08/15  FF000000
OCRLINCT DS    X                   LINECT VALUE FOR DS          UIC 002 FF057610
OCRUFLG  DS    X                   FLAGS TO BE MERGED W/PDDB    UIC 002 FF057620
OCRUJ    EQU   X'40'               OPTCD=J REQUEST W/SPIN       UIC 002 FF057630
OCRUHO   EQU   X'10'               HOLD=YES @ DEST REQUEST      UIC 002 FF057640
         DS    H                   SPARE                        UIC 002 FF057650
OCRUNAME DS    CL8                 DATASET SEP. PAGE 'JOBNAME'  UIC 002 FF057660
++MACUPD($PCE) DISTLIB(HASPSRC) .
>< CHANGE NAME=$PCE,SEQFLD=756                                77/08/15  FP000000
PCECMMSG DS    0D                  CROSS MEMORY MSG CNTL        UIC 002 FP082610
PCECMMFL DS    X                   CONTROL FLAGS                UIC 002 FP082620
PCECMMAD DS    AL3                 MESSAGE BUFFER POINTER       UIC 002 FP082630
PCECMMSV DS    F                   SAVE AREA                    UIC 002 FP082640
PCEJCMID EQU   32                  TS->JES CMD PCE ID           UIC 002 FP181610
PCEFETID EQU   64                  FETCH JOB SYSOUT PCE ID      UIC 002 FP181620
         SPACE 2                                                UIC 002 FP181630
*    PCECMMFL BIT DEFINTIONS                                    UIC 002 FP181640
*                                                               UIC 002 FP181650
*              X'0F'               USED FOR X-MEM MSG CNTL      UIC 002 FP181660
PCE#CMBQ EQU   X'04'               CMB CONTAINED MULT CMDS      UIC 002 FP181760
PCE#BEND EQU   X'02'               BUFF FULL, MSG SENT          UIC 002 FP181770
PCE#$WTO EQU   X'01'               SPECIAL $WTO PROCESSING      UIC 002 FP181780
         SPACE 2                                                UIC 002 FP206610
*                                                               UIC 002 FP206620
         COPY   #CMDSECT             GET PARM LIST DSECT        UIC 002 FP206630
++MACUPD($PDDB) DISTLIB(HASPSRC) .
>< CHANGE NAME=$PDDB,SEQFLD=756                               77/08/15  FR000000
PDB#LNCT DS    X                   DATASET LINECT VALUE         UIC 002 FR080610
         DS    X                   SPARE                        UIC 002 FR080620
PDB#NAME DS    CL8                 DATASET SEP. PAGE 'JOBNAME'  UIC 002 FR080630
PDB#PROC DS    CL8                 PROC-STEP NAME               UIC 002 FR080640
PDB#STEP DS    CL8                 STEP NAME                    UIC 002 FR080650
PDB#DDN  DS    CL8                 DD NAME                      UIC 002 FR080660
++MACUPD($RDRWORK) DISTLIB(HASPSRC) .
>< CHANGE NAME=$RDRWORK,SEQFLD=756                            77/08/15  GT000000
RUFLAG   DS    X                   JCT1FLG2/JQEUFLAG FIELD SAVE UIC 002 GT093610
         DS    3X                  RESERVED                     UIC 002 GT093620
++MACUPD($SDB) DISTLIB(HASPSRC) .
>< CHANGE NAME=$SDB,SEQFLD=747                                77/08/15  G0000000
SDBFLG3  DS    X                   FLAG BYTE - RESERVED         UIC 002 G5104000
SDB#FI   EQU   X'10'               SDB FOR FETCH INPUT DS       UIC 002 G5104610
SDB#ASA  EQU   X'40'               TO MATCH LRC1TASA, LRC1TMCH  UIC 002 G5104620
SDB#MCH  EQU   X'20'                 SET FROM PDBRECFM...       UIC 002 G5104630
++MACUPD($SJB) DISTLIB(HASPSRC) .
>< CHANGE NAME=$SJB,SEQFLD=747                                77/08/15  G0000000
         COPY  #SJBWORK            UICC WORKSPACE               UIC 002 G9238610
++MACUPD($SSOB) DISTLIB(HASPSRC) .
>< CHANGE NAME=$SSOB,SEQFLD=756                               77/08/15  HJ000000
         COPY  #SSOB               GET ADDITIONAL SSOB DEFS     UIC 002 HJ009610
++MACUPD($SVT) DISTLIB(HASPSRC) .
>< CHANGE NAME=$SVT,SEQFLD=756                                77/08/15  HN000000
         GBLB  &UICC               UICC CONTROL BIT             UIC 002 HN004210
         DC    Y(($SVUNFUN-$SVNULL)/4)  NUMBER OF FUNCTIONS     UIC 002 HN032000
$SVUJCMD DC    A(*-*)              TS -> JES COMMANDS           UIC 002 HN086620
$SVUFOUT DC    A(*-*)              FETCH JOB SYSOUT             UIC 002 HN086630
         DC    A(*-*)              NOT DEFINED                  UIC 002 HN086640
         DC    A(*-*)              NOT DEFINED                  UIC 002 HN086650
$SVUNFUN EQU   *-4                 FOR MAX FUNCTION CALC        UIC 002 HN086990
         COPY  #SSVTVTC            SERVICE ROUTINE VECTOR TABLE UIC 002 HN114610
$SVUCMDQ DC    A(*-*)              TS -> JES CMD-PCE CMB QUEUE  UIC 002 HN212610
         DC    A(*-*)              RESERVED                     UIC 002 HN212620
$SVUCMDP DC    A(*-*)              $$POST ELEMENT FOR TS CMD PCEUIC 002 HN222610
$SVUFOUP DC    A(*-*)              $$POST ELEMENT FOR FETCH PCE UIC 002 HN224610
$SVUFOQ  DC    D'0'                SJBS FOR FETCH SYSOUT        UIC 002 HN338610
++MACUPD($SVTC) DISTLIB(HASPSRC) .
>< CHANGE NAME=$SVTC,SEQFLD=756                               77/08/15  HP000000
         DC    38AL1(0)                  22 - 59 RSVD FOR JES   UIC 002 HP047600
         DC    AL1(($SVUJCMD-$SVNULL)/4) 60 TS -> JES CMD       UIC 002 HP047610
         DC    AL1(($SVUFOUT-$SVNULL)/4) 61 FETCH JOB SYSOUT    UIC 002 HP047620
         DC    AL1(0)                    62 NOT DEFINED         UIC 002 HP047630
         DC    AL1(0)                    63 NOT DEFINED         UIC 002 HP047640
++SRCUPD(HASPCOMM) DISTLIB(HASPSRC) .
>< CHANGE NAME=HASPCOMM,SEQFLD=747                            77/08/15  K0000000
         $ASCB  DOC=&DOC           ASCB DEFINITIONS             UIC 002 K0073620
         $ASVT  DOC=&DOC           ASVT DEFINITIONS             UIC 002 K0073630
         #OUCB LIST=&LIST          OS OUCB BLOCK                UIC 002 K0073640
         $LRC  DOC=&DOC            LOGICAL RECORD DSECT         UIC 002 K0074110
         GBLB  &UICC               GLOBAL UICC BIT              UIC 002 K0730100
COFTR    EQU   COFFLAGS+5,15         LINE COUNTS                UIC 002 K0776110
         COPY  #COMFET             GET FETCH QUEUE CODE         UIC 002 K0787310
         COPY  #COFJMXQ            GET ACTIVE XEQ INFO          UIC 002 K0807610
         COPY  #COFQDPX            AWAIT XEQ Q DEPTH            UIC 002 K0827310
         COPY  #COMJMDV            GET ACTIVE ON DEVICE DISPLAY UIC 002 K0878610
         COPY  #COMCNTO            GET CLASS DEPTH DISPLAY      UIC 002 K0919310
COFJMFFX DS    0H                  FETCH Q MSG EXIT..           UIC 002 K0924110
         LCLC  &R                                               UIC 002 K1101110
&R       SETC  '&SYSNDX'                                        UIC 002 K1101120
         COPY  #CO#CVQE            GET TS -> JES VERIFY CODE    UIC 002 K1119610
         CLI   PCEID+1,PCEJCMID    TS->JES CMD PCE?             UIC 002 K1161610
         BE    CO#JCMDA            YES, ENTER QUEUE SCANNER     UIC 002 K1161620
         COPY  #CO#JCMD            GET TS->JES CMD CODE         UIC 002 K1187310
         COPY  #CO#JCSS            MULTI/CMD PER CMB CODE       UIC 002 K1501510
         NI    PCECMMFL,255-PCE#CMBQ  CLEAR REQUEUED FLAG       UIC 002 K1511210
         COPY  #CO#PCHK            CMD PERMISSION CHECKER       UIC 002 K1625610
COMTBLJ  DS   0F                  INDEX FOR J                   UIC 002 K1701110
COMTBLK  DS   0F                  INDEX FOR K                   UIC 002 K1701310
         $COMTAB LA,#HASPLA        SHOW ALL COMMAND             UIC 002 K1701610
COMTBLM  DS   0F                  INDEX FOR M                   UIC 002 K1703110
COMTBLQ  DS   0F                  INDEX FOR Q                   UIC 002 K1710110
         $COMTAB Q7D,#HASPQJ1  REQUEUE A JOB BY NAME            UIC 002 K1710150
         $COMTAB QA,#HASP$QA  REQUEUE ALL JOBS                  UIC 002 K1710160
         $COMTAB QJ,#HASPQJ1  REQUEUE A JOB BY NUMBER           UIC 002 K1710170
COMTBLU  DS   0F                  INDEX FOR U                   UIC 002 K1720610
COMTBLW  DS   0F                  INDEX FOR W                   UIC 002 K1721110
COMTBLX  DS   0F                  INDEX FOR X                   UIC 002 K1721210
COMTBLY  DS   0F                  INDEX FOR Y                   UIC 002 K1721310
         $COMTAB Y7D,#HASPYJ1      JOBNAME SYSOUT INFO LISTER   UIC 002 K1721350
         $COMTAB YJ,#HASPYJ1       JOB SYSOUT INFO LISTER       UIC 002 K1721360
         $COMTAB Y,#HASPYJ1        1ST JOB IN FETCH Q           UIC 002 K1721370
         DC   C'J',AL3(COMTBLJ)    ENTRY FOR 'J' VERBS          UIC 002 K1729610
         DC   C'K',AL3(COMTBLK)    ENTRY FOR 'K' VERBS          UIC 002 K1729620
         DC   C'M',AL3(COMTBLM)    ENTRY FOR 'M' VERBS          UIC 002 K1730110
         DC   C'Q',AL3(COMTBLQ)    ENTRY FOR 'Q' VERBS          UIC 002 K1731610
         DC   C'U',AL3(COMTBLU)    ENTRY FOR 'U' VERBS          UIC 002 K1733110
         DC   C'W',AL3(COMTBLW)    ENTRY FOR 'W' VERBS          UIC 002 K1733610
         DC   C'X',AL3(COMTBLX)    ENTRY FOR 'X' VERBS          UIC 002 K1733620
         DC   C'Y',AL3(COMTBLY)    ENTRY FOR 'Y' VERBS          UIC 002 K1733630
         BNE   CDQUICOP            TEST UIC ADDED QUEUES        UIC 002 K1967000
         COPY  #COMOPS             GET UIC QUEUE CODE           UIC 002 K1980610
         CH    WF,CDQFETD          IS IT FETCH REQ              UIC 002 K1996810
         BE    SKIP110             YES, GO SET ROUTE INFO       UIC 002 K1996820
CDQFETEX DS    0H                  FETCH QUEUE EXIT..           UIC 002 K2114110
CDQFETD  DC    AL2(CDQFET-CDQB),AL3(CDQTYPEF,CDQTYPEF)          UIC 002 K2190610
CDQTYPEF DC    AL1($FETCH)                                      UIC 002 K2194210
CDQXEQAD EQU   CDQXEQD+6-CDQS+CDQSEE LOC OF ELEMENT AFTER XEQ   UIC 002 K2200500
CDQFETDD EQU   CDQFETD-CDQS+CDQSEE LOC OF FETCH ELM.            UIC 002 K2200510
* ADD OTHER Q ITEMS HERE                                        UIC 002 K2200520
         COPY  #HASP$YJ            COPY $YJ COMMAND CODE        UIC 002 K2880110
         COPY  #HASP$LA            GET SHOW ALL CODE            UIC 002 K2880120
         COPY  #HASP$QJ    GET QUEUE JOB COMMAND                UIC 002 K2880150
         COPY  #HASP$QA    GET QUEUE ALL COMMAND                UIC 002 K2880160
++SRCUPD(HASPCON) DISTLIB(HASPSRC) .
>< CHANGE NAME=HASPCON,SEQFLD=747                             77/08/15  L0000000
         B     WQUERET             EXIT OF NO CONSOLES   +0     UIC 002 L0456610
         LA    R15,WSCREEN         ADDR OF ROUTE SCREEN ROUTINE UIC 002 L0956000
         BALR  R14,R15             IND CMB TYPE CALL            UIC 002 L0956310
         B     WQUERET             EXIT IF NO CONSOLES          UIC 002 L0956610
         BNZ   4(,LINK)            RETURN IF COMPLETE           UIC 002 L1084000
         BNZ   4(,LINK)            RETURN                       UIC 002 L1116000
         BL    4(,LINK)            LEAVE AS OS 'INFO' WTO       UIC 002 L1122400
         B     4(,LINK)            RETURN                       UIC 002 L1124000
         COPY  #CN#$WTO            GET TS->JES CONSOLE CODE     UIC 002 L1138000
W$INTC   DS    0H                  MCS ROUTE FOR $INT CNSLE     UIC 002 L2199700
++SRCUPD(HASPINIT) DISTLIB(HASPSRC) .
>< CHANGE NAME=HASPINIT,SEQFLD=747                            77/08/15  M0000000
         DC    AL2($JCMDPCE-HCTDSECT,PCEJCMID)                  UIC 002 M2635610
         DC    AL2((PCEWORK-PCEDSECT+COMPCEWS+7)/8*8)           UIC 002 M2635620
         DC    AL2($JFETPCE-HCTDSECT,PCEFETID)                  UIC 002 M2635630
         DC    AL2(PCEWORK+160-PCEDSECT)                        UIC 002 M2635635
ISVTFNUM DC    Y(($SVUNFUN-$SVNULL)/4)  NUMBER OF FUNCTIONS     UIC 002 M3881000
         MVC   0(#DCTEND-DCTDSECT,R2),NINRDCT   BUILD BASIC DCT UIC 002 M4622500
#DCBL    EQU   #DC#MBUF-DCTDSECT,L'#DC#MBUF     SETUP FOR MOVE  UIC 002 M4622610
         MVC   #DCBL(256,R2),NINRDCT+#DCBL      MOVE MIDDLE     UIC 002 M4622620
         MVC   #DCBL+256(L'#DCBL-256,R2),NINRDCT+#DCBL+256 DUL  UIC 002 M4622630
         LA    R5,#DC#MBUF         GET X-MEM MSG BUFF ADDR      UIC 002 M4657110
         ST    R5,#DC#PARM         INIT PARM LIST               UIC 002 M4657130
         MVI   0(R5),X'FF'         SET BUFFER EMPTY             UIC 002 M4657140
         LA    R5,L'#DC#MBUF-1     GET BUFFER LENGTH            UIC 002 M4657150
         STH   R5,#DC#BEND         PLANT BUFF END DISPL         UIC 002 M4657170
++SRCUPD(HASPMISC) DISTLIB(HASPSRC) .
>< CHANGE NAME=HASPMISC,SEQFLD=747                            77/08/15  N0000000
GPRNOFET DS    0H                  SKIP FETCH QUEUE CKS         UIC 002 N3208610
         L     WD,=V($QINDEX)      ADDR OF Q INDEX TABLE        UIC 002 N3222610
         CLM   WB,1,$FETCH(WD)     IGNORE FETCH QUEUE           UIC 002 N3222620
         BE    GPRNOFET            SINCE ITS STATIC.            UIC 002 N3222630
         L     R15,=V($QINDEX)     ADDR OF Q INDEX TABLE        UIC 002 N3272610
         SR    WD,WD               ZIP FOR QUETYPES INSERT      UIC 002 N3272620
         IC    WD,$FETCH(R15)      GET QUETYPE VALUE            UIC 002 N3272630
         CR    WD,WB               DO NOT AGE STATIC            UIC 002 N3276010
         BE    GPREND1             $FETCH QUEUE...              UIC 002 N3276020
         COPY  #FETWARM            GET FETCH Q WARM START       UIC 002 N4368000
         LA    WA,HQTHQR           PREPARE TO SCAN HQT          UIC 002 N4826000
         B     *+8                  SKIP                        UIC 002 N4830010
NQ420    LA    WA,HQTHQR           PREPARE                      UIC 002 N5200000
         B     *+8                 SKIP                         UIC 002 N5216010
         COPY  #WARMGS             FETCH WARM START MSGS        UIC 002 N6438810
++SRCUPD(HASPPRPU) DISTLIB(HASPSRC) .
>< CHANGE NAME=HASPPRPU,SEQFLD=747                            77/08/15  Q0000000
         TM    JCT1FLG4,JCT14NOT   WAS HE ALREADY NOTED         UIC 002 Q0453610
         BO    OPNOTX              YES, SKIP NOTIFY             UIC 002 Q0453620
         OI    JCT1FLG4,JCT14NOT   SET NOTIFIED FLAG            UIC 002 Q0584610
         ST    R0,PCECMMSV         SAVE TTR OF REG IOT          UIC 002 Q0685610
         L     R2,PCEJQE           GET JQE ADDRESS              UIC 002 Q0727110
         TM    QUEUFLAG(R2),QUERTE$F  ROUTED TO FETCH Q         UIC 002 Q0727120
         BO    OPQPUT              YES, GO DO SO NOW            UIC 002 Q0727130
         COPY  #HOPFETC            GET FETCH Q CODE             UIC 002 Q0902610
         MVC   PCCWORK,JCTOUTNM    MOVE OUTNAME TEXT            UIC 002 Q4841610
++SRCUPD(HASPRDR) DISTLIB(HASPSRC) .
>< CHANGE NAME=HASPRDR,SEQFLD=747                             77/08/15  R0000000
         $SJB  DOC=&DOC            GEN SJB DSECT                UIC 002 R0296610
         COPY  #DCRINIT            GET X-MEM MSG AREA INIT      UIC 002 R0606610
               ROUTE=$INT+$LOG+$UR+$TUBE,CLASS=$NORMAL,PRI=$ST  UIC 002 R1202000
         ST    JCT,PCECMMFL        ZERO FLAG AND PARM ADDR      UIC 002 R1234610
         DC    AL1(5),AL3(RREPCARD),CL8'REPRO'  UICC /*REPRO    UIC 002 R1336720
         DC    AL1(3),AL3(RREPCARD),CL8'DUP'    UICC /*DUP      UIC 002 R1336730
         DC    AL1(4),AL3(RSCNCARD),CL8'SCAN'  UICC /*SCAN      UIC 002 R1336740
         COPY  #RDRREPC            GET UICC REPRO CARD          UIC 002 R1338720
               ROUTE=$INT+$LOG+$UR,CLASS=$TRIVIA,PRI=$ST MSG    UIC 002 R1550000
         XC    JCTWORK+40(10),JCTWORK+40  Q SAVE AREA           UIC 002 R1717610
         COPY  #JBPARM             GET JOB PARM ADJUSTER        UIC 002 R1726140
               ROUTE=$INT+$LOG+$UR+$TUBE,CLASS=$TRIVIA,PRI=$ST  UIC 002 R1748000
         COPY  #JBTABL             GET ADDED JOBPARM ENTRIES    UIC 002 R1821610
               ROUTE=$INT+$LOG+$UR,CLASS=$TRIVIA,PRI=$ST        UIC 002 R2066000
*  ALSO USED FOR TIMED DELETES FROM FETCH QUEUE                 UIC 002 R2364610
         STM   R0,R1,JCTXEQOF      SET IN CASE NEVER XEQ        UIC 002 R2364620
         STM   R0,R1,JCTXEQON      SET SO XEQ TIME=0            UIC 002 R2364630
         MVC   JCTOUTNM,JCTJNAME   DEFAULT OUTNAME TO JNAME     UIC 002 R2382610
         MVC   1*PDBLENG(1*PDBLENG,R1),0(R1)                    UIC 002 R2658100
         MVC   2*PDBLENG(1*PDBLENG,R1),0(R1)                    UIC 002 R2658110
         MVC   3*PDBLENG(1*PDBLENG,R1),0(R1)                    UIC 002 R2658200
         MVC   4*PDBLENG(1*PDBLENG,R1),0(R1)                    UIC 002 R2658210
         MVC   PDB#DDN-PDBDSECT+IOTPDBOJ(8,R1),=CL8'JCL '       UIC 002 R2670610
         MVC   PDB#DDN-PDBDSECT+IOTPDBOL(8,R1),=C'JOBLOG  '     UIC 002 R2678610
         MVC   PDB#DDN-PDBDSECT+IOTPDBOI(8,R1),=CL8'JCL '       UIC 002 R2684610
         MVC   PDB#DDN-PDBDSECT+IOTPDBOM(8,R1),=C'SYSMSGS '     UIC 002 R2690610
               ROUTE=$INT+$LOG+$UR+$TUBE,CLASS=$ACTION,PRI=$ST  UIC 002 R2894000
               ROUTE=$INT+$LOG+$UR+$TUBE,CLASS=$TRIVIA,PRI=$ST  UIC 002 R3044000
               ROUTE=$INT+$LOG+$UR,CLASS=$TRIVIA,PRI=$ST        UIC 002 R3582000
         MVC   JQEUFLAG,RUFLAG     SET Q-DIRECTOR INFO          UIC 002 R3869010
*        CLC   0(7,RPI),=CL7'/*SCAN'  TEST FOR INTERNAL READER SUIC 002 R4012000
*        BE    RINRSCAN            BRANCH IF NOT                UIC 002 R4014000
               ROUTE=$INT+$LOG+$UR+$TUBE,CLASS=$ALWAYS,PRI=$ST  UIC 002 R4828000
         TM    JCT1FLG3,JCT13FRP   REPRO REQUEST ?              UIC 002 R4831610
         BZ    *+8                 NO, SKIP KILL LOGIC          UIC 002 R4831620
         MVI   JCT1FLG3,JCT13FFL   ELSE, CLEAR REP, NOTE KILL   UIC 002 R4831630
         MVC   JQEUFLAG,RUFLAG     SET Q-DIRECTOR INFO          UIC 002 R4842010
         COPY  #JCTTERM            GET JCT/JQE ADJUSTER         UIC 002 R4894610
         TM    JCT1FLG3,JCT13FRP   WAS REPRO REQUESTED?         UIC 002 R4965610
         BZ    *+8                 NO, SKIP MSG SET             UIC 002 R4965620
         LA    RPI,RREPDOC         ELSE, NOTE REP REQ.          UIC 002 R4965630
         COPY  #REPTERM            GET /*DUP CODE               UIC 002 R4990000
               ROUTE=$INT+$LOG+$UR+$MAIN,CLASS=$NORMAL,PRI=$ST  UIC 002 R5074900
         MVC   RUFLAG,JCT1FLG2     SAVE Q-DIRECTOR INFO         UIC 002 R5091110
         COPY  #PDBCNST       GET J/TIP PDDB CONSTANT ADDITIONS UIC 002 R5336610
++SRCUPD(HASPSSSM) DISTLIB(HASPSRC) .
>< CHANGE NAME=HASPSSSM,SEQFLD=747                            77/08/15  T0000000
         DC    A(HOSJCMD)          TS TO JES COMMAND            UIC 002 T0329210
         DC    A(HOSFETCH)         FETCH JOB SYSOUT FUNCTION    UIC 002 T0329220
         DC    A(0)                SPARE                        UIC 002 T0329230
         DC    A(0)                SPARE                        UIC 002 T0329240
         COPY  #SSSMVTC            SERVICE ROUTINE VECTOR TABLE UIC 002 T0337210
         LTORG ,                   FIX UP JES LITERALS          UIC 002 T0767610
         COPY  #JESCMD             GET SSSM MODULE FOR TS/JES CMUIC 002 T1091310
         COPY  #HASPFJB            COPY SSSM FETCH SUPPORT      UIC 002 T1091320
         CLC   0(8,R1),=CL8'JOB'   REQUEST FOR INDIRECT         UIC 002 T1131910
         BE    4(0,R14)            RETURN WITH INDIRECT         UIC 002 T1131920
         COPY  #HASPFET            COPY END OF TASK SUPPORT     UIC 002 T2648660
         CH    R0,=C'FI'           IS IT FETCH?                 UIC 002 T2878610
         BE    #HALF               YES, WE HAVE A FETCH REQUEST.UIC 002 T2878620
         ST    R13,#DCT#SJB        PLANT INTRDR USER SJB ADDR   UIC 002 T3114620
         COPY  #HASP#FA            COPY FETCH ALLOC CHANGES     UIC 002 T3129610
         LH    R1,OCRDEST2         GET SECOND DEST FOR TEST     UIC 002 T3355110
         LTR   R1,R1               IS SECOND PRESENT??          UIC 002 T3355120
         BZ    HCP477              NO, TRY FOR THE FIRST        UIC 002 T3355130
         LH    R1,OCRDEST1         ELSE, GET FIRST --           UIC 002 T3355140
         B     HCP479              USE POSSIBLE 'JOB' RTE       UIC 002 T3355150
HCP477   DS    0H                  ..                           UIC 002 T3355160
HCP479   DS    0H                  ..                           UIC 002 T3356610
         COPY  #PDBCNST            GET JTIP CONSTANT ADDITIONS  UIC 002 T3411550
         CH    R0,=C'FI'           IF FETCH                     UIC 002 T3441610
         BE    #HUAF               THEN GO UNALLOCATE           UIC 002 T3441615
         COPY  #HASP#FD            FETCH UNALLOCATION           UIC 002 T3442610
         COPY  #DUPNAME            GET OUTPUT IDENTIFIER CODE   UIC 002 T3750010
         B     #HO500              SUBSYSTEM DATASET FETCH      UIC 002 T3752860
         COPY  #HASP#FO            COPY FETCH OPEN CHANGES      UIC 002 T3784560
         COPY  #PDBFILL            GET CODE TO FILL PDDB        UIC 002 T3826110
         DC    X'11'               PRINT AND SPACE 2            UIC 002 T4115000
         DC    C' '                1 BLANK FOR TERMINAL PRT     UIC 002 T4115500
         CLC   DSNDSTYP,=C'FI'     IS IT FETCH?                 UIC 002 T4190500
         BE    16(,R14)            RETURN TO +16 IF SO          UIC 002 T4190505
         B     20(,R14)            ELSE RETURN TO +20 (UNKNOWN) UIC 002 T4190510
         B     #HC500              SUBSYSTEM DATASET FETCH CLOSEUIC 002 T4213250
#HC500   DS    0H                  CLOSE FETCH DATASET          UIC 002 T4233250
         COPY  #HASPFGT                                         UIC 002 T4658610
         COPY  #DCBFMOV            GET X-MEM RDR MSG MOVE CODE  UIC 002 T4795060
         TM    BFFL1,RIDEOF+RIDDEL+RIDERQ+RIDCLS FUNNY?         UIC 002 T4815297
         BNZ   HIR015                                           UIC 002 T4815298
         ICM   R1,15,RPLCCHAR      POINT TO CONTROL CHAR        UIC 002 T4815301
         BZ    HIR015               SKIP IF NONE                UIC 002 T4815303
         LA    R5,LRCSOUT-LRCDSECT(,R3) ADJ LEN FOR CONTROL CHR UIC 002 T4815305
HIR015   DS    0H                                               UIC 002 T4815307
         COPY  #SSMIRDR                                         UIC 002 T4821601
         COPY  #DCBFNIT            GET X-MEM RDR MSG INIT CODE  UIC 002 T5430310
++SRCUPD(HASPXEQ) DISTLIB(HASPSRC) .
>< CHANGE NAME=HASPXEQ,SEQFLD=747                             77/08/15  U0000000
         LA    WA,HQTHQR            INSERT HQR                  UIC 002 U6206000
         LA    WA,HQTHQR             ELSE PREPARE TO            UIC 002 U9368000
><     ENDUP
/*
./ ADD NAME=VS00025A 0101-80102-80102-1133-00068-00012-00000-$SYS03  00
//VS00025A JOB (2000,S010),S.CAIRES,CLASS=Z,MSGCLASS=A,TYPRUN=HOLD
/*JOBPARM Q=F,I
//*
//* APPLY OR ACCEPT JTIP001 AS VS00025, WHICH REASSEMBLES NEARLY ALL
//* JES2 WHEN APPLIED OR ACCEPTED.
//*
//* NOTE - THE JTIP DOCUMENTATION FROM UNIV OF ILL SUGGESTS INSTALLING
//* JTIP001 INTO JES2 WITH
//*    "ACCEPT S(VS00025) NOAPPLY BYPASS(ID)"
//* BUT IT IS PROBABLY BETTER TO APPLY AND THEN ACCEPT JTIP001, PUTTING
//* THE APPLY AND THE ACCEPT JES2 ASSEMBLY LISTINGS ON TAPE FOR LATER
//* MICRO-FICHING AT THE PDC OR PRINTING ONE OF THEM.  REASON - IF
//* VS00025 IS ACCEPTED WITH NOAPPLY, THE SYSTEM ENTRY FOR SYSMOD
//* (VS00025) WILL NOT BE ON THE CDS, AND YOU WILL NOT BE ABLE TO APPLY
//* ANY LOCAL MODS TO JES2 WITH PRE(VS00025).
//*      IF YOU DO INSTALL JTIP001/VS00025 WITH "ACCEPT NOAPPLY", MAKE
//* SURE YOU LINK THE JTIP001 JES2 MODULES INTO JES2 WHEN YOU LINK
//* HASPJFET AND VERFYQEL FROM JTIP002/VS00026 INTO JES2.
//*
//* THIS JOB IS SET UP TO PUT THE JES2 ASSEMBLY LISTINGS TO DISK IN
//* $SYSUT.VS00025.ASMOUT  (ABOUT 200K LINES).
//*
//* USE APPLY CHECK BEFORE APPLY.  SAME FOR ACCEPT.
//* BACKUP SYS1.CDS AND SYS1.ACDS USING JOB FDRDSFD BEFORE APPLY OR
//* ACCEPT, AND THEN USE  DIS(WRITE) INSTEAD OF  DIS(READ), WHICH IS 20
//* TIMES FASTER.
//*
//* //ASMOUT DD  IS PUT TO DISK, THEN EITHER TO MICROFICHE OR PRINTER.
//*
//*
//DELETE   EXEC PGM=IEFBR14
//ASMOUT   DD  DSN=$SYSUT.VS00025.ASMOUT,
//             UNIT=DISK,VOL=SER=USER02,
//             DISP=(MOD,DELETE)
//ASMOUT2  DD  DSN=$SYSUT.VS00025.ASMOUT,
//             UNIT=DISK,VOL=SER=USER02,
//             DISP=(MOD,UNCATLG)
//*
//ALLOC    EXEC PGM=IEFBR14
//ASMOUT   DD  DSN=$SYSUT.VS00025.ASMOUT,
//             DCB=(LRECL=121,RECFM=FBA,BLKSIZE=6050),  121 X 50
//*        150 LL/TRK * 1333 TRKS = 200,000 LL; 1333 TRKS = 45 CYLS
//             SPACE=(CYL,(45,15),RLSE),  150LL/TRK*1333 TRKS = 45 CYLS
//             UNIT=DISK,VOL=SER=USER02,
//             DISP=(,CATLG,DELETE)
//*
//VS00025  EXEC IPOSMP4      DLIB=PAG002,RES=SYS101,PTS=PAG002
//ASMOUT   DD  DSN=$SYSUT.VS00025.ASMOUT,DISP=MOD
//SYSIN    DD  *     (//SMPCNTL DD DDNAME=SYSIN IN IPOSMP4)
 LIST PTS  SYSMOD(VS00025) .
          /* VS00025 (OR JTIP001) CONTAINS JES2 SOURCE CHANGES THAT
             FORCE RE-ASSEMBLY OF NEARLY ALL OF JES2 */ .
 LIST CDS SYSMOD(VS00025) .
 APPLY   S(VS00025) DIS(WRITE) /* BACKUP CDS AND ACDS FIRST */ .
 LIST CDS SYSMOD(VS00025) .
/*
//*
//*
//*
//DUMMYJCL DD  *     (UNUSED CARDS)
 APPLY   S(VS00025) DIS(READ ) CHECK .
 ACCEPT  S(VS00025) DIS(READ ) CHECK .
 LIST ACDS SYSMOD(VS00025) .
 ACCEPT  S(VS00025) DIS(WRITE) /* BACKUP CDS AND ACDS FIRST */ .
 LIST ACDS SYSMOD(VS00025) .

 ACCEPT S(VS00025) NOAPPLY BYPASS(ID) DIS(WRITE) /* BACKUP ACDS IST */ .
/*
./ ADD NAME=VS00026A 0125-79358-80108-1114-00062-00013-00059-$SYS03  00
//VS00026A JOB (2000,S010),S.CAIRES,CLASS=Z,MSGCLASS=A
/*JOBPARM Q=F,I
//*JOBCAT   DD  DSN=CATALOG.VSYS101,DISP=SHR
//*
//* JTIP002 WAS RENAMED TO VS00026 PER ITEL/PDC CONVENTION.
//* SEE JOB VS00026C.
//*
//* RE-APPLY VS00026 (JTIP SVC, MACROS AND HASPJFET AND VERFYQEL) AFTER
//* PUT TAPES 7909, 7910 AND 7911 WERE APPLIED ON 7 MAR 80.  MUST
//* RE-ASSEMBLE HASPJFET, AND PROBABLY VERFYQEL, DUE TO CHANGED JES2
//* CONTROL BLOCKS, DUE TO LEVEL SET PTF UZ26743 IN PUT 7909.
//*
//* OC4 IN HASPJFET WHEN BRINGING UP JES2 COLD.  RE-ASSEMBLED A TEST
//* VERSION OF HASPJFET (SEE MEMBER ASMTEST), USING THE SYSLIBS FROM
//* IPOSMP4 PROC; COMPARED BEFORE AND AFTER HASPJFET'S USING TSO TEST
//* COMMAND AND WYLBUR COMPARE -- NOT THE SAME.  CAIRES 3/12/80.
//*
//* //ASMOUT DD  IS PUT TO DISK, THEN EITHER TO MICROFICHE OR PRINTER.
//*
//*
//* USE APPLY CHECK BEFORE APPLY.  SAME FOR ACCEPT.  BACKUP SYS1.CDS AND
//* SYS1.ACDS USING JOB FDRDSFD BEFORE APPLY OR RESTORE OR ACCEPT, AND
//* THEN USE  DIS(WRITE) INSTEAD OF  DIS(READ), WHICH IS 20 TIMES
//* FASTER.
//*
//*
//*
//DELETE   EXEC PGM=IEFBR14
//ASMOUT   DD  DSN=$SYSUT.VS00026.ASMOUT,
//             UNIT=DISK,VOL=SER=USER02,
//             DISP=(MOD,DELETE)
//ASMOUT2  DD  DSN=$SYSUT.VS00026.ASMOUT,
//             UNIT=DISK,VOL=SER=USER02,
//             DISP=(MOD,UNCATLG)
//*
//ALLOC    EXEC PGM=IEFBR14
//ASMOUT   DD  DSN=$SYSUT.VS00026.ASMOUT,
//             DCB=(LRECL=121,RECFM=FBA,BLKSIZE=6050),  121 X 50
//*        150 LL/TRK * 100 TRKS = 15,000 LL; 100 TRKS = 3.3 CYLS
//             SPACE=(CYL,(5,5),RLSE),  150LL/TRK*1000 TRKS = 33 CYLS
//             UNIT=DISK,VOL=SER=USER02,
//             DISP=(,CATLG,DELETE)
//*
//*
//*
//VS00026  EXEC IPOSMP4,DLIB=PAG002,RES=SYS101,PTS=PAG002
//ASMOUT   DD  DSN=$SYSUT.VS00026.ASMOUT,DISP=MOD
//SYSIN    DD  *    ( //SMPCNTL DD DDNAME=SYSIN IN IPOSMP4 PROC )
 LIST PTS SYSMOD(VS00026) .
 LIST CDS SYSMOD(VS00026) .
 APPLY   S(VS00026) DIS(WRITE) /* BACKUP CDS AND ACDS FIRST */ .
 LIST CDS SYSMOD(VS00026) .
/*
//*
//*
//*
//DUMMYJCL DD  *     UNUSED CARDS
 APPLY   S(VS00026) DIS(READ) CHECK .
 ACCEPT  S(VS00026) DIS(READ) CHECK .
 ACCEPT  S(VS00026) DIS(WRITE) .
 LIST ACDS SYSMOD(VS00026) .
/*
./ ADD NAME=VS00026C 0110-80107-80108-1152-00076-00040-00000-$SYS13  00
//VS00025C JOB (2000,S010),S.CAIRES,CLASS=Z,MSGCLASS=A
/*JOBPARM Q=F,I
//*
//* COPY PTF JTP002 AND RELFILE(S) FROM SMP4 FORMAT TAPE TO A NEW TAPE
//* TO CHANGE NAMES FROM JTIP002 TO VS00026 -- ITEL/PDC CONVENTION.
//*
//*
//* COPY JTIP TAPE FILE 17, JTIP002, TO DISK AS MEMBER VS00026.
//*
//IEBGEN   EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  DSN=JTIP002,
//             LABEL=(17,SL,EXPDT=98000),
//             UNIT=TAPE,VOL=(,RETAIN,SER=JTIP),DISP=OLD
//*SYSUT2   DD  DSN=SYS0.SMP.SE.CNTL(VS00026),
//SYSUT2   DD  DSN=$SYSUT.JTIP.V12.CNTL(VS00026),
//             DISP=SHR
//SYSIN    DD  DUMMY
//*
//* USE TP MONITOR IN BATCH TO CHANGE ALL REFERENCES (PROBABLY JUST 1)
//* IN MEMBER JTIP002/VS00026 FROM JTIP002 TO VS00026.
//*
//STEP1    EXEC PGM=IKJEFT01,COND=(4,LT)
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD *
FREE DA('$SYSUT.JTIP.V12.CNTL(VS00026)')
EDIT '$SYSUT.JTIP.V12.CNTL(VS00026)' CNTL
VERIFY
CHANGE *,1000 /JTIP002/VS00026/ALL
END SAVE
FREE ALL
/*
//*
//* COPY MEMBER VS00026 (WITH ALL REFERENCES CHANGED FROM JTIP002
//* TO VS00026) TO A NEW TAPE AS FILE 1.
//*
//IEBGENER  EXEC PGM=IEBGENER,COND=(4,LT)
//SYSPRINT DD  SYSOUT=*
//*SYSUT1   DD  DSN=$SYSUT.SMP.SE.CNTL(VS00026),DISP=SHR
//SYSUT1   DD  DSN=$SYSUT.JTIP.V12.CNTL(VS00026),DISP=SHR
//SYSUT2   DD  DSN=$SYSUT.JTIP.VS00026,
//             DCB=(LRECL=80,RECFM=FB,BLKSIZE=3120),
//             LABEL=(1,SL,EXPDT=99000),
//             UNIT=TAPE,VOL=(,RETAIN),
//             DISP=(,CATLG,DELETE)
//SYSIN    DD  DUMMY
//*
//* COPY ORIGINAL JTIP TAPE FILES 18 AND 19, JTIP002.F1 AND
//* JTIP002.F2 (SMP4 RELFILES) TO THE NEW TAPE AS FILES 2 AND 3,
//* VS00026.F1 AND VS00026.F2.
//*
//COPY2    EXEC PGM=IEBCOPY,COND=(4,LT)
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  DSN=JTIP002.F1,
//             LABEL=(18,SL,EXPDT=98000),
//             UNIT=TAPE,VOL=(,RETAIN,SER=JTIP),DISP=OLD
//SYSUT2   DD  DSN=VS00026.F1,
//             LABEL=(2,SL),
//             UNIT=TAPE,VOL=(,RETAIN,REF=*.IEBGENER.SYSUT2),
//             DISP=(,KEEP,DELETE)
//SYSIN    DD  *
 COPY OUTDD=SYSUT2,INDD=SYSUT1
/*
//*
//COPY3    EXEC PGM=IEBCOPY,COND=(4,LT)
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  DSN=JTIP002.F2,
//             LABEL=(19,SL,EXPDT=98000),
//             UNIT=TAPE,VOL=(,RETAIN,SER=JTIP),DISP=OLD
//SYSUT2   DD  DSN=VS00026.F2,
//             LABEL=(3,SL),
//             UNIT=TAPE,VOL=(,RETAIN,REF=*.IEBGENER.SYSUT2),
//             DISP=(,KEEP,DELETE)
//SYSIN    DD  *
 COPY OUTDD=SYSUT2,INDD=SYSUT1
/*
./ ADD NAME=VS00026R 0102-80102-80108-1115-00024-00024-00005-$SYS03  00
//VS00026R JOB (2000,S010),S.CAIRES,CLASS=Z,MSGCLASS=A
/*JOBPARM Q=F,I
//*
//* NOTE -- USE TAPE FOR SMPPTFIN, BECAUSE RELFILE SPECIFIES TAPE
//*         FILES.
//* USE APPLY CHECK BEFORE APPLY.  SAME FOR ACCEPT.
//* BACKUP SYS1.CDS AND SYS1.ACDS USING JOB FDRDSFD BEFORE APPLY
//* OR ACCEPT, AND THEN USE  DIS(WRITE) INSTEAD OF  DIS(READ),
//* WHICH IS 20 TIMES FASTER.
//*
//* JTIP002 WAS RENAMED TO VS00026, PER ITEL AND PDC CONVENTION.
//* SEE JOB VS00026C, WHICH COPIED JTIP002, JTIP002.F1 AND
//* JTIP002.F2 FROM JTIP TAPE TO NEW TAPE, RENAMING TO VS00026.
//*
//VS00026  EXEC IPOSMP4          DLIB=PAG002,RES=SYS101,PTS=PAG002
//*SMPPTFIN DD  DSN=JTIP002,VOL=SER=JTIP,LABEL=(17,SL,EXPDT=98000),
//*             UNIT=TAPE,DISP=OLD
//SMPPTFIN DD  DSN=$SYSUT.JTIP.VS00026,   CREATED BY JOB VS00026C
//             UNIT=TAPE,DISP=OLD
//SYSIN    DD  *
 REJECT S(VS00026).
 RECEIVE .
 APPLY   S(VS00026) DIS(READ)  CHECK.
/*
./ ADD NAME=VS00028  0104-80069-80119-1136-00029-00024-00001-$SYS13  00
//VS00028 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//OZLINK EXEC PGM=IEBCOPY
//SYSPRINT   DD SYSOUT=*
//SYSUT3 DD UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSUT4 DD UNIT=SYSDA,SPACE=(CYL,(10,10))
//LINKLIB    DD DSN=SYS1.LINKLIB,DISP=SHR,UNIT=DISK,VOL=SER=SYS100
//OZLIB      DD DSN=SYS1.OZLIB,DISP=SHR,UNIT=DISK,VOL=SER=SYS100
//SYSIN      DD *
 COPY I=((OZLIB,R)),O=LINKLIB
 S M=OZB
 S M=OZC
 S M=OZD
 S M=OZJ
 S M=OZM
 S M=OZSGENER
/*
//OZUCL  EXEC IPOSMP4         UCLIN:  CMDLIB ---> LPALIB
//SYSIN  DD  *
  UCLIN CDS.
  ADD LMOD(OZB)        SYSLIB(LINKLIB).
  ADD LMOD(OZC)        SYSLIB(LINKLIB).
  ADD LMOD(OZD)        SYSLIB(LINKLIB).
  ADD LMOD(OZJ)        SYSLIB(LINKLIB).
  ADD LMOD(OZM)        SYSLIB(LINKLIB).
  ADD LMOD(OZSGENER)   SYSLIB(LINKLIB).
  ENDUCL.
/*
./ ADD NAME=VS00029  0103-80093-80141-1649-00022-00019-00022-$SYS13  00
//VS00029 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//STEP1  EXEC IPOSMP4
//SYSIN DD *
 RESTORE S(VS00029) .
 REJECT  S(VS00029) .
 RECEIVE S(VS00029) .
 APPLY S(VS00029) .
 LIST CDS SYSMOD(VS00029) .
 LIST CDS MOD(IECVHIDT) .
//SMPPTFIN DD *
++ USERMOD (VS00029)          /*
        MVS SYSTEM IPO ZAP TO CHANGE I/O THRESHOLD VALUES.
        THIS VERSION IS APPLICABLE TO SU64 AND THE VALUES ARE
        FROM THE IPO8 DOCUMENTATION.     */  .
++ VER (Z038) FMID(FBB1221) PRE(UZ25990)     .
++ ZAP (IECVHIDT) .
 NAME IECVHIDT
 VER 0000 00640064,000C0004
 REP 0000 02000200,001800F0
 IDRDATA VS000029
/*
./ ADD NAME=VS00030  0104-80102-80102-2032-00029-00020-00015-$SYS13  00
//VS00030 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//*   INSTALL THE CICS SVC'S 214 AND 215
//*
//VS00030  EXEC IPOSMP4
//SYSIN DD *
 UCLIN CDS .
 REP MOD(DFHHPSVC) LMOD(IEANUC01) DISTLIB(CICS) FMID(EBB1102) .
 ENDUCL .
 RECEIVE S(VS00030) .
 APPLY   S(VS00030) .
 LOG (ADD SVC'S 214 AND 215 FOR CICS) .
 LIST CDS SYSMOD(VS00030) .
//CICS   DD DISP=SHR,DSN=CICS.LOADLIB
//SMPPTFIN DD DATA
++ USERMOD (VS00030) .
++ VER (Z038) FMID(EBB1102) .
++ MOD (DFHHPSVC)   DISTLIB(CICS) LKLIB(CICS) .
++ MOD (DFHCSVC) DISTLIB(CICS) LKLIB(CICS) .
++ JCLIN .
//VS00030 EXEC PGM=IEBCOPY
//SYSPRINT DD SYSOUT=*
//CICS   DD DSN=CICS.LOADLIB,DISP=SHR
//LPALIB DD DSN=SYS1.LPALIB,DISP=SHR,UNIT=DISK,VOL=SER=ITEL01
//SYSIN  DD *
 C I=((CICS,R),O=LPALIB
 S M=((DFHCSVC,IGC0021D))
/*
./ ADD NAME=VS00031  3805-80010-80101-1754-00036-00019-00026-$SYS13  00
//VS00031  JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//*   THIS JOB IS APPLIED TO CIRCUMVENT 106-C'S BY COPYING
//*   SOME SU33 MODULES FROM LINKLIB TO LPALIB.
//*   REF : AZ25758
//*
//LPALINK EXEC IEBCOPY
//LPALIB   DD DSN=SYS1.LPALIB,DISP=SHR,VOL=SER=ITEL01,UNIT=DISK
//SLINKDD  DD DSN=SYS1.LINKLIB,DISP=SHR,VOL=SER=ITEL01,UNIT=DISK
//SYSUT3 DD UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSUT4 DD UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSIN DD *
 COPY O=LPALIB,I=((SLINKDD,R))
 S M=(IEAVTFMT,IEAFTEED,IEAFTESA,IEAFTIHS,IEAFTFRR)
 S M=(IEAFTRTC,IEAFTRT2,IEAFTSCB,IEAFTSDW)
 S M=IECDAFMT
 S M=IECIOFMT
/*
//*
//LINKUCL EXEC IPOSMP4        UCLIN: LINKLIB ---> LPALIB
//SMPCNTL DD  *
  UCLIN CDS DIS(WRITE).
  ADD LMOD(IEAVTFMT)  SYSLIB(LPALIB).
  ADD LMOD(IECDAFMT)  SYSLIB(LPALIB).
  ADD LMOD(IECIOFMT)  SYSLIB(LPALIB).
  ADD LMOD(IEAFTEED)  SYSLIB(LPALIB).
  ADD LMOD(IEAFTESA)  SYSLIB(LPALIB).
  ADD LMOD(IEAFTIHS)  SYSLIB(LPALIB).
  ADD LMOD(IEAFTFRR)  SYSLIB(LPALIB).
  ADD LMOD(IEAFTRTC)  SYSLIB(LPALIB).
  ADD LMOD(IEAFTRT2)  SYSLIB(LPALIB).
  ADD LMOD(IEAFTSCB)  SYSLIB(LPALIB).
  ADD LMOD(IEAFTSDW)  SYSLIB(LPALIB).
  ENDUCL.
/*
./ ADD NAME=VS00032  0102-80089-80101-1641-00048-00048-00006-$SYS13  00
//VS00032  JOB  (2000,S010),WENZEL,CLASS=Z
/*JOBPARM  Q=F,I
//SMP EXEC IPOSMP4
//* THIS MOD SHOULD BE ACCEPTED AFTER IT IS PROVEN TO WORK.
//* ANY  I/O GENS WILL REMOVE THE MOD IF NOT.
//SYSIN   DD *
 RECEIVE S (VS00032).
 APPLY S (VS00032).
 LIST CDS MOD(IEECVETC).
 LIST CDS SYSMOD(VS00032).
//SMPPTFIN DD *
++ USERMOD (VS00032)
 /*  PROBLEM :  UNATTENDED CONSOLES WILL QUEUE UP MESSAGES AND
                EVENTUALLY CRASH SYSTEM DUE TO BUFFER SHORTAGE
     SOLUTION:  INVOKE DIDOCS TO SETUP SCREENS IN DELETABLE MODE
                AFTER INITIALIZATION
     WARNING :  BE SURE TO ASSIGN ALL ALIAS NAMES AND ENTRY
                POINT ON EXPAND OPERATION OF LINKAGE EDITOR
                OR USE SMP
                MODIFICATION WILL AUTOMATICALLY SET FOLLOWING
                MODE ON ALL GRAPHICS CONSOLES:
                    K  S,DEL=RD,RTME=1,CON=N,SEG=19
     SOURCE  :  SSD #277 SHARE INC., JULY 15,1977
     NOTES   :  R9 -- DCM TRANSIENT BASE REGISTER
                R9 + X'40' -- POINTER TO ENTRY AREA
                R9 + X'54' -- ADDRESS OF COMMAND OPERAND
                R9 + X'50' -- CXSA SAVE AREA
                R9 + X'160' - OPTIONS ROUTINE #1
 */  .
++ VER (Z038) PRE(UZ23847) FMID(EBB1102) .
++ ZAP (IEECVETC) .
 EXPAND IEECVETC(72)
  NAME IEECVETC
  VER 01AC 96E09122
  VER 03B0 00000000,00000000,00000000,00000000
  VER 03C0 00000000,00000000,00000000,00000000
  VER 03D0 00000000,00000000,00000000,00000000
  VER 03E0 00000000,00000000,00000000,00000000
  REP 01AC 47F0C3AE
  REP 03B0 96309122,58F09040
  REP 03B8 D21DF000C3CE,41F0F002
  REP 03C2 50F09054,58F09160
  REP 03CA 58109050,07FF
  REP 03D0 D240E26B,C4C5D37E             K S,DEL=
  REP 03D8 D9C46BD9,E3D4C57E             RD,RTME=
  REP 03E0 F16BC3D6,D57ED56B             1,CON=N,
  REP 03E8 E2C5C77E,F1F9                 SEG=19
  IDRDATA VS00032
./ ADD NAME=VS00033  0107-80078-80101-1728-00201-00214-00000-$SYS03  00
//VS00033   JOB (2000,S010),S.CAIRES,CLASS=Z,MSGCLASS=A
/*JOBPARM Q=F,I
//*
//* RE-ACCEPT VS00033 (INTEGRATED WITH FOWLER'S VS00014)
//* AFTER:
//* (1) ACCEPT OF PUT TAPES 7909, 7910 AND 7911;
//* (2) ACCEPT OF AMDAHL'S 6.1 UPGRADE AND CONFLICT TAPES FOR
//*     7909, 7910 AND 7911;
//* (3) ACCEPT OF SAME PTFS FROM CUSTOMIZED PUT TAPES 7910 AND 7911;
//* (4) ACCEPT OF JTIP PTF JTIP002/VS00026;
//*
//* ON NEW MVS 3.8 SYSTEM FROM DLIB 7908 AT ITEL.
//*
//*
//* VS00033 FROM FOWLER MEMOREX - MULTICOPY PAGE SEPARATOR.
//*
//* FOWLER'S VS00014 IS AN UPDATE TO VS00033 CHANGES TO HASPPRPU.
//* (NOTE - VS00014 CHANGES INTERLEAVE LINES OF ORIGINAL VS00033.)  MOD
//* VS00014 IS TO CORRECT A CONFLICT BETWEEN VS00033 AND IBM APAR
//* OZ19494.  (THIS FIX WAS INTEGRATED INTO VS00033 BY CAIRES ON
//* 3/18/80.)
//*
//* //ASMOUT DD  IS PUT TO DISK, THEN EITHER TO MICROFICHE OR PRINTER.
//*
//*
//* USE ACCEPT CHECK BEFORE ACCEPT. SAME FOR ACCEPT. BACKUP SYS1.CDS AND
//* SYS1.ACDS USING JOB FDRDSFD BEFORE ACCEPT OR RESTORE OR ACCEPT, AND
//* THEN USE  DIS(WRITE) INSTEAD OF  DIS(READ), WHICH IS 20 TIMES
//* FASTER.
//*
//*
//DELETE   EXEC PGM=IEFBR14
//ASMOUT   DD  DSN=$SYSUT.VS00033.ASMOUT,
//             UNIT=DISK,VOL=SER=USER02,
//             DISP=(MOD,DELETE)
//ASMOUT2  DD  DSN=$SYSUT.VS00033.ASMOUT,
//             UNIT=DISK,VOL=SER=USER02,
//             DISP=(MOD,UNCATLG)
//*
//ALLOC    EXEC PGM=IEFBR14
//ASMOUT   DD  DSN=$SYSUT.VS00033.ASMOUT,
//             DCB=(LRECL=121,RECFM=FBA,BLKSIZE=6050),  121 X 50
//*        150 LL/TRK * 100 TRKS = 15,000 LL; 100 TRKS = 3.3 CYLS
//             SPACE=(CYL,(5,5),RLSE),  150LL/TRK*1000 TRKS = 33 CYLS
//             UNIT=DISK,VOL=SER=USER02,
//             DISP=(,CATLG,DELETE)
//*
//*
//*
//VS00033   EXEC IPOSMP4         DLIB=PAG002,RES=SYS101,PTS=PAG002
//ASMOUT   DD  DSN=$SYSUT.VS00033.ASMOUT,DISP=MOD
//SYSIN    DD  *    ( //SMPCNTL DD DDNAME=SYSIN IN IPOSMP4 PROC )
 LIST CDS SYSMOD(VS00033) .
 ACCEPT  S(VS00033) USERMODS
                    DIS(WRITE) /* BACKUP CDS AND ACDS FIRST */ .
 LIST ACDS SYSMOD(VS00033) .
/*
//*
//*
//*
//DUMMYJC1  DD *    UNUSED CARDS
 LIST PTS SYSMOD(VS00033) .
 LIST CDS SYSMOD(VS00033) .
 LIST ACDS SYSMOD(VS00033) .
 REJECT  S (VS00033) .
 RECEIVE S (VS00033) .
 LIST PTS SYSMOD(VS00033) .
 APPLY   S(VS00033) DIS(WRITE) /* BACKUP CDS AND ACDS FIRST */ .
 APPLY   S (VS00033) CHECK  /* DIS(READ) */ .

 ACCEPT  S (VS00033) USERMODS CHECK  /* DIS(READ) */ .
/*
//*
//*
//*
//SMPPTFIN  DD *
++ USERMOD (VS00033) /* JES2 MULTICOPY PAGE SEPARATOR MOD */
                     /* WITH CORRECTIONS DUE TO OZ19494   */ .
++VER (Z038) FMID(EJE1102)
       PRE (UZ26743, UZ90070,           /* FOR HASPPRPU AND $PPPWORK */
            VS00017, VS00025,           /* FOR HASPPRPU */
            VS00018,                    /* FOR HASPRDR  */
            AZ40644, UZ27051, UZ27259   /* FOR HASPPRPU */ ) .
++MACUPD ($PPPWORK) DISTLIB(HASPSRC) .
><  CHANGE  NAME=$PPPWORK
PDCT     EQU   PCEDCT,4                    ADDRESS OF DCT       VS00033 FZ042010
++SRCUPD (HASPPRPU) DISTLIB(HASPSRC) .
><  CHANGE  NAME=HASPPRPU
         MVC   BUFSTART+39(20),JCTPNAME    MOVE PGMR NAME       VS00033 Q1687020
         MVC   BUFSTART+8(8),JCTJOBID      MOVE HASP JOBID      VS00033 Q1687030
*        BH    PNXTCPY   DELETED FOR VS00033     DUE TO OZ19494 VS00033 Q3135000
         BNH   PRCPYEND                          DUE TO OZ19494 VS00033 Q3135050
         LA    R1,=CL5' END'      GENER END PAGE                VS00033 Q3135100
         L     R15,=A(PRINTID) GO PRINT IT       DUE TO OZ19494 VS00033 Q3135150
         BALR  R14,R15                           DUE TO OZ19494 VS00033 Q3135200
         LA    R1,=CL5'COPY '                                   VS00033 Q3135300
         L     R15,=A(PRINTID)                   DUE TO OZ19494 VS00033 Q3135350
         BALR  R14,R15                           DUE TO OZ19494 VS00033 Q3135400
         B     PNXTCPY                                          VS00033 Q3136300
         CLC   PCEFORM(5),=CL5' END'  DONT PRINT *              VS00033 Q4840100
         BE    PNXASTER                 ON ' END ' PAGE         VS00033 Q4840200
         L     PL,PDCT                LOAD A(DCT)               VS00033 Q4840300
         USING DCTDSECT,PL            DCT ADDRESSABILITY        VS00033 Q4840400
         CLC   DCTUCS(4),=CL4'T11'    IS IT A XEROX? (UCS=T11)  VS00033 Q4840500
         DROP  PL                     DROP DCT ADDRESSABILITY   VS00033 Q4840510
         B     PNXASTER    WAS BNE    IF NOT XEROX, NO PRINTFJP/25MAY79 Q4840600
         L     R1,PLNDISPL            GET NEW LINE DISPLACEMENT VS00033 Q4840700
         LA    PC1,0(R1,PBUF)             BUFFER ADDRESS        VS00033 Q4840710
         MVI   0(PC1),C'*'            GENERATE LINE OF *        VS00033 Q4840800
         MVC   1(131,PC1),0(PC1)        FULL LINE               VS00033 Q4840900
         LM    PC1,PC2,PRCCWID                                  VS00033 Q4840910
         ICM   PC1,8,=X'13'        SET CCW TO DOUBLE-SPACE      VS00033 Q4840920
         BAL   PL,PPPUT               ADD TO CHAIN              VS00033 Q4840930
PNXASTER EQU   *                                                VS00033 Q4840940
         CLC   7(5,PC1),=C'COPY '                               VS00033 Q4889100
         BNE   CPYSKIP                                          VS00033 Q4889200
         MVC   14(8,PC1),=C' '                                  VS00033 Q4889300
         SR    PW,PW                                            VS00033 Q4889400
         IC    PW,PPRCPYCT                                      VS00033 Q4889500
         LA    PW,1(,PW)          MUST INCR COUNT AT THIS POINT VS00033 Q4889510
         CVD   PW,PCCWORK                                       VS00033 Q4889600
         UNPK  13(3,PC1),PCCWORK+6(2)                           VS00033 Q4889700
         OI    15(PC1),X'F0'                                    VS00033 Q4889800
         MVI   13(PC1),C' '                                     VS00033 Q4889810
         MVI   16(PC1),C' '                                     VS00033 Q4889900
         MVC   17(2,PC1),=C'OF'                                 VS00033 Q4889910
         SR    PW,PW                                            VS00033 Q4889930
         IC    PW,PPDSCPY                                       VS00033 Q4889940
         CVD   PW,PCCWORK                                       VS00033 Q4889950
         UNPK  19(3,PC1),PCCWORK+6(2)                           VS00033 Q4889960
         MVI   19(PC1),C' '                                     VS00033 Q4889961
         OI    21(PC1),X'F0'                                    VS00033 Q4889970
CPYSKIP  DS    0H                                               VS00033 Q4889980
         L     PL,PDCT               LOAD A(DCT)                VS00033 Q4950010
         USING DCTDSECT,PL           DCT ADDRESSABILITY         VS00033 Q4950020
         CLC   DCTUCS(4),=CL4'PN'    LOCAL 1403? (UCS=PN, PRT4) VS00033 Q4950030
         BE    PPASTER               YES,PRINT *                VS00033 Q4950040
         CLC   DCTUCS(4),=CL4'P11'   LOCAL 3211? (UCS=P11,PRT3) VS00033 Q4950050
         BE    PPASTER               YES, PRINT *               VS00033 Q4950070
         B     PNOASTER                IF NOT 3211, DONT PRINT  VS00033 Q4950080
PPASTER  ICM   PC1,8,=X'19'          SET TRIPLE SPACE FOR       VS00033 Q4950100
         BAL   PL,PPPUT               LINE OF *                 VS00033 Q4950200
         LA    PC1,132(PC1)          GET NEW LINE BUFFER ADDR   VS00033 Q4950300
         MVI   0(PC1),C'*'           GENERATE LINE OF *         VS00033 Q4950400
         MVC   1(131,PC1),0(PC1)       FULL LINE                VS00033 Q4950500
         AL    PC1,PRCCWID           SINGLE SPACE AFTER..       VS00033 Q4950600
         BAL   PL,PPPUT              GO PRINT IT.               VS00033 Q4950700
PNOASTER EQU   *                                                VS00033 Q4950800
         DROP  PL                    DROP DCT ADDRESSABILITY    VS00033 Q4950900
>< ENDUP
/*
//*
//*
//*
//DUMMYJCL  DD *          UNUSED CARDS
++ USERMOD (VS00014) .
++ VER (Z038) FMID(EJE1102) PRE(UZ26743,UZ26744,UZ27051,UZ27259,
              UZ90070,#Z90235,#Z90276,AZ40644,VS00017,VS00018,
              VS00025,VS00033,#Z90297,VS00039) .
++ SRCUPD(HASPPRPU) DISTLIB(HASPSRC) .

* ORIGINAL VS00014 FROM FOWLER/MEMOREX.
>< CHANGE NAME=HASPPRPU,SEQFLD=747
*        BH    PNXTCPY DELETED FOR VS00033                $SYS3 VS00014 Q3135000
         BNH   PRCPYEND                                   $SYS3 VS00014 Q3135050
         L     R15,=A(PRINTID) GO PRINT IT       OZ19494  $SYS3 VS00014 Q3135150
         BALR  R14,R15                 CODE FROM OZ19494  $SYS3 VS00014 Q3135200
         L     R15,=A(PRINTID)         CODE FROM OZ19494  $SYS3 VS00014 Q3135350
         BALR  R14,R15                 CODE FROM OZ19494  $SYS3 VS00014 Q3135400
>< ENDUP

* ORIGINAL VS00014 CHANGED TO VS00033 ID (AND OZ19494).
>< CHANGE NAME=HASPPRPU
*        BH    PNXTCPY   DELETED FOR VS00033     DUE TO OZ19494 VS00033 Q3135000
         BNH   PRCPYEND                          DUE TO OZ19494 VS00033 Q3135050
         L     R15,=A(PRINTID) GO PRINT IT       DUE TO OZ19494 VS00033 Q3135150
         BALR  R14,R15                           DUE TO OZ19494 VS00033 Q3135200
         L     R15,=A(PRINTID)                   DUE TO OZ19494 VS00033 Q3135350
         BALR  R14,R15                           DUE TO OZ19494 VS00033 Q3135400
>< ENDUP

* ORIGINAL VS00014 (OZ19494) MERGED WITH AFFECTED VS00033 LINES.
>< CHANGE NAME=HASPPRPU
*        BH    PNXTCPY   DELETED FOR VS00033     DUE TO OZ19494 VS00033 Q3135000
         BNH   PRCPYEND                          DUE TO OZ19494 VS00033 Q3135050
         LA    R1,=CL5' END'      GENER END PAGE                VS00033 Q3135100
         L     R15,=A(PRINTID) GO PRINT IT       DUE TO OZ19494 VS00033 Q3135150
         BALR  R14,R15                           DUE TO OZ19494 VS00033 Q3135200
         LA    R1,=CL5'COPY '                                   VS00033 Q3135300
         L     R15,=A(PRINTID)                   DUE TO OZ19494 VS00033 Q3135350
         BALR  R14,R15                           DUE TO OZ19494 VS00033 Q3135400
>< ENDUP

* REMOVED FROM ORIGINAL VS00033 (VS00014 MERGED INTO ORIGINAL VS00033)
         BNH   PRCPYEND                                         VS00033 Q3135000
         LA    R1,=CL5' END'      GENER END PAGE                VS00033 Q3135100
         BAL   PL,PRINTID         GO PRINT IT                   VS00033 Q3135200
         LA    R1,=CL5'COPY '                                   VS00033 Q3135300
         BAL   PL,PRINTID                                       VS00033 Q3135400

/*
./ ADD NAME=VS00034  0101-80102-80102-2053-00015-00025-00008-$SYS13  00
//VS00034  JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//*        MOVE THE REENTRANT MODULES FOR COBOL TO LPALIB
//*        DID NOT UPDATE CDS BECAUSE THERE WERE TOO MANY MODULES
//*        AND TOO MANY ALIASES
//*
//STEP1  EXEC PGM=IEBCOPY
//VSCOBOL  DD DISP=SHR,DSN=SYS4.VSCOBOL.V23.LPALIB
//LPALIB   DD DISP=OLD,DSN=SYS1.LPALIB,
//            VOL=SER=ITEL01,UNIT=DISK
//SYSPRINT DD SYSOUT=*
//SYSIN    DD *
 C I=((VSCOBOL,R)),O=LPALIB
/*
./ ADD NAME=VS00036  0100-80109-80109-1540-00009-00009-00000-$SYS13  00
//VS00036  JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//STEP01   EXEC ASMFCL,MAC1='SYS2.MACLIB'
//ASM.SYSLIB DD UNIT=DISK,VOL=SER=ITEL01
//ASM.SYSIN  DD  DISP=SHR,DSN=SYS0.CMDLIB2.SOURCE(SPFCOPY)
//LKED.SYSLMOD  DD  DISP=SHR,DSN=SYS2.CMDLIB
//LKED.SYSIN    DD  *
 NAME  SPFCOPY(R)
/*
./ ADD NAME=VS00037  0108-80109-80119-1604-00015-00011-00011-$SYS13  00
//VS00037  JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//*         STEP 1 ASSEMBLE AND LINKEDIT SPFIPAN2
//*
//STEP1    EXEC ASMFCL,MAC='SYS2.MACLIB'
//ASM.SYSLIB DD
//           DD UNIT=DISK,VOL=SER=SYS100
//ASM.SYSIN DD DSN=SYS0.CMDLIB2.SOURCE(SPFIPAN2),DISP=SHR
//LKED.SYSLMOD DD DISP=OLD,DSN=SYS2.CMDLIB
//PANVALET DD DISP=SHR,DSN=SYS3.PANVALET.LINKLIB
//LKED.SYSIN    DD  *
 INCLUDE PANVALET(PAM)
 NAME  SPFIPAN2(R)
/*
./ ADD NAME=VS00038  3802-80010-80101-1644-00025-00026-00009-$SYS13  00
//VS00038  JOB  (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//SMP EXEC IPOSMP4
//SYSIN DD *
 RECEIVE S (VS00038).
 APPLY S (VS00038) .
 LOG (CHANGE ALLOCATE DEFAULT DISPOSITION FROM OLD TO SHR).
 LIST CDS SYSMOD(VS00038) .
 LIST CDS    MOD(IKJEFD30) .
/*
//SMPPTFIN DD *
++ USERMOD(VS00038)
 /* PROBLEM :  TSO ALLOC DEFAULTS TO 'OLD'
    SOLUTION:  CHANGE ALLOC DEFAULT TO 'SHR'
    BENEFIT :  LESSENS DATASET CONTENTION BY TSO USERS
               AND/OR BATCH
    SOURCE  :  SSD #277 SHARE INC., JULY 15,1977
               CHANGED FOR SU 11  12/21/79 F.HAMBRICK
 */.
++ VER (Z038) FMID(JBB1112) .
++ ZAP (IKJEFD30) .
  NAME IKJEFD30
  VER 0284 D201A00E,C5CA              MVC  STATSPDE(2,@10),@CH00034
  REP 0284 D201A00E,C5CC              MVC  STATSPDE(2,@10),@CH00088
  IDRDATA VS00038
./ ADD NAME=VS00039  0111-79358-80101-1732-00020-00016-00000-$SYS03  00
//VS00039  JOB (2000,S010),S.CAIRES,CLASS=Z,MSGCLASS=A
/*JOBPARM Q=F,I
//* VS00039 FROM FOWLER MEMOREX.
//VS00039  EXEC IPOSMP4          DLIB=PAG002,RES=SYS101,PTS=PAG002
//SYSIN DD *
 LIST  PTS SYSMOD(VS00039) .
 REJECT  S (VS00039).
 RECEIVE S (VS00039).
 LIST  PTS SYSMOD(VS00039) .
 APPLY   S (VS00039) CHECK /* DIS(READ) */ .
//SMPPTFIN DD  *
++ USERMOD (VS00039) /* JTIP 12/17/79 FIXES */ .
++ VER (Z038)  FMID(EJE1102)
       PRE (AZ38575, UZ24620)
       REQ (VS00025) .
++ SRCUPD (HASPMISC) DISTLIB(HASPSRC) .
>< CHANGE NAME=HASPMISC
*  CODE DELETED FROM JTIP, INCLUDED BY ERROR 12/17/79   UIC 002 VS00039 N4830010
*  CODE DELETED FROM JTIP, INCLUDED BY ERROR 12/17/79   UIC 002 VS00039 N5216010
><  ENDUP
./ ADD NAME=VS00040  0103-80171-80182-1904-00029-00029-00003-$SYS13  00
//VS00040 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//*   INSTALL THE JARS CICS SVC'S 237 AND 208.
//*
//VS00040  EXEC IPOSMP4
//SYSIN DD *
 UCLIN CDS .
 REP MOD(IGC208)   LMOD(IEANUC01) DISTLIB(JARSCICS) FMID(EBB1102) .
 ENDUCL .
 RECEIVE S(VS00040) .
 APPLY   S(VS00040) .
 LOG (ADD SVC'S 237 AND 208 FOR JARS TESTCICS) .
 LIST CDS SYSMOD(VS00040) .
//JARSCICS DD DISP=SHR,DSN=SYS4.JARSCICS.V21.TEST.LOADLIB
//SMPPTFIN DD DATA
++ USERMOD (VS00040) .
++ VER (Z038) FMID(EBB1102).
++ MOD (IGC208)  DISTLIB(JARSCICS)  LKLIB(JARSCICS) .
++ MOD (IGC0023G) DISTLIB(JARSCICS) LKLIB(JARSCICS) .
++ JCLIN .
//VS00040 EXEC PGM=IEBCOPY
//SYSPRINT DD SYSOUT=*
//JARSCICS DD DISP=SHR,DSN=SYS4.JARSCICS.V21.TEST.LOADLIB
//LPALIB DD DSN=SYS1.LPALIB,DISP=OLD
//SYSIN  DD *
 C I=((JARSCICS,R)),O=LPALIB
 S M=IGC0023G
/*
./ ADD NAME=VS00041  3803-80010-80101-1102-00357-00354-00011-$SYS13  00
//VS00041 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//LPACMD EXEC PGM=IEBCOPY
//SYSPRINT   DD SYSOUT=*
//SYSUT3 DD UNIT=SYSDA,SPACE=(CYL,(10,10))
//SYSUT4 DD UNIT=SYSDA,SPACE=(CYL,(10,10))
//LPALIB     DD DSN=SYS1.LPALIB,DISP=SHR,UNIT=DISK,VOL=SER=ITEL01
//SCMDLIB    DD DSN=SYS1.CMDLIB,DISP=SHR,UNIT=DISK,VOL=SER=ITEL01
//SYSIN      DD *
 COPY OUTDD=LPALIB,INDD=SCMDLIB
 S M=AKJLKL01
 S M=AKJLKL02
 S M=ALLOC
 S M=ALLOCATE
 S M=ALTER
 S M=ATTR
 S M=ATTRIB
 S M=BIX
 S M=BLDINDEX
 S M=CANCEL
 S M=CNVTC
 S M=CNVTCAT
 S M=DEF
 S M=DEFINE
 S M=DEL
 S M=DELETE
 S M=E
 S M=EDIT
 S M=END
 S M=EX
 S M=EXEC
 S M=EXPORT
 S M=EXPORTRA
 S M=FREE
 S M=H
 S M=HELP
 S M=IDCAM01
 S M=IDCAM02
 S M=IKJEBEAA
 S M=IKJEBEAR
 S M=IKJEBEBO
 S M=IKJEBECH
 S M=IKJEBECI
 S M=IKJEBECK
 S M=IKJEBECO
 S M=IKJEBEDA
 S M=IKJEBEDC
 S M=IKJEBEDE
 S M=IKJEBEDO
 S M=IKJEBEDX
 S M=IKJEBEEN
 S M=IKJEBEEX
 S M=IKJEBEFC
 S M=IKJEBEFI
 S M=IKJEBEFO
 S M=IKJEBEHE
 S M=IKJEBEIA
 S M=IKJEBEIN
 S M=IKJEBEIP
 S M=IKJEBEIS
 S M=IKJEBELE
 S M=IKJEBELI
 S M=IKJEBELT
 S M=IKJEBEMA
 S M=IKJEBEMC
 S M=IKJEBEME
 S M=IKJEBEMM
 S M=IKJEBEMR
 S M=IKJEBEMS
 S M=IKJEBEM1
 S M=IKJEBEM2
 S M=IKJEBEM3
 S M=IKJEBEM4
 S M=IKJEBEM5
 S M=IKJEBEM6
 S M=IKJEBEM7
 S M=IKJEBEPS
 S M=IKJEBERC
 S M=IKJEBERE
 S M=IKJEBERN
 S M=IKJEBERU
 S M=IKJEBESA
 S M=IKJEBESC
 S M=IKJEBESE
 S M=IKJEBESU
 S M=IKJEBETA
 S M=IKJEBETO
 S M=IKJEBEUI
 S M=IKJEBEUN
 S M=IKJEBEUP
 S M=IKJEBEUT
 S M=IKJEBEVE
 S M=IKJEBEXT
 S M=IKJEBRE5
 S M=IKJEFE11
 S M=IKJEFFCA
 S M=IKJEGAT
 S M=IKJEGATD
 S M=IKJEGCAL
 S M=IKJEGCIV
 S M=IKJEGCPY
 S M=IKJEGDCB
 S M=IKJEGDEB
 S M=IKJEGDEL
 S M=IKJEGDRP
 S M=IKJEGEND
 S M=IKJEGEQU
 S M=IKJEGFRE
 S M=IKJEGGET
 S M=IKJEGGO
 S M=IKJEGLDF
 S M=IKJEGLDR
 S M=IKJEGLOD
 S M=IKJEGLSA
 S M=IKJEGLST
 S M=IKJEGMAP
 S M=IKJEGOFF
 S M=IKJEGPCH
 S M=IKJEGPSW
 S M=IKJEGQFY
 S M=IKJEGRUN
 S M=IKJEGSYM
 S M=IKJEGTCB
 S M=IKJEGWHR
 S M=IKJEHAL1
 S M=IKJEHDS1
 S M=IKJEHMEM
 S M=IKJEHPRO
 S M=IKJEHREN
 S M=IKJEHSIR
 S M=IKJLKL01
 S M=IMP
 S M=IMPORT
 S M=IMPORTRA
 S M=LINK
 S M=LISTA
 S M=LISTALC
 S M=LISTB
 S M=LISTBC
 S M=LISTC
 S M=LISTCAT
 S M=LISTCRA
 S M=LISTD
 S M=LISTDS
 S M=LISTR
 S M=LOAD
 S M=LOADGO
 S M=LOGOFF
 S M=LOGON
 S M=MPRA
 S M=OPER
 S M=OPERATOR
 S M=OUT
 S M=OUTPUT
 S M=PRINT
 S M=PROF
 S M=PROFILE
 S M=PROT
 S M=PROTECT
 S M=R
 S M=RCAT
 S M=REN
 S M=RENAME
 S M=REPRO
 S M=RESETCAT
 S M=RUN
 S M=SE
 S M=SEND
 S M=ST
 S M=STATUS
 S M=SUB
 S M=SUBMIT
 S M=TERM
 S M=TERMINAL
 S M=TEST
 S M=VERIFY
 S M=VFY
 S M=WHEN
 S M=XPRA
/*
//*S M=EXP  THIS ALIAS CAN BE USED WITH CAUTION
//CMDUCL  EXEC IPOSMP4         UCLIN:  CMDLIB ---> LPALIB
//SYSIN  DD  *
  UCLIN CDS.
  ADD LMOD(AKJLKL01)   SYSLIB(LPALIB).
  ADD LMOD(AKJLKL02)   SYSLIB(LPALIB).
  ADD LMOD(ALLOC)      SYSLIB(LPALIB).
  ADD LMOD(ALLOCATE)   SYSLIB(LPALIB).
  ADD LMOD(ALTER)      SYSLIB(LPALIB).
  ADD LMOD(ATTR)       SYSLIB(LPALIB).
  ADD LMOD(ATTRIB)     SYSLIB(LPALIB).
  ADD LMOD(BIX)        SYSLIB(LPALIB).
  ADD LMOD(BLDINDEX)   SYSLIB(LPALIB).
  ADD LMOD(CANCEL)     SYSLIB(LPALIB).
  ADD LMOD(CNVTC)      SYSLIB(LPALIB).
  ADD LMOD(CNVTCAT)    SYSLIB(LPALIB).
  ADD LMOD(DEF)        SYSLIB(LPALIB).
  ADD LMOD(DEFINE)     SYSLIB(LPALIB).
  ADD LMOD(DEL)        SYSLIB(LPALIB).
  ADD LMOD(DELETE)     SYSLIB(LPALIB).
  ADD LMOD(E)          SYSLIB(LPALIB).
  ADD LMOD(EDIT)       SYSLIB(LPALIB).
  ADD LMOD(END)        SYSLIB(LPALIB).
  ADD LMOD(EX)         SYSLIB(LPALIB).
  ADD LMOD(EXEC)       SYSLIB(LPALIB).
  ADD LMOD(EXPORT)     SYSLIB(LPALIB).
  ADD LMOD(EXPORTRA)   SYSLIB(LPALIB).
  ADD LMOD(FREE)       SYSLIB(LPALIB).
  ADD LMOD(H)          SYSLIB(LPALIB).
  ADD LMOD(HELP)       SYSLIB(LPALIB).
  ADD LMOD(IDCAM01)    SYSLIB(LPALIB).
  ADD LMOD(IDCAM02)    SYSLIB(LPALIB).
  ADD LMOD(IKJEBEAA)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEAR)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEBO)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBECH)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBECI)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBECK)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBECO)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEDA)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEDC)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEDE)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEDO)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEDX)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEEN)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEEX)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEFC)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEFI)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEFO)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEHE)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEIA)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEIN)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEIP)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEIS)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBELE)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBELI)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBELT)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEMA)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEMC)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEME)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEMM)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEMR)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEMS)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEM1)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEM2)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEM3)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEM4)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEM5)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEM6)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEM7)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEPS)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBERC)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBERE)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBERN)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBERU)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBESA)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBESC)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBESE)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBESU)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBETA)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBETO)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEUI)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEUN)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEUP)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEUT)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEVE)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBEXT)   SYSLIB(LPALIB).
  ADD LMOD(IKJEBRE5)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFE11)   SYSLIB(LPALIB).
  ADD LMOD(IKJEFFCA)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGAT)    SYSLIB(LPALIB).
  ADD LMOD(IKJEGATD)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGCAL)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGCIV)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGCPY)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGDCB)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGDEB)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGDEL)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGDRP)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGEND)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGEQU)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGFRE)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGGET)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGGO)    SYSLIB(LPALIB).
  ADD LMOD(IKJEGLDF)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGLDR)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGLOD)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGLSA)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGLST)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGMAP)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGOFF)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGPCH)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGPSW)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGQFY)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGRUN)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGSYM)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGTCB)   SYSLIB(LPALIB).
  ADD LMOD(IKJEGWHR)   SYSLIB(LPALIB).
  ADD LMOD(IKJEHAL1)   SYSLIB(LPALIB).
  ADD LMOD(IKJEHDS1)   SYSLIB(LPALIB).
  ADD LMOD(IKJEHMEM)   SYSLIB(LPALIB).
  ADD LMOD(IKJEHPRO)   SYSLIB(LPALIB).
  ADD LMOD(IKJEHREN)   SYSLIB(LPALIB).
  ADD LMOD(IKJEHSIR)   SYSLIB(LPALIB).
  ADD LMOD(IKJLKL01)   SYSLIB(LPALIB).
  ADD LMOD(IMP)        SYSLIB(LPALIB).
  ADD LMOD(IMPORT)     SYSLIB(LPALIB).
  ADD LMOD(IMPORTRA)   SYSLIB(LPALIB).
  ADD LMOD(LINK)       SYSLIB(LPALIB).
  ADD LMOD(LISTA)      SYSLIB(LPALIB).
  ADD LMOD(LISTALC)    SYSLIB(LPALIB).
  ADD LMOD(LISTB)      SYSLIB(LPALIB).
  ADD LMOD(LISTBC)     SYSLIB(LPALIB).
  ADD LMOD(LISTC)      SYSLIB(LPALIB).
  ADD LMOD(LISTCAT)    SYSLIB(LPALIB).
  ADD LMOD(LISTCRA)    SYSLIB(LPALIB).
  ADD LMOD(LISTD)      SYSLIB(LPALIB).
  ADD LMOD(LISTDS)     SYSLIB(LPALIB).
  ADD LMOD(LISTR)      SYSLIB(LPALIB).
  ADD LMOD(LOAD)       SYSLIB(LPALIB).
  ADD LMOD(LOADGO)     SYSLIB(LPALIB).
  ADD LMOD(LOGOFF)     SYSLIB(LPALIB).
  ADD LMOD(LOGON)      SYSLIB(LPALIB).
  ADD LMOD(MPRA)       SYSLIB(LPALIB).
  ADD LMOD(OPER)       SYSLIB(LPALIB).
  ADD LMOD(OPERATOR)   SYSLIB(LPALIB).
  ADD LMOD(OUT)        SYSLIB(LPALIB).
  ADD LMOD(OUTPUT)     SYSLIB(LPALIB).
  ADD LMOD(PRINT)      SYSLIB(LPALIB).
  ADD LMOD(PROF)       SYSLIB(LPALIB).
  ADD LMOD(PROFILE)    SYSLIB(LPALIB).
  ADD LMOD(PROT)       SYSLIB(LPALIB).
  ADD LMOD(PROTECT)    SYSLIB(LPALIB).
  ADD LMOD(R)          SYSLIB(LPALIB).
  ADD LMOD(RCAT)       SYSLIB(LPALIB).
  ADD LMOD(REN)        SYSLIB(LPALIB).
  ADD LMOD(RENAME)     SYSLIB(LPALIB).
  ADD LMOD(REPRO)      SYSLIB(LPALIB).
  ADD LMOD(RESETCAT)   SYSLIB(LPALIB).
  ADD LMOD(RUN)        SYSLIB(LPALIB).
  ADD LMOD(SE)         SYSLIB(LPALIB).
  ADD LMOD(SEND)       SYSLIB(LPALIB).
  ADD LMOD(ST)         SYSLIB(LPALIB).
  ADD LMOD(STATUS)     SYSLIB(LPALIB).
  ADD LMOD(SUB)        SYSLIB(LPALIB).
  ADD LMOD(SUBMIT)     SYSLIB(LPALIB).
  ADD LMOD(TERM)       SYSLIB(LPALIB).
  ADD LMOD(TERMINAL)   SYSLIB(LPALIB).
  ADD LMOD(TEST)       SYSLIB(LPALIB).
  ADD LMOD(VERIFY)     SYSLIB(LPALIB).
  ADD LMOD(VFY)        SYSLIB(LPALIB).
  ADD LMOD(WHEN)       SYSLIB(LPALIB).
  ADD LMOD(XPRA)       SYSLIB(LPALIB).
  ENDUCL.
/*
//*ADD LMOD(EXP)      SYSLIB(LPALIB). /* TO BE USED WITH CAUTION) */
./ ADD NAME=VS00042  0101-80155-80155-1238-00034-00049-00000-$SYS13  00
//VS00042 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*********************************************************************
//* THIS JOB MUST NOT BE RENUMBERED         DO NOT RENUMBER           *
//*********************************************************************
//* REFER   IPO1.JCLLIB(MSTRUPD)
//* COMPID  SYSTEMS
//* DOC     THIS JOB WILL MODIFY MSTRJCL SUCH THAT
//*         JES WILL NOT BE STARTED AUTOMATICALLY AT IPL.
//*
//*********************************************************************
//* THIS JOB MUST NOT BE RENUMBERED         DO NOT RENUMBER           *
//*********************************************************************
//*
//* STEP1  USES SMP TO CHANGE MACRO SGIEE0MS.  SMP WILL REASSEMBLE
//*        AND LINK-EDIT MSTRJCL INTO SYS1.LINKLIB AUTOMATICALLY.
//*
//STEP1    EXEC  IPOSMP4
//SMPPTFIN DD    *
++ USERMOD (VS00042) .
++ VER (Z038) FMID(JBB1222)
                     /* COMMENT OUT START OF JES IN MSTRJCL */ .
++ MACUPD (SGIEE0MS)  DISTLIB (AMODGEN) .
>< CHANGE NAME=SGIEE0MS
         DC    CL80'//*START &SSNAME       **VS00042 ***'       VS00042
>< ENDUP
/*
//SYSIN  DD *
 REJECT  S(VS00042) .
 RESTORE S(VS00042) .
 RECEIVE S(VS00042) .
 APPLY   S(VS00042) DIS(NO) .
 LIST  CDS SYSMOD(VS00042) DIS(NO) .
/*
./ ADD NAME=VS00043,SSI=00000163
//VS00043 JOB (2000,S010),S.CAIRES,MSGCLASS=A,CLASS=Z
/*JOBPARM Q=F,I
//GENZAPS  PROC MEM=,                         INPUT MEMBER NAME
//             MAC1='SYS1.MACLIB',VOL1=,
//             MAC2='SYS1.AMODGEN',VOL2=,
//             STEP='ASM2.V24.ARCH.LOAD',    STEPLIB FOR GENZAPS
//             OUT='SYS0.SMP.SE.CNTL', GENZAPS OUTPUT
//             DISK=VIO,                     TEMPORARY WORK SPACE
//             S='(1000,(1000,100),,,ROUND)'  UTILITY DATASET SPACE
//*
//*      ASSEMBLE THE MODIFICATION
//*
//ASM     EXEC PGM=IFOX00,PARM='XREF(SHORT),NODECK'
//SYSLIB   DD  DISP=SHR,DSN=&MAC1,VOL=SER=&VOL1,UNIT=DISK
//         DD  DISP=SHR,DSN=&MAC2,VOL=SER=&VOL2,UNIT=DISK
//SYSPRINT DD  DSN=&&LIST,DISP=(,PASS),UNIT=&DISK,SPACE=&S
//SYSUT1   DD  UNIT=&DISK,SPACE=&S
//SYSUT2   DD  UNIT=&DISK,SPACE=&S
//SYSUT3   DD  UNIT=&DISK,SPACE=&S
//*
//*      PRODUCE THE ASSEMBLER LISTING
//*
//LIST    EXEC PGM=IEBGENER,COND=(8,LT,ASM)
//SYSIN    DD  DUMMY
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  DSN=&&LIST,DISP=(OLD,PASS)
//SYSUT2   DD  SYSOUT=*
//*
//*      GENERATE THE SUPERZAP CARDS
//*
//GENZAP  EXEC PGM=$GENZAPS
//ASSEMBLY DD  DSN=&&LIST,DISP=(OLD,DELETE)
//STEPLIB  DD  DISP=SHR,DSN=&STEP
//SYSPRINT DD  SYSOUT=*
//SYSPUNCH DD  DSN=&OUT.(&MEM),DISP=OLD,DCB=BLKSIZE=3120
//SYSUT1   DD  UNIT=&DISK,SPACE=&S
//        PEND
//ASMOPEN  EXEC  GENZAPS,MEM=VS00043O,
//          OUT='SYS0.SMP.SE.CNTL'
//ASM.SYSIN DD DISP=SHR,DSN=ASM2.V24.ARCH.DATA(OPNMVSMD)
//PRT  EXEC PGM=IEBGENER
//SYSPRINT  DD SYSOUT=A
//SYSIN DD DUMMY
//SYSUT1 DD DSN=ASM2.V24.ARCH.DATA(OPNMVSMD),DISP=SHR
//SYSUT2 DD DSN=SYS0.SMP.SE.CNTL(VS00043I),DISP=SHR
//*         DCB=(LRECL=80,RECFM=FB,BLKSIZE=6000)
//SMP EXEC IPOSMP4
//SYSIN DD *
 RESTORE S (VS00043).
 REJECT  S (VS00043).
 RECEIVE S (VS00043).
 APPLY S (VS00043) DIS(NO) .
 LOG (INSTALL ZAPS FOR OPEN MOD WITH ACCOUNTING INFO).
 LOG (LOCAL FIX VS00006 HAS THE COMMAND PROCESSORS FOR ASM2).
 LIST CDS SYSMOD(VS00043) .
/*
//SMPPTFIN DD DISP=SHR,DSN=SYS0.SMP.SE.CNTL(VS00043O)
//         DD *
 IDRDATA VS00043
//
./ ADD NAME=VS00044  0102-80162-80162-1215-00068-00357-00066-$SYS13  00
//VS00044 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//VS00044  EXEC IPOSMP4
//SYSIN    DD  *
 RECEIVE S (VS00044) .
 APPLY S (VS00044)  DIS(NO).
//SMPPTFIN DD  *
++USERMOD (VS00044) .
++VER (Z038) FMID(ESY1400) PRE(UR00535)   /*
           IBM INFORMATION/SYSTEM (INFO/SYSTEM) 5735-OZS
 THE INFORMATION IN THIS DATABASE HAS NOT BEEN SUBMITTED TO ANY FORMAL
 IBM TEST AND IS DISTRIBUTED ON AN -AS IS- BASIS WITHOUT ANY WARRANTY
 EITHER EXPRESSED OR IMPLIED. THE IBM PROVIDED DATA IS COPYRIGHTED.
                  (C) COPYRIGHT IBM CORP. 1979.                      TAP


 LAST KWS: K E CICS SMP
 PRINT DATA ENTRY  E014918

 H E014918 D=FEB80 S=SMP       C=GHX4            L=055
 T                       F   -CRCMV-IR10797--5744-SC-130--MS-MSGHMA3562
 T UCLIN BUILT BY CICS CAUSES MSGHMA3562 BECAUSE OF DISTLIB

    AC23751H PIN 5744-SC-130-299 IR10797 MS-MSGHMA3562
  F   -     -CRCMV-
  UCLIN BUILT BY CICS CAUSES MSGHMA3562 BECAUSE OF DISTLIB
  END OF ABSTRACT   FESN5X01503-SY1
  REPORTED RELEASE    R400
  ERROR DESCRIPTION:
  CICS STAGE 2 GEN PRODUCES UCLIN CARDS TO UPDATE CDS MACRO
  ENTRIES AND CAUSES THE PROBLEM REFERENCED IN PP81128 AND
  PP87158. THE PROBLEM IS THAT A MACRO MAY BE USED TO ASSEMBLE
  MULTIPLE MODULES. A UCLIN ADD STATEMENT IS BUILT FOR EACH
  MODULE NAME. THE FOLLOWING WOULD BE TYPICAL IF A MACRO
  ASSEMBLED TWO MODULES:
   UCLIN CDS.
   ADD MACRO(MACA) MOD(MODA) DISTLIB(CICS).
   ADD MACRO(MACA) MOD(MODB) DISTLIB(CICS).
  WHEN SMP ENCOUNTERS THE FIRST MACRO, THE ENTRY WILL BE ADDED AND
  EVERYTHING IS OK. WHEN SMP ENCOUNTERS THE SECOND ADD CARD,
  MSGHMA3562 IS PRODUCED AND THE UCLIN STOPS. THE HMA3562 MESSAGE
  IS VALID DUE TO THE DISTLIB ENTRY ALREADY BEING PRESENT FROM THE
  FIRST ADD (A DISTLIB CAN ONLY BE ADDED TO AN EMPTY ENTRY). THE
  RESULT IS THAT YOU CAN ONLY UPDATE THE MACRO ENTRY WITH THE
  FIRST MODULE NAME.
    IF THE ADD CARDS ARE CHANGED TO REP CARDS TO AVOID THE ERROR
  MESSAGE, YOU GET ONLY THE EFFECT OF THE LAST REP AS THE REP
  TOTALLY REPLACES THE MACRO ENTRY.
  PROBLEM CONCLUSION:
  IF THERE IS A NEED FOR A REDESIGN OF SMP4, CICS AND OTHER
  PROGRAMS WHO MAY HAVE THE SAME PROBLEM SHOULD REQUEST A
  DESIGN CHANGE OF SMP4.
  COMMENTS:
  THIS APAR WAS CREATED AS A PSEUDO APAR.
  CIRCUMVENTION:
  THE FOLLOWING CIRCUMVENTION MAY BE USED TO AVOID CHANGING
  ALL THE UCLIN ADD CARDS. THIS CIRCUMVENTION WILL ALLOW THE
  ADD FUNCTION TO, IN EFFECT, REPLACE THE DISTLIB ENTRY ONLY.
  THUS, THE LAST DISTLIB ENCOUNTERED ON AN ADD WILL BE THE
  DISTLIB IN THE MACRO ENTRY. THIS CIRCUMVENTION SHOULD BE
  REMOVED AS SOON AS THE CDS HAS BEEN UPDATED. */ .
++ZAP (HMASMUC1).
  NAME HMASMUC1
  VER 14D4 4770A4C7
  REP 14D4 4700A4C7
  IDRDATA VS00044
/*
./ ADD NAME=VS00045  0100-80170-80170-1301-00032-00032-00000-$SYS13  00
//VS00045 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//*   INSTALL THE CICS SVC'S 245, 229 AND 209.
//*
//VS00045  EXEC IPOSMP4,RES=ITEL01
//SYSIN DD *
 UCLIN CDS .
 REP MOD(DFHHPSV1) LMOD(IEANUC01) DISTLIB(CICS) FMID(EBB1102) .
 REP MOD(DFHIRCP)  LMOD(IEANUC01) DISTLIB(CICS) FMID(EBB1102) .
 ENDUCL .
 REJECT S(VS00045) .
 RECEIVE S(VS00045) .
 APPLY   S(VS00045) .
 LOG (ADD SVC'S 245, 229 AND 209 FOR CICS) .
 LIST CDS SYSMOD(VS00045) .
//CICS   DD DSN=SYS4.CICS.V140.TEST.LOADLIB,DISP=SHR
//SMPPTFIN DD DATA
++ USERMOD (VS00045) .
++ VER (Z038) FMID(EBB1102).
++ MOD (DFHHPSV1) DISTLIB(CICS) LKLIB(CICS) .
++ MOD (DFHIRCP)  DISTLIB(CICS) LKLIB(CICS) .
++ MOD (IGC0024E) DISTLIB(CICS) LKLIB(CICS) .
++ JCLIN .
//VS00045 EXEC PGM=IEBCOPY
//SYSPRINT DD SYSOUT=*
//CICS   DD DSN=SYS4.CICS.V140.TEST.LOADLIB,DISP=SHR
//LPALIB DD DSN=SYS1.LPALIB,DISP=SHR,UNIT=DISK,VOL=SER=ITEL01
//SYSIN  DD *
 C I=((CICS,R),O=LPALIB
 S M=IGC0024E
/*
./ ADD NAME=VS00046  0105-80170-80170-1320-00049-00025-00041-$SYS13  00
//VS00046 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//*         STEP 1 ASSEMBLE IEDQ21 FOR ACF2
//*         STEP 2 SMP TO INSTALL IEDQ21 AND ZAP IEDAYW
//*
//STEP1    EXEC ASMFC,
//          PARM.ASM='NOTERM,LIST,NODECK,OBJECT'
//ASM.SYSGO DD DSN=SYS0.LINKLIB2.OBJ(IEDQ21),DISP=OLD
//SYSIN     DD DSN=SYS4.ACF2.V221.ACFMAC(ACIEDQ21),DISP=SHR
//*
//STEP2  EXEC IPOSMP4,COND=(8,LT)
//SMPCNTL  DD  *
 REJECT  S (VS00046).
 RECEIVE S (VS00046).
 APPLY   S (VS00046) DIS(NO).
 LOG (REPLACE TTY TRANSLATE TABLE AND ZAP IEDAYW).
 LIST  CDS SYSMOD(VS00046) DIS(NO).
//SMPPTFIN  DD  *
++USERMOD(VS00046)  /* ACF2 PTF TT70020, OLD ACF2 PTF TT70010 */ .
++VER(Z038) FMID(ETC0108) PRE(UZ26841)   /* REL 3.8  */ .
++MOD(IEDQ21) DISTLIB(AOS21)  TXLIB(OBJECT).
++ZAP(IEDAYW) DISTLIB(AOS21)   /*
  THESE ZAPS TO TCAM MODIFY THE I/O EDITTING
  ROUTINES SO THAT TTY COMPATIBLE TERMINALS
  ARE ABLE TO RECEIVE/SEND CERTAIN CONTROL
  CHARACTERS SUCH AS PHYSICAL BACKSPACE,
  SCREEN CLEAR STRINGS, AND OTHERS.  THIS ALSO
  SHOULD REQUIRE THE INSTALLATION OF THE
  UNIVERSAL ASCII TRANSLATE TABLE (IEDQ21).
  IF THIS OPTIONAL FIX IS PLACED ON THE
  SYSTEM, SEE THE @OPTS MACRO IN ACFFDR
  FOR ASCII TERMINAL SPECIFICATIONS.  REMEMBER
  TO RUN AN MCP LINKEDIT AFTER APPLICATION.  */ .
NAME IEDAYW
*  FOR USE WITH 270X EMULATOR
VER 0F64 441031E4    REDUC01  EX  RNDX,CTLR     TR OUT CNTL CHARS
VER 0F68 18F8                 LR  RRTN,RTEMP    COPY CHAR COUNT
VER 0F6A 957A9000    CTLOOP   CLI ZERO(RTEMPA),COLON CHAR=COLON?
VER 0F6E 477031C0             BNE NOPRINT       COUNT NON COLONS
*  ALLOW ASCII TERMINAL TO USE BACKSPACE
VER 0E7C 9120D15A             TM  AVTPARM3+2,CTWX  TWX TERMINAL?
VER 0E80 471030EE             BO  REPWID        REPL BS W/IDLE
*  CHANGE ABOVE TCAM CODE TO
REP 0F64 4700                 NOP               LEAVE ALL CHARS
REP 0F6E 47F0                 B   NOPRINT       CNT ALL CHARS
REP 0E80 4700                 NOP               ALLOW BACKSPACE
//OBJECT    DD  DISP=SHR,DSN=SYS0.LINKLIB2.OBJ
//********************************************************************
./ ADD NAME=VS00047  0104-80191-80207-1532-00047-00046-00000-$CSG05  00
//VS00047  JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//VS00047  EXEC IPOSMP4
//SYSIN DD *
 REJECT  S (VS00047) .
 RECEIVE S (VS00047) .
 APPLY   S (VS00047) .
//SMPPTFIN DD  *
++ USERMOD (VS00047) /* PUT JOB NAME ON THE PUNCH SEPARATOR CARD */ .
++ VER (Z038)  FMID(EJE1102)
       PRE (AZ40644, UZ26743, UZ27051, UZ27259, UZ90070,
            TT82211,
            VS00017, VS00018, VS00025, VS00033) .
++ SRCUPD (HASPPRPU) DISTLIB(HASPSRC) .
>< CHANGE NAME=HASPPRPU
         L     PW,PCEDCT           PROVIDE DCT                 @ITEL    Q2611510
         USING DCTDSECT,PW          ADDRESSABILITY             @ITEL    Q2611520
         CLC   DCTUCS,=CL4'TN'     TN TRAIN MOUNTED ?          @ITEL    Q2611530
         BNE   *+8                 NO, USE ALREADY LOADED ADDR @ITEL    Q2611540
         L     R15,=A(PTNTBL)      GET TN TRANSLATE TABLE      @ITEL    Q2611550
         DROP  PW                  SUSPEND DCT ADDRESSABILITY  @ITEL    Q2611560
***************************************************************@ITEL    Q5280404
*                                                              @ITEL    Q5280408
*        &PRTRANS TRANSLATE TABLE - 96 CHARACTER TRAIN         @ITEL    Q5280412
*                                                              @ITEL    Q5280416
*        TRANSLATE INVALID TN-TRAIN CHARACTERS TO BLANKS       @ITEL    Q5280420
*                                                              @ITEL    Q5280424
***************************************************************@ITEL    Q5280428
         SPACE 1                                               @ITEL    Q5280432
PTNTBL   DC    C'                                '  TRANSLATE  @ITEL    Q5280436
         DC    C'                                '  TABLE      @ITEL    Q5280440
         DC    C'           .<(+|&&         !$*);¬' USED TO    @ITEL    Q5280444
         DC    C'-/         ,%_>?          :#@''="' TRANSLATE  @ITEL    Q5280448
         DC    X'40818283848586878889404040404040'             @ITEL    Q5280452
         DC    X'40919293949596979899404040404040'             @ITEL    Q5280456
         DC    X'40A1A2A3A4A5A6A7A8A9404040AD4040'             @ITEL    Q5280460
         DC    X'40404040404040404040404040BD4040'             @ITEL    Q5280464
         DC    X'C0'                                           @ITEL    Q5280468
         DC    C'ABCDEFGHI      '                   CHARACTERS @ITEL    Q5280472
         DC    X'D0'                                           @ITEL    Q5280476
         DC    C'JKLMNOPQR      '                   CHARACTERS @ITEL    Q5280480
         DC    X'E0'                                           @ITEL    Q5280484
         DC    C' STUVWXYZ   '                                 @ITEL    Q5280486
         DC    X'EC4040'                                       @ITEL    Q5280487
         DC    C'0123456789|     '                  TO BLANKS  @ITEL    Q5280488
><  ENDUP                                                               Q9999999
/*
./ ADD NAME=VS00048  0103-80182-80198-0810-00030-00029-00016-$SYS08  00
//VS00048 JOB (2000,S010),WENZEL,CLASS=Z
/*JOBPARM Q=F,I
//*
//*   INSTALL THE JARS CICS SVC'S 237 AND 208.
//*
//VS00048  EXEC IPOSMP4
//SYSIN DD *
 UCLIN CDS .
 REP MOD(IGC207)   LMOD(IEANUC01) DISTLIB(JARSCICS) FMID(EBB1102) .
 ENDUCL .
 REJECT  S(VS00048) .
 RECEIVE S(VS00048) .
 APPLY   S(VS00048) .
 LOG (ADD SVC'S 236 AND 207 FOR JARS TESTCICS) .
 LIST CDS SYSMOD(VS00048) .
//JARSCICS DD DISP=SHR,DSN=SYS4.JARSCICS.V21.PROD.LOADLIB
//SMPPTFIN DD DATA
++ USERMOD (VS00048) .
++ VER (Z038) FMID(EBB1102).
++ MOD (IGC207)  DISTLIB(JARSCICS)  LKLIB(JARSCICS) .
++ MOD (IGC0023F) DISTLIB(JARSCICS) LKLIB(JARSCICS) .
++ JCLIN .
//VS00048 EXEC PGM=IEBCOPY
//SYSPRINT DD SYSOUT=*
//JARSCICS DD DISP=SHR,DSN=SYS4.JARSCICS.V21.PROD.LOADLIB
//LPALIB DD DSN=SYS1.LPALIB,DISP=OLD
//SYSIN  DD *
 C I=((JARSCICS,R)),O=LPALIB
 S M=IGC0023F
/*
./ ADD NAME=VS00053  0108-80060-80101-1733-00039-00039-00000-$SYS03  00
//VS00053  JOB (2000,S010),S.CAIRES,CLASS=Z,MSGCLASS=A
/*JOBPARM Q=F,I
//*
//* VS00053 FROM DENNIS BARTLEY OF UIC, 2/28/80, BY CAIRES.
//* AVOID ERROR IN HASPCOMM DUE TO COPY #COFJMXQ CODE BY APPLYING
//* VS00053 BEFORE UZ26743 FROM PUT TAPE 7909 IS APPLIED TO NEW MVS 3.8
//* AT DLIB 7908 LEVEL.
//*
//VS00053  EXEC IPOSMP4          DLIB=PAG002,RES=SYS101,PTS=PAG002
//SYSIN DD *    ( //SMPCNTL DD DDNAME=SYSIN  IN IPOSMP4 PROC )
 LIST  CDS SYSMOD(VS00053) .
 RESTORE S (VS00053)  DIS(WRITE)  /* BACKUP CDS AND ACDS FIRST */ .
 LIST  PTS SYSMOD(VS00053) .
 REJECT  S (VS00053).
 RECEIVE S (VS00053).
 LIST  PTS SYSMOD(VS00053, JTP0001) .
 APPLY   S (VS00053)  DIS(WRITE)  /* BACKUP CDS AND ACDS FIRST */ .
 LIST  CDS SYSMOD(VS00053, JTP0001) .
 ACCEPT  S (VS00053)  USERMODS
                      DIS(WRITE)  /* BACKUP CDS AND ACDS FIRST */ .
 LIST  ACDS SYSMOD(VS00053) .
//SMPPTFIN DD  *
++ USERMOD (VS00053) /* JTIP 03/06/80 FIX TO HASPCOMM ERROR; APPLY
                        BEFORE PUT 7909 WITH UZ26743 JES2 LEVEL SET;
                        FROM DENNIS BARTLEY OF UIC 2/28/80;
                        #COFJMXQ OBTAINED BY COPY IN HASPCOMM */.
++ VER (Z038)  FMID(JTP0001) .
++ MACUPD (#COFJMXQ) DISTLIB(JTIPMAC) .
>< CHANGE NAME=#COFJMXQ
*        C     R1,SJBJQE JQE'S MATCH??  DELETED PER UIC 2/28/80 VS00053
*        BNE   COFJMXL2  BR IF NOT      DELETED PER UIC 2/28/80 VS00053
><  ENDUP
//DUMMYJCL DD *        (UNUSED CARDS)
 APPLY   S (VS00053) CHECK /* DIS(READ) */ .
         C     R1,SJBJQE           JQE'S MATCH??           BAD? UIC 002
         BNE   COFJMXL2             BR IF NOT              BAD? UIC 002
         CLC   JQETRAK,SJBJCTRK    JCT TRACK MATCH?        GOOD UIC 002
         BNE   COFJMXL2             BR IF NOT              GOOD UIC 002
/*
./ ADD NAME=VS00054  0105-80217-80218-0801-00081-00081-00081-$CSG05  00
//VS00054  JOB (2000,S010),ASM2
/*JOBPARM Q=F,I
/*ROUTE PRINT LOCAL
//GENZAPS  PROC MEM=,                INPUT MEMBER NAME
//             MAC1='SYS1.MACLIB',
//             MAC2='SYS1.AMODGEN',
//             MAC3='SYS4.ASM2.V25.ARCH.DATA',
//             STEP='SYS4.ASM2.V25.ARCH.LOAD', STEPLIB FOR GENZAPS
//             DISK=SYSDA,           TEMPORARY WORK SPACE
//             S='(1000,(1000,100),,,ROUND)' WORK SPACE
//*
//*      ASSEMBLE THE MODIFICATION
//*
//ASM     EXEC PGM=IFOX00,PARM='XREF(SHORT),NODECK',
//             TIME=5,REGION=256K
//SYSIN    DD  DSN=SYS0.SMP.SE.CNTL(&MEM.I),DISP=SHR
//SYSLIB   DD  DISP=SHR,DSN=&MAC1
//         DD  DISP=SHR,DSN=&MAC2
//         DD  DISP=SHR,DSN=&MAC3
//SYSPRINT DD  DSN=&LIST,DISP=(,PASS),UNIT=&DISK,SPACE=&S
//SYSUT1   DD  UNIT=&DISK,SPACE=&S
//SYSUT2   DD  UNIT=&DISK,SPACE=&S
//SYSUT3   DD  UNIT=&DISK,SPACE=&S
//*
//*      PRODUCE THE ASSEMBLER LISTING
//*
//LIST    EXEC PGM=IEBGENER,TIME=2,REGION=256K
//SYSIN    DD  DUMMY
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  DSN=&LIST,DISP=(OLD,PASS)
//SYSUT2   DD  SYSOUT=*
//*
//*      GENERATE THE SUPERZAP CARDS
//*
//GENZAP  EXEC PGM=$GENZAPS,COND=(4,LT,ASM)
//ASSEMBLY DD  DSN=&LIST,DISP=(OLD,DELETE)
//STEPLIB  DD  DISP=SHR,DSN=&STEP
//SYSPRINT DD  SYSOUT=*
//SYSPUNCH DD  DSN=SYS0.SMP.SE.CNTL(&MEM.O),DISP=OLD
//SYSUT1   DD  UNIT=&DISK,SPACE=&S
//        PEND
//GNR196WA EXEC  PGM=IEBGENER
//SYSPRINT  DD  SYSOUT=A
//SYSUT1    DD  *
 TITLE 'VS00054' - IFG0196W - ASM2 INFORMATION INTO F1 DSCB
IFG0196W CSECT
      PRINT ON,DATA,GEN    NEEDED TO PICK UP LONG CHAR STRINGS
         LCLC  &PTF,&EXP,&LMTYP,&LMOPT,&REL,&MODNAME
         LCLC  &BASE,&BYP1,&PAT1,&ENDMOD
&LMTYP   SETC  'ACT'      SET TO SELECT
*                             LAST MOD ID OPTION
*                               'JOB' - USE JOBNAME/USERID
*                               'ACF' - USE ACF2 LOGON ID
*                               'ACT' - USE 1ST 8 CHAR.
*                                         OF OS ACCT INFO
&LMOPT   SETC  'F'      SET TO SELECT LAST MOD ID
*                    'F' - LAST MOD ID FIRST ONLRWB 5/30/80
*                    'U' - LAST MOD ID EVERY UPDRWB 5/30/80
&PTF     SETC  'EDM1102'    PTF LEVEL OF IFG0196W
*
&REL     SETC   '038'      RELEASE LEVEL (037 OR 038)
*
&MODNAME SETC   'VS00054'   USER MODIFICATION NAME
/*
//SYSUT2   DD  DSN=&TEMP1,DISP=(,PASS),UNIT=SYSDA,
//             SPACE=(TRK,(1,1)),DCB=SYS4.ASM2.V25.ARCH.DATA
//SYSIN    DD  DUMMY
//GNR196WB EXEC  PGM=IEBGENER,COND=(0,LT,GNR196WA)
//SYSPRINT DD  SYSOUT=A
//SYSUT1   DD  DSN=&TEMP1,DISP=(OLD,DELETE)
//         DD  DSN=SYS4.ASM2.V25.ARCH.DATA(OPNMVS6W),DISP=SHR
//SYSUT2   DD  DSN=SYS0.SMP.SE.CNTL(VS00054I),DISP=OLD
//SYSIN    DD  DUMMY
//ASM196W EXEC GENZAPS,MEM=VS00054
//SMP EXEC IPOSMP4,COND=(4,LT)
//SMPPTFIN DD DISP=SHR,DSN=SYS0.SMP.SE.CNTL(VS00054O)
//SYSIN DD *
 RESTORE S(VS00054).
 REJECT  S(VS00054).
 RECEIVE S(VS00054).
 APPLY   S(VS00054).
./ ADD NAME=VS00055  0104-80217-80218-0917-00081-00073-00081-$CSG05  00
//VS00055  JOB (2000,S010),ASM2
/*JOBPARM Q=F,I
/*ROUTE PRINT LOCAL
//GENZAPS  PROC MEM=,                INPUT MEMBER NAME
//             MAC1='SYS1.MACLIB',
//             MAC2='SYS1.AMODGEN',
//             MAC3='SYS4.ASM2.V25.ARCH.DATA',
//             STEP='SYS4.ASM2.V25.ARCH.LOAD', STEPLIB FOR GENZAPS
//             DISK=SYSDA,           TEMPORARY WORK SPACE
//             S='(1000,(1000,100),,,ROUND)' WORK SPACE
//*
//*      ASSEMBLE THE MODIFICATION
//*
//ASM     EXEC PGM=IFOX00,PARM='XREF(SHORT),NODECK',
//             TIME=5,REGION=256K
//SYSIN    DD  DSN=SYS0.SMP.SE.CNTL(&MEM.I),DISP=SHR
//SYSLIB   DD  DISP=SHR,DSN=&MAC1
//         DD  DISP=SHR,DSN=&MAC2
//         DD  DISP=SHR,DSN=&MAC3
//SYSPRINT DD  DSN=&LIST,DISP=(,PASS),UNIT=&DISK,SPACE=&S
//SYSUT1   DD  UNIT=&DISK,SPACE=&S
//SYSUT2   DD  UNIT=&DISK,SPACE=&S
//SYSUT3   DD  UNIT=&DISK,SPACE=&S
//*
//*      PRODUCE THE ASSEMBLER LISTING
//*
//LIST    EXEC PGM=IEBGENER,TIME=2,REGION=256K
//SYSIN    DD  DUMMY
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  DSN=&LIST,DISP=(OLD,PASS)
//SYSUT2   DD  SYSOUT=*
//*
//*      GENERATE THE SUPERZAP CARDS
//*
//GENZAP  EXEC PGM=$GENZAPS,COND=(4,LT,ASM)
//ASSEMBLY DD  DSN=&LIST,DISP=(OLD,DELETE)
//STEPLIB  DD  DISP=SHR,DSN=&STEP
//SYSPRINT DD  SYSOUT=*
//SYSPUNCH DD  DSN=SYS0.SMP.SE.CNTL(&MEM.O),DISP=OLD
//SYSUT1   DD  UNIT=&DISK,SPACE=&S
//        PEND
//GNR194CA EXEC  PGM=IEBGENER
//SYSPRINT  DD  SYSOUT=A
//SYSUT1    DD  *
 TITLE 'VS00055' - IFG0194C - ASM2 INFORMATION INTO F1 DSCB
IFG0194C CSECT
      PRINT ON,DATA,GEN    NEEDED TO PICK UP LONG CHAR STRINGS
         LCLC  &PTF,&EXP,&LMTYP,&LMOPT,&REL,&MODNAME
         LCLC  &BASE,&BYP1,&PAT1,&ENDMOD
&LMTYP   SETC  'ACT'      SET TO SELECT
*                             LAST MOD ID OPTION
*                               'JOB' - USE JOBNAME/USERID
*                               'ACF' - USE ACF2 LOGON ID
*                               'ACT' - USE 1ST 8 CHAR.
*                                         OF OS ACCT INFO
&LMOPT  SETC  'F'      SET TO SELECT LAST MOD ID
*                    'F' - LAST MOD ID FIRST ONLRWB 5/30/80
*                    'U' - LAST MOD ID EVERY UPDRWB 5/30/80
&PTF     SETC  'UZ90018'   PTF LEVEL OF IFG0194C
*
&REL     SETC   '038'      RELEASE LEVEL (037 OR 038)
*
&MODNAME SETC   'VS00055'   USER MODIFICATION NAME
/*
//SYSUT2   DD  DSN=&TEMP2,DISP=(,PASS),UNIT=SYSDA,
//             SPACE=(TRK,(1,1)),DCB=SYS4.ASM2.V25.ARCH.DATA
//SYSIN    DD  DUMMY
//GNR194CB EXEC  PGM=IEBGENER,COND=(0,LT,GNR194CA)
//SYSPRINT DD  SYSOUT=A
//SYSUT1   DD  DSN=&TEMP2,DISP=(OLD,DELETE)
//         DD  DSN=SYS4.ASM2.V25.ARCH.DATA(OPNMVS4C),DISP=SHR
//SYSUT2   DD  DSN=SYS0.SMP.SE.CNTL(VS00055I),DISP=OLD
//SYSIN    DD  DUMMY
//ASM194C EXEC GENZAPS,MEM=VS00055
//SMP EXEC IPOSMP4,COND=(4,LT)
//SMPPTFIN DD DISP=SHR,DSN=SYS0.SMP.SE.CNTL(VS00055O)
//SYSIN DD *
 RESTORE S(VS00055).
 REJECT  S(VS00055).
 RECEIVE S(VS00055).
 APPLY   S(VS00055).
./ ADD NAME=VS00056  0104-80217-80218-0918-00072-00064-00072-$CSG05  00
//VS00056  JOB (2000,S010),ASM2
/*JOBPARM Q=F,I
/*ROUTE PRINT LOCAL
//GENZAPS  PROC MEM=,                INPUT MEMBER NAME
//             MAC1='SYS1.MACLIB',
//             MAC2='SYS1.AMODGEN',
//             MAC3='SYS4.ASM2.V25.ARCH.DATA',
//             STEP='SYS4.ASM2.V25.ARCH.LOAD', STEPLIB FOR GENZAPS
//             DISK=SYSDA,           TEMPORARY WORK SPACE
//             S='(1000,(1000,100),,,ROUND)' WORK SPACE
//*
//*      ASSEMBLE THE MODIFICATION
//*
//ASM     EXEC PGM=IFOX00,PARM='XREF(SHORT),NODECK',
//             TIME=5,REGION=256K
//SYSIN    DD  DSN=SYS0.SMP.SE.CNTL(&MEM.I),DISP=SHR
//SYSLIB   DD  DISP=SHR,DSN=&MAC1
//         DD  DISP=SHR,DSN=&MAC2
//         DD  DISP=SHR,DSN=&MAC3
//SYSPRINT DD  DSN=&LIST,DISP=(,PASS),UNIT=&DISK,SPACE=&S
//SYSUT1   DD  UNIT=&DISK,SPACE=&S
//SYSUT2   DD  UNIT=&DISK,SPACE=&S
//SYSUT3   DD  UNIT=&DISK,SPACE=&S
//*
//*      PRODUCE THE ASSEMBLER LISTING
//*
//LIST    EXEC PGM=IEBGENER,TIME=2,REGION=256K
//SYSIN    DD  DUMMY
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  DSN=&LIST,DISP=(OLD,PASS)
//SYSUT2   DD  SYSOUT=*
//*
//*      GENERATE THE SUPERZAP CARDS
//*
//GENZAP  EXEC PGM=$GENZAPS,COND=(4,LT,ASM)
//ASSEMBLY DD  DSN=&LIST,DISP=(OLD,DELETE)
//STEPLIB  DD  DISP=SHR,DSN=&STEP
//SYSPRINT DD  SYSOUT=*
//SYSPUNCH DD  DSN=SYS0.SMP.SE.CNTL(&MEM.O),DISP=OLD
//SYSUT1   DD  UNIT=&DISK,SPACE=&S
//        PEND
//GNR192CA EXEC  PGM=IEBGENER
//SYSPRINT  DD  SYSOUT=A
//SYSUT1    DD  *
 TITLE 'VS00056' - IDA0192C - ASM2 INFORMATION INTO VSAM
IDA0192C CSECT
      PRINT ON,DATA,GEN    NEEDED TO PICK UP LONG CHAR STRINGS
         LCLC  &PTF,&EXP,&REL,&MODNAME
         LCLC  &HOOK,&ENDMOD
&PTF     SETC  'UZ27104'   PTF LEVEL OF IDA0192C
*
&REL     SETC   '038'      RELEASE LEVEL (037 OR 038)
*
&MODNAME SETC   'VS00056'   USER MODIFICATION NAME
/*
//SYSUT2   DD  DSN=&TEMP3,DISP=(,PASS),UNIT=SYSDA,
//             SPACE=(TRK,(1,1)),DCB=SYS4.ASM2.V25.ARCH.DATA
//SYSIN    DD  DUMMY
//GNR192CB EXEC  PGM=IEBGENER,COND=(0,LT,GNR192CA)
//SYSPRINT DD  SYSOUT=A
//SYSUT1   DD  DSN=&TEMP3,DISP=(OLD,DELETE)
//         DD  DSN=SYS4.ASM2.V25.ARCH.DATA(CLSMVS2C),DISP=SHR
//SYSUT2   DD  DSN=SYS0.SMP.SE.CNTL(VS00056I),DISP=OLD
//SYSIN    DD  DUMMY
//ASM192C EXEC GENZAPS,MEM=VS00056
//SMP EXEC IPOSMP4,COND=(4,LT)
//SMPPTFIN DD DISP=SHR,DSN=SYS0.SMP.SE.CNTL(VS00056O)
//SYSIN DD *
 RESTORE S(VS00056).
 REJECT  S(VS00056).
 RECEIVE S(VS00056).
 APPLY   S(VS00056).
